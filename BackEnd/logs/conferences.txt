
11:14:09 [Information] () Hello World!

11:14:11 [Debug] () Hosting starting

11:14:11 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

11:14:11 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

11:14:12 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

11:14:12 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

11:14:12 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

11:14:12 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

11:14:12 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

11:14:12 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

11:14:12 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

11:14:12 [Debug] () Decrypting secret element using Windows DPAPI.

11:14:12 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

11:14:12 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

11:14:12 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

11:14:12 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

11:14:12 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

11:14:12 [Fatal] () Application startup exception
System.Exception: Could not resolve a service of type 'Serilog.ILogger' for the parameter 'logger' of method 'Configure' on type 'BackEnd.Startup'. ---> System.InvalidOperationException: No service for type 'Serilog.ILogger' has been registered.
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)
   at Microsoft.AspNetCore.Hosting.Internal.ConfigureBuilder.Invoke(Object instance, IApplicationBuilder builder)
   --- End of inner exception stack trace ---
   at Microsoft.AspNetCore.Hosting.Internal.ConfigureBuilder.Invoke(Object instance, IApplicationBuilder builder)
   at Microsoft.AspNetCore.Hosting.Internal.ConfigureBuilder.<>c__DisplayClass4_0.<Build>b__0(IApplicationBuilder builder)
   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.Configure(IApplicationBuilder app)
   at Microsoft.AspNetCore.Mvc.Internal.MiddlewareFilterBuilderStartupFilter.<>c__DisplayClass0_0.<Configure>g__MiddlewareFilterBuilder|0(IApplicationBuilder builder)
   at Microsoft.AspNetCore.Server.IIS.Core.IISServerSetupFilter.<>c__DisplayClass2_0.<Configure>b__0(IApplicationBuilder app)
   at Microsoft.AspNetCore.HostFilteringStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder app)
   at Microsoft.AspNetCore.Hosting.Internal.AutoRequestServicesStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder builder)
   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()

11:14:12 [Debug] () Hosting started

11:14:12 [Debug] () Loaded hosting startup assembly "BackEnd"

11:14:12 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

11:14:12 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

11:14:12 [Information] () Request finished in 58.0625ms 500 text/html; charset=utf-8

11:14:12 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/favicon.ico  

11:14:12 [Information] () Request finished in 5.8342ms 500 text/html; charset=utf-8

11:14:14 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/attendees/a@a  

11:14:14 [Information] () Request finished in 3.826ms 500 text/html; charset=utf-8

11:22:06 [Information] () Hello World!

11:22:08 [Debug] () Hosting starting

11:22:08 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

11:22:08 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

11:22:08 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

11:22:08 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

11:22:08 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

11:22:08 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

11:22:08 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

11:22:08 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

11:22:09 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

11:22:09 [Debug] () Decrypting secret element using Windows DPAPI.

11:22:09 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

11:22:09 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

11:22:09 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

11:22:09 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

11:22:09 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

11:22:09 [Fatal] () Application startup exception
System.Exception: Could not resolve a service of type 'Microsoft.Extensions.Logging.ILogger' for the parameter 'logger' of method 'Configure' on type 'BackEnd.Startup'. ---> System.InvalidOperationException: No service for type 'Microsoft.Extensions.Logging.ILogger' has been registered.
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)
   at Microsoft.AspNetCore.Hosting.Internal.ConfigureBuilder.Invoke(Object instance, IApplicationBuilder builder)
   --- End of inner exception stack trace ---
   at Microsoft.AspNetCore.Hosting.Internal.ConfigureBuilder.Invoke(Object instance, IApplicationBuilder builder)
   at Microsoft.AspNetCore.Hosting.Internal.ConfigureBuilder.<>c__DisplayClass4_0.<Build>b__0(IApplicationBuilder builder)
   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.Configure(IApplicationBuilder app)
   at Microsoft.AspNetCore.Mvc.Internal.MiddlewareFilterBuilderStartupFilter.<>c__DisplayClass0_0.<Configure>g__MiddlewareFilterBuilder|0(IApplicationBuilder builder)
   at Microsoft.AspNetCore.Server.IIS.Core.IISServerSetupFilter.<>c__DisplayClass2_0.<Configure>b__0(IApplicationBuilder app)
   at Microsoft.AspNetCore.HostFilteringStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder app)
   at Microsoft.AspNetCore.Hosting.Internal.AutoRequestServicesStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder builder)
   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()

11:22:09 [Debug] () Hosting started

11:22:09 [Debug] () Loaded hosting startup assembly "BackEnd"

11:22:09 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

11:22:09 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

11:22:09 [Information] () Request finished in 41.9607ms 500 text/html; charset=utf-8

11:22:09 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/favicon.ico  

11:22:09 [Information] () Request finished in 7.8185ms 500 text/html; charset=utf-8

11:22:11 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/attendees/a@a  

11:22:11 [Information] () Request finished in 4.1721ms 500 text/html; charset=utf-8

11:29:03 [Information] () Hello World!

11:29:05 [Debug] () Hosting starting

11:29:05 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

11:29:05 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

11:29:06 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

11:29:06 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

11:29:06 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

11:29:06 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

11:29:06 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

11:29:06 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

11:29:06 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

11:29:06 [Debug] () Decrypting secret element using Windows DPAPI.

11:29:06 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

11:29:06 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

11:29:06 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

11:29:06 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

11:29:06 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

11:29:06 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

11:29:06 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

11:29:06 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

11:29:06 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

11:29:06 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

11:29:06 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

11:29:06 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

11:29:06 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

11:29:06 [Debug] () Hosting started

11:29:06 [Debug] () Loaded hosting startup assembly "BackEnd"

11:29:06 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

11:29:06 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

11:29:06 [Debug] () Wildcard detected, all requests with hosts will be allowed.

11:29:06 [Information] () No cached response available for this request.

11:29:06 [Debug] () The request path "" does not match the path filter

11:29:07 [Debug] () No candidates found for the request path '"/api/values"'

11:29:07 [Debug] () Request did not match any endpoints

11:29:07 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

11:29:07 [Information] () The response could not be cached for this request.

11:29:07 [Debug] () Connection ID ""18158513703463419941"" disconnecting.

11:29:07 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

11:29:07 [Information] () No cached response available for this request.

11:29:07 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

11:29:07 [Information] () The response could not be cached for this request.

11:29:07 [Debug] () Connection ID ""18230571301796315231"" disconnecting.

11:29:07 [Information] () Request finished in 3.022ms 301 

11:29:07 [Information] () Request finished in 185.8283ms 302 

11:29:07 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

11:29:07 [Information] () No cached response available for this request.

11:29:07 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

11:29:07 [Information] () The response has been cached.

11:29:07 [Information] () Request finished in 228.147ms 200 text/html

11:29:07 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

11:29:07 [Information] () No cached response available for this request.

11:29:07 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

11:29:07 [Information] () No cached response available for this request.

11:29:07 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

11:29:07 [Information] () No cached response available for this request.

11:29:07 [Information] () The file "/swagger-ui-bundle.js" was not modified

11:29:07 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

11:29:07 [Information] () The file "/swagger-ui.css" was not modified

11:29:07 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

11:29:07 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

11:29:07 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

11:29:07 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

11:29:07 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

11:29:07 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

11:29:07 [Information] () The response could not be cached for this request.

11:29:07 [Information] () The response could not be cached for this request.

11:29:07 [Information] () The response could not be cached for this request.

11:29:07 [Information] () Request finished in 8.8956ms 304 application/javascript

11:29:07 [Information] () Request finished in 13.387ms 304 text/css

11:29:07 [Information] () Request finished in 10.5942ms 304 application/javascript

11:29:07 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

11:29:07 [Information] () No cached response available for this request.

11:29:07 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

11:29:07 [Information] () The response has been cached.

11:29:07 [Information] () Request finished in 216.5226ms 200 application/json;charset=utf-8

11:29:08 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/attendees/a@a  

11:29:08 [Information] () No cached response available for this request.

11:29:08 [Debug] () The request path "" does not match the path filter

11:29:08 [Debug] () 1 candidate(s) found for the request path '"/api/attendees/a@a"'

11:29:08 [Debug] () Endpoint '"BackEnd.AttendeesController.Get (BackEnd)"' with route pattern '"api/Attendees/{username}"' is valid for the request path '"/api/attendees/a@a"'

11:29:08 [Debug] () Request matched endpoint '"BackEnd.AttendeesController.Get (BackEnd)"'

11:29:08 [Information] () Executing endpoint '"BackEnd.AttendeesController.Get (BackEnd)"'

11:29:08 [Information] () Route matched with "{action = \"Get\", controller = \"Attendees\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[ConferenceDTO.AttendeeResponse]] Get(System.String)" on controller "BackEnd.AttendeesController" ("BackEnd").

11:29:08 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

11:29:08 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

11:29:08 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

11:29:08 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

11:29:08 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

11:29:08 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

11:29:08 [Debug] () Attempting to bind parameter '"username"' of type '"System.String"' ...

11:29:08 [Debug] () Attempting to bind parameter '"username"' of type '"System.String"' using the name '"username"' in request data ...

11:29:08 [Debug] () Done attempting to bind parameter '"username"' of type '"System.String"'.

11:29:08 [Debug] () Done attempting to bind parameter '"username"' of type '"System.String"'.

11:29:08 [Debug] () Attempting to validate the bound parameter '"username"' of type '"System.String"' ...

11:29:08 [Debug] () Done attempting to validate the bound parameter '"username"' of type '"System.String"'.

11:29:08 [Information] () Executing action method "BackEnd.AttendeesController.Get (BackEnd)" - Validation state: Valid

11:29:08 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

11:29:08 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

11:29:08 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

11:29:08 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

11:29:08 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

11:29:08 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

11:29:08 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

11:29:09 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

11:29:09 [Debug] () Compiling query model: "
"'"(from Attendee a in 
    (from Attendee <generated>_1 in DbSet<Attendee>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"SessionAttendees.Session\")
    .Include(\"ConferenceAttendees.Conference\")
    .Include(\"AttendeeImages.Image\")
where [a].UserName == __username_0
select [a]).SingleOrDefault()"'

11:29:09 [Debug] () Including navigation: '"[a].SessionAttendees.Session"'

11:29:09 [Debug] () Including navigation: '"[a].ConferenceAttendees.Conference"'

11:29:09 [Debug] () Including navigation: '"[a].AttendeeImages.Image"'

11:29:09 [Debug] () Optimized query model: "
"'"(from Attendee a in DbSet<Attendee>
where [a].UserName == __username_0
order by EF.Property(?[a]?, \"ID\") asc
select Attendee Result(Task<Attendee> _IncludeAsync(
    queryContext: queryContext, 
    entity: [a], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Attendee entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Attendee.SessionAttendees, 
                inverseNavigation: SessionAttendee.Attendee, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Attendee>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee a.SessionAttendees in DbSet<SessionAttendee>
                    join Session s.Session in DbSet<Session>
                    on Property([a.SessionAttendees], \"SessionId\") equals Property([s.Session], \"ID\")
                    join AnonymousObject _a in 
                        (from Attendee a in DbSet<Attendee>
                        where [a].UserName == __username_0
                        order by EF.Property(?[a]?, \"ID\") asc
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[a]?, \"ID\") })).Take(1)
                    on Property([a.SessionAttendees], \"AttendeeId\") equals (Nullable<int>)object [_a].GetValue(0)
                    order by object [_a].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [a.SessionAttendees], 
                        included: new object[]{ [s.Session] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Session = (Session)included[0]
                                return bool ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Attendee p | SessionAttendee d) => p.ID == d.AttendeeId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Attendee.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Attendee, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Attendee>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee a.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Conference c.Conference in DbSet<Conference>
                    on Property([a.ConferenceAttendees], \"ConferenceId\") equals Property([c.Conference], \"ID\")
                    join AnonymousObject _a in 
                        (from Attendee a in DbSet<Attendee>
                        where [a].UserName == __username_0
                        order by EF.Property(?[a]?, \"ID\") asc
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[a]?, \"ID\") })).Take(1)
                    on Property([a.ConferenceAttendees], \"AttendeeId\") equals (Nullable<int>)object [_a].GetValue(0)
                    order by object [_a].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [a.ConferenceAttendees], 
                        included: new object[]{ [c.Conference] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Conference = (Conference)included[0]
                                return bool ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Attendee p | ConferenceAttendee d) => p.ID == d.AttendeeId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Attendee.AttendeeImages, 
                inverseNavigation: AttendeeImage.Attendee, 
                targetEntityType: EntityType: AttendeeImage, 
                clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<AttendeeImage>, AttendeeImage>, 
                inverseClrPropertySetter: ClrPropertySetter<AttendeeImage, Attendee>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<AttendeeImage>>)() => 
                    from AttendeeImage a.AttendeeImages in DbSet<AttendeeImage>
                    join Image a.Image in DbSet<Image>
                    on Property([a.AttendeeImages], \"ImageId\") equals Property([a.Image], \"ID\")
                    join AnonymousObject _a in 
                        (from Attendee a in DbSet<Attendee>
                        where [a].UserName == __username_0
                        order by EF.Property(?[a]?, \"ID\") asc
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[a]?, \"ID\") })).Take(1)
                    on Property([a.AttendeeImages], \"AttendeeId\") equals (Nullable<int>)object [_a].GetValue(0)
                    order by object [_a].GetValue(0) asc
                    select AttendeeImage _Include(
                        queryContext: queryContext, 
                        entity: [a.AttendeeImages], 
                        included: new object[]{ [a.Image] }, 
                        fixup: (QueryContext queryContext | AttendeeImage entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Image = (Image)included[0]
                                return bool ClrICollectionAccessor<Image, ICollection<AttendeeImage>, AttendeeImage>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Attendee p | AttendeeImage d) => p.ID == d.AttendeeId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))).SingleOrDefault()"'

11:29:09 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Attendee> _InterceptExceptions(
|__ source: IAsyncEnumerable<Attendee> _ToSequence(() => Task<Attendee> SingleOrDefault(
|   |__ source: IAsyncEnumerable<Attendee> _SelectAsync(
|   |   |__ source: IAsyncEnumerable<Attendee> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT TOP(2) [a].[ID], [a].[EmailAddress], [a].[FirstName], [a].[LastName], [a].[Url], [a].[UserName]
|   |   |   |       FROM [Attendees] AS [a]
|   |   |   |       WHERE [a].[UserName] = @__username_0
|   |   |   |       ORDER BY [a].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Attendee>), 
|   |   |__ selector: (Attendee a | CancellationToken ct) => Task<Attendee> _ExecuteAsync(
|   |       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Attendee> _IncludeAsync(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ entity: a, 
|   |       |   |__ included: new object[]{ }, 
|   |       |   |__ fixup: (QueryContext queryContext | Attendee entity | object[] included | CancellationToken ct) => 
|   |       |   |   {
|   |       |   |       return Task _AwaitMany(new Func<Task>[]
|   |       |   |       { 
|   |       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|   |       |   |           |__ includeId: 0, 
|   |       |   |           |__ navigation: Attendee.SessionAttendees, 
|   |       |   |           |__ inverseNavigation: SessionAttendee.Attendee, 
|   |       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|   |       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>, 
|   |       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Attendee>, 
|   |       |   |           |__ tracking: False, 
|   |       |   |           |__ instance: entity, 
|   |       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|   |       |   |           |   |__ queryContext: queryContext, 
|   |       |   |           |   |__ shaperCommandContext: SelectExpression: 
|   |       |   |           |   |       SELECT [a.SessionAttendees].[SessionId], [a.SessionAttendees].[AttendeeId], [s.Session].[ID], [s.Session].[Abstract], [s.Session].[ConferenceId], [s.Session].[EndTime], [s.Session].[StartTime], [s.Session].[Title], [s.Session].[TrackId], [s.Session].[Url]
|   |       |   |           |   |       FROM [SessionAttendee] AS [a.SessionAttendees]
|   |       |   |           |   |       INNER JOIN [Sessions] AS [s.Session] ON [a.SessionAttendees].[SessionId] = [s.Session].[ID]
|   |       |   |           |   |       INNER JOIN (
|   |       |   |           |   |           SELECT TOP(1) [a0].[ID]
|   |       |   |           |   |           FROM [Attendees] AS [a0]
|   |       |   |           |   |           WHERE [a0].[UserName] = @__username_0
|   |       |   |           |   |           ORDER BY [a0].[ID]
|   |       |   |           |   |       ) AS [t] ON [a.SessionAttendees].[AttendeeId] = [t].[ID]
|   |       |   |           |   |       ORDER BY [t].[ID], 
|   |       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Session> t0) => SessionAttendee _Include(
|   |       |   |           |       |__ queryContext: queryContext, 
|   |       |   |           |       |__ entity: t0.Outer, 
|   |       |   |           |       |__ included: new object[]{ t0.Inner }, 
|   |       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|   |       |   |           |           {
|   |       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|   |       |   |           |               {
|   |       |   |           |                   entity.Session = (Session)included[0]
|   |       |   |           |                   return bool ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>.Add(
|   |       |   |           |                       instance: included[0], 
|   |       |   |           |                       value: entity)
|   |       |   |           |               } : 
|   |       |   |           |               {
|   |       |   |           |                   return default(bool)
|   |       |   |           |               }
|   |       |   |           |           })), 
|   |       |   |           |__ joinPredicate: (Attendee p | SessionAttendee d) => p.ID == d.AttendeeId, 
|   |       |   |           |__ cancellationToken: ct), 
|   |       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|   |       |   |           |__ includeId: 1, 
|   |       |   |           |__ navigation: Attendee.ConferenceAttendees, 
|   |       |   |           |__ inverseNavigation: ConferenceAttendee.Attendee, 
|   |       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|   |       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|   |       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Attendee>, 
|   |       |   |           |__ tracking: False, 
|   |       |   |           |__ instance: entity, 
|   |       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _ShapedQuery(
|   |       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|   |       |   |           |   |__ shaperCommandContext: SelectExpression: 
|   |       |   |           |   |       SELECT [a.ConferenceAttendees].[ConferenceId], [a.ConferenceAttendees].[AttendeeId], [c.Conference].[ID], [c.Conference].[EndTime], [c.Conference].[Name], [c.Conference].[StartTime], [c.Conference].[Url]
|   |       |   |           |   |       FROM [ConferenceAttendee] AS [a.ConferenceAttendees]
|   |       |   |           |   |       INNER JOIN [Conferences] AS [c.Conference] ON [a.ConferenceAttendees].[ConferenceId] = [c.Conference].[ID]
|   |       |   |           |   |       INNER JOIN (
|   |       |   |           |   |           SELECT TOP(1) [a1].[ID]
|   |       |   |           |   |           FROM [Attendees] AS [a1]
|   |       |   |           |   |           WHERE [a1].[UserName] = @__username_0
|   |       |   |           |   |           ORDER BY [a1].[ID]
|   |       |   |           |   |       ) AS [t0] ON [a.ConferenceAttendees].[AttendeeId] = [t0].[ID]
|   |       |   |           |   |       ORDER BY [t0].[ID], 
|   |       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<ConferenceAttendee, Conference> t0) => ConferenceAttendee _Include(
|   |       |   |           |       |__ queryContext: queryContext, 
|   |       |   |           |       |__ entity: t0.Outer, 
|   |       |   |           |       |__ included: new object[]{ t0.Inner }, 
|   |       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|   |       |   |           |           {
|   |       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|   |       |   |           |               {
|   |       |   |           |                   entity.Conference = (Conference)included[0]
|   |       |   |           |                   return bool ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|   |       |   |           |                       instance: included[0], 
|   |       |   |           |                       value: entity)
|   |       |   |           |               } : 
|   |       |   |           |               {
|   |       |   |           |                   return default(bool)
|   |       |   |           |               }
|   |       |   |           |           })), 
|   |       |   |           |__ joinPredicate: (Attendee p | ConferenceAttendee d) => p.ID == d.AttendeeId, 
|   |       |   |           |__ cancellationToken: ct), 
|   |       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|   |       |   |           |__ includeId: 2, 
|   |       |   |           |__ navigation: Attendee.AttendeeImages, 
|   |       |   |           |__ inverseNavigation: AttendeeImage.Attendee, 
|   |       |   |           |__ targetEntityType: EntityType: AttendeeImage, 
|   |       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<AttendeeImage>, AttendeeImage>, 
|   |       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<AttendeeImage, Attendee>, 
|   |       |   |           |__ tracking: False, 
|   |       |   |           |__ instance: entity, 
|   |       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<AttendeeImage>>)() => IAsyncEnumerable<AttendeeImage> _ShapedQuery(
|   |       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|   |       |   |           |   |__ shaperCommandContext: SelectExpression: 
|   |       |   |           |   |       SELECT [a.AttendeeImages].[AttendeeId], [a.AttendeeImages].[ImageId], [a.Image].[ID], [a.Image].[Content], [a.Image].[ImageType], [a.Image].[Name], [a.Image].[UploadDate], [a.Image].[Url]
|   |       |   |           |   |       FROM [AttendeeImage] AS [a.AttendeeImages]
|   |       |   |           |   |       INNER JOIN [Images] AS [a.Image] ON [a.AttendeeImages].[ImageId] = [a.Image].[ID]
|   |       |   |           |   |       INNER JOIN (
|   |       |   |           |   |           SELECT TOP(1) [a2].[ID]
|   |       |   |           |   |           FROM [Attendees] AS [a2]
|   |       |   |           |   |           WHERE [a2].[UserName] = @__username_0
|   |       |   |           |   |           ORDER BY [a2].[ID]
|   |       |   |           |   |       ) AS [t1] ON [a.AttendeeImages].[AttendeeId] = [t1].[ID]
|   |       |   |           |   |       ORDER BY [t1].[ID], 
|   |       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<AttendeeImage, Image> t0) => AttendeeImage _Include(
|   |       |   |           |       |__ queryContext: queryContext, 
|   |       |   |           |       |__ entity: t0.Outer, 
|   |       |   |           |       |__ included: new object[]{ t0.Inner }, 
|   |       |   |           |       |__ fixup: (QueryContext queryContext | AttendeeImage entity | object[] included) => 
|   |       |   |           |           {
|   |       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|   |       |   |           |               {
|   |       |   |           |                   entity.Image = (Image)included[0]
|   |       |   |           |                   return bool ClrICollectionAccessor<Image, ICollection<AttendeeImage>, AttendeeImage>.Add(
|   |       |   |           |                       instance: included[0], 
|   |       |   |           |                       value: entity)
|   |       |   |           |               } : 
|   |       |   |           |               {
|   |       |   |           |                   return default(bool)
|   |       |   |           |               }
|   |       |   |           |           })), 
|   |       |   |           |__ joinPredicate: (Attendee p | AttendeeImage d) => p.ID == d.AttendeeId, 
|   |       |   |           |__ cancellationToken: ct) 
|   |       |   |       })
|   |       |   |   }, 
|   |       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|   |       |__ selector: (object[] results) => (Attendee)results[0])), 
|   |__ cancellationToken: Unhandled parameter: queryContext.CancellationToken)), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

11:29:09 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:09 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:09 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT TOP(2) [a].[ID], [a].[EmailAddress], [a].[FirstName], [a].[LastName], [a].[Url], [a].[UserName]
FROM [Attendees] AS [a]
WHERE [a].[UserName] = @__username_0
ORDER BY [a].[ID]"

11:29:09 [Information] () Executed DbCommand ("15"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT TOP(2) [a].[ID], [a].[EmailAddress], [a].[FirstName], [a].[LastName], [a].[Url], [a].[UserName]
FROM [Attendees] AS [a]
WHERE [a].[UserName] = @__username_0
ORDER BY [a].[ID]"

11:29:09 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.SessionAttendees].[SessionId], [a.SessionAttendees].[AttendeeId], [s.Session].[ID], [s.Session].[Abstract], [s.Session].[ConferenceId], [s.Session].[EndTime], [s.Session].[StartTime], [s.Session].[Title], [s.Session].[TrackId], [s.Session].[Url]
FROM [SessionAttendee] AS [a.SessionAttendees]
INNER JOIN [Sessions] AS [s.Session] ON [a.SessionAttendees].[SessionId] = [s.Session].[ID]
INNER JOIN (
    SELECT TOP(1) [a0].[ID]
    FROM [Attendees] AS [a0]
    WHERE [a0].[UserName] = @__username_0
    ORDER BY [a0].[ID]
) AS [t] ON [a.SessionAttendees].[AttendeeId] = [t].[ID]
ORDER BY [t].[ID]"

11:29:09 [Information] () Executed DbCommand ("13"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.SessionAttendees].[SessionId], [a.SessionAttendees].[AttendeeId], [s.Session].[ID], [s.Session].[Abstract], [s.Session].[ConferenceId], [s.Session].[EndTime], [s.Session].[StartTime], [s.Session].[Title], [s.Session].[TrackId], [s.Session].[Url]
FROM [SessionAttendee] AS [a.SessionAttendees]
INNER JOIN [Sessions] AS [s.Session] ON [a.SessionAttendees].[SessionId] = [s.Session].[ID]
INNER JOIN (
    SELECT TOP(1) [a0].[ID]
    FROM [Attendees] AS [a0]
    WHERE [a0].[UserName] = @__username_0
    ORDER BY [a0].[ID]
) AS [t] ON [a.SessionAttendees].[AttendeeId] = [t].[ID]
ORDER BY [t].[ID]"

11:29:09 [Debug] () A data reader was disposed.

11:29:09 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.ConferenceAttendees].[ConferenceId], [a.ConferenceAttendees].[AttendeeId], [c.Conference].[ID], [c.Conference].[EndTime], [c.Conference].[Name], [c.Conference].[StartTime], [c.Conference].[Url]
FROM [ConferenceAttendee] AS [a.ConferenceAttendees]
INNER JOIN [Conferences] AS [c.Conference] ON [a.ConferenceAttendees].[ConferenceId] = [c.Conference].[ID]
INNER JOIN (
    SELECT TOP(1) [a1].[ID]
    FROM [Attendees] AS [a1]
    WHERE [a1].[UserName] = @__username_0
    ORDER BY [a1].[ID]
) AS [t0] ON [a.ConferenceAttendees].[AttendeeId] = [t0].[ID]
ORDER BY [t0].[ID]"

11:29:09 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.ConferenceAttendees].[ConferenceId], [a.ConferenceAttendees].[AttendeeId], [c.Conference].[ID], [c.Conference].[EndTime], [c.Conference].[Name], [c.Conference].[StartTime], [c.Conference].[Url]
FROM [ConferenceAttendee] AS [a.ConferenceAttendees]
INNER JOIN [Conferences] AS [c.Conference] ON [a.ConferenceAttendees].[ConferenceId] = [c.Conference].[ID]
INNER JOIN (
    SELECT TOP(1) [a1].[ID]
    FROM [Attendees] AS [a1]
    WHERE [a1].[UserName] = @__username_0
    ORDER BY [a1].[ID]
) AS [t0] ON [a.ConferenceAttendees].[AttendeeId] = [t0].[ID]
ORDER BY [t0].[ID]"

11:29:09 [Debug] () A data reader was disposed.

11:29:09 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.AttendeeImages].[AttendeeId], [a.AttendeeImages].[ImageId], [a.Image].[ID], [a.Image].[Content], [a.Image].[ImageType], [a.Image].[Name], [a.Image].[UploadDate], [a.Image].[Url]
FROM [AttendeeImage] AS [a.AttendeeImages]
INNER JOIN [Images] AS [a.Image] ON [a.AttendeeImages].[ImageId] = [a.Image].[ID]
INNER JOIN (
    SELECT TOP(1) [a2].[ID]
    FROM [Attendees] AS [a2]
    WHERE [a2].[UserName] = @__username_0
    ORDER BY [a2].[ID]
) AS [t1] ON [a.AttendeeImages].[AttendeeId] = [t1].[ID]
ORDER BY [t1].[ID]"

11:29:09 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.AttendeeImages].[AttendeeId], [a.AttendeeImages].[ImageId], [a.Image].[ID], [a.Image].[Content], [a.Image].[ImageType], [a.Image].[Name], [a.Image].[UploadDate], [a.Image].[Url]
FROM [AttendeeImage] AS [a.AttendeeImages]
INNER JOIN [Images] AS [a.Image] ON [a.AttendeeImages].[ImageId] = [a.Image].[ID]
INNER JOIN (
    SELECT TOP(1) [a2].[ID]
    FROM [Attendees] AS [a2]
    WHERE [a2].[UserName] = @__username_0
    ORDER BY [a2].[ID]
) AS [t1] ON [a.AttendeeImages].[AttendeeId] = [t1].[ID]
ORDER BY [t1].[ID]"

11:29:09 [Debug] () A data reader was disposed.

11:29:09 [Debug] () A data reader was disposed.

11:29:09 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:09 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:09 [Information] () Executed action method "BackEnd.AttendeesController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 614.4659ms.

11:29:09 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

11:29:09 [Debug] () No information found on request to perform content negotiation.

11:29:09 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

11:29:09 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

11:29:09 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

11:29:09 [Information] () Executing ObjectResult, writing value of type '"ConferenceDTO.AttendeeResponse"'.

11:29:09 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

11:29:09 [Information] () Executed action "BackEnd.AttendeesController.Get (BackEnd)" in 779.2792ms

11:29:09 [Information] () Executed endpoint '"BackEnd.AttendeesController.Get (BackEnd)"'

11:29:09 [Information] () The response has been cached.

11:29:09 [Debug] () '"ApplicationDbContext"' disposed.

11:29:09 [Information] () Request finished in 809.9585ms 200 application/json; charset=utf-8

11:29:09 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

11:29:09 [Information] () No cached response available for this request.

11:29:09 [Debug] () The request path "" does not match the path filter

11:29:09 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

11:29:09 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

11:29:09 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

11:29:09 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

11:29:09 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

11:29:09 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

11:29:09 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

11:29:09 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

11:29:09 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

11:29:09 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

11:29:09 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

11:29:09 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

11:29:09 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

11:29:09 [Debug] () GetConferencesForFollowingFiveDays was called

11:29:09 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

11:29:09 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

11:29:09 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

11:29:09 [Debug] () Including navigation: '"[c].Sessions"'

11:29:09 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

11:29:09 [Debug] () Including navigation: '"[c].Tracks"'

11:29:09 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

11:29:09 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

11:29:09 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

11:29:09 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

11:29:09 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:09 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:09 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

11:29:09 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

11:29:09 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

11:29:09 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

11:29:09 [Debug] () A data reader was disposed.

11:29:10 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

11:29:10 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

11:29:10 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

11:29:10 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

11:29:10 [Debug] () A data reader was disposed.

11:29:10 [Debug] () A data reader was disposed.

11:29:10 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

11:29:10 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

11:29:10 [Debug] () A data reader was disposed.

11:29:10 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

11:29:10 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

11:29:10 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

11:29:10 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

11:29:10 [Debug] () A data reader was disposed.

11:29:10 [Debug] () A data reader was disposed.

11:29:10 [Debug] () A data reader was disposed.

11:29:10 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:10 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:10 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 299.19ms.

11:29:10 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

11:29:10 [Debug] () No information found on request to perform content negotiation.

11:29:10 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

11:29:10 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

11:29:10 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

11:29:10 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

11:29:10 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

11:29:10 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 315.2508ms

11:29:10 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

11:29:10 [Information] () The response has been cached.

11:29:10 [Debug] () '"ApplicationDbContext"' disposed.

11:29:10 [Information] () Request finished in 320.302ms 200 application/json; charset=utf-8

11:29:33 [Information] () Request starting HTTP/1.1 DELETE https://localhost:44354/api/conferences/1  0

11:29:33 [Debug] () The request cannot be served from cache because it uses the HTTP method: "DELETE".

11:29:33 [Debug] () "DELETE" requests are not supported

11:29:33 [Debug] () 1 candidate(s) found for the request path '"/api/conferences/1"'

11:29:33 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.DeleteConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is valid for the request path '"/api/conferences/1"'

11:29:33 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.DeleteConference (BackEnd)"'

11:29:33 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.DeleteConference (BackEnd)"'

11:29:33 [Information] () Route matched with "{action = \"DeleteConference\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[ConferenceDTO.ConferenceResponse]] DeleteConference(Int32)" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

11:29:33 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

11:29:33 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

11:29:33 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

11:29:33 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

11:29:33 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

11:29:33 [Debug] () Attempting to bind parameter '"id"' of type '"System.Int32"' ...

11:29:33 [Debug] () Attempting to bind parameter '"id"' of type '"System.Int32"' using the name '"id"' in request data ...

11:29:33 [Debug] () Done attempting to bind parameter '"id"' of type '"System.Int32"'.

11:29:33 [Debug] () Done attempting to bind parameter '"id"' of type '"System.Int32"'.

11:29:33 [Debug] () Attempting to validate the bound parameter '"id"' of type '"System.Int32"' ...

11:29:33 [Debug] () Done attempting to validate the bound parameter '"id"' of type '"System.Int32"'.

11:29:33 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.DeleteConference (BackEnd)" - Validation state: Valid

11:29:37 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

11:29:37 [Debug] () Compiling query model: "
"'"(from Conference e in DbSet<Conference>
where Property([e], \"ID\") == __get_Item_0
select [e]).FirstOrDefault()"'

11:29:37 [Debug] () Optimized query model: "
"'"(from Conference e in DbSet<Conference>
where Property([e], \"ID\") == __get_Item_0
select [e]).FirstOrDefault()"'

11:29:37 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Conference> _InterceptExceptions(
|__ source: IAsyncEnumerable<Conference> _TrackEntities(
|   |__ results: IAsyncEnumerable<Conference> _ToSequence(() => Task<Conference> FirstOrDefault(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT TOP(1) [e].[ID], [e].[EndTime], [e].[Name], [e].[StartTime], [e].[Url]
|   |   |   |       FROM [Conferences] AS [e]
|   |   |   |       WHERE [e].[ID] = @__get_Item_0, 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ cancellationToken: queryContext.CancellationToken)), 
|   |__ queryContext: queryContext, 
|   |__ entityTrackingInfos: { itemType: Conference }, 
|   |__ entityAccessors: List<Func<Conference, object>> 
|       { 
|           Func<Conference, Conference>, 
|       }), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: queryContext)"

11:29:37 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:37 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:37 [Debug] () Executing DbCommand [Parameters=["@__get_Item_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT TOP(1) [e].[ID], [e].[EndTime], [e].[Name], [e].[StartTime], [e].[Url]
FROM [Conferences] AS [e]
WHERE [e].[ID] = @__get_Item_0"

11:29:37 [Information] () Executed DbCommand ("2"ms) [Parameters=["@__get_Item_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT TOP(1) [e].[ID], [e].[EndTime], [e].[Name], [e].[StartTime], [e].[Url]
FROM [Conferences] AS [e]
WHERE [e].[ID] = @__get_Item_0"

11:29:37 [Debug] () A data reader was disposed.

11:29:37 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:37 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:37 [Debug] () Context '"ApplicationDbContext"' started tracking '"Conference"' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.

11:29:37 [Debug] () An '"Conference"' entity tracked by '"ApplicationDbContext"' changed from 'Unchanged' to 'Deleted'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.

11:29:37 [Debug] () SaveChanges starting for '"ApplicationDbContext"'.

11:29:37 [Debug] () DetectChanges starting for '"ApplicationDbContext"'.

11:29:37 [Debug] () DetectChanges completed for '"ApplicationDbContext"'.

11:29:37 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:37 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:37 [Debug] () Beginning transaction with isolation level '"ReadCommitted"'.

11:29:37 [Debug] () Executing DbCommand [Parameters=["@p0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SET NOCOUNT ON;
DELETE FROM [Conferences]
WHERE [ID] = @p0;
SELECT @@ROWCOUNT;"

11:29:37 [Information] () Executed DbCommand ("54"ms) [Parameters=["@p0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SET NOCOUNT ON;
DELETE FROM [Conferences]
WHERE [ID] = @p0;
SELECT @@ROWCOUNT;"

11:29:37 [Debug] () A data reader was disposed.

11:29:37 [Debug] () Committing transaction.

11:29:37 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:37 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:37 [Debug] () Disposing transaction.

11:29:37 [Debug] () An '"Conference"' entity tracked by '"ApplicationDbContext"' changed from 'Deleted' to 'Detached'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.

11:29:37 [Debug] () SaveChanges completed for '"ApplicationDbContext"' with 1 entities written to the database.

11:29:40 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.DeleteConference (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 7133.5134ms.

11:29:40 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

11:29:40 [Debug] () No information found on request to perform content negotiation.

11:29:40 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

11:29:40 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

11:29:40 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

11:29:40 [Information] () Executing ObjectResult, writing value of type '"ConferenceDTO.ConferenceResponse"'.

11:29:42 [Information] () Executed action "BackEnd.Controllers.ConferencesController.DeleteConference (BackEnd)" in 9640.4448ms

11:29:42 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.DeleteConference (BackEnd)"'

11:29:42 [Debug] () '"ApplicationDbContext"' disposed.

11:29:42 [Information] () Request finished in 9645.743ms 200 application/json; charset=utf-8

11:29:42 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

11:29:42 [Information] () No cached response available for this request.

11:29:42 [Debug] () The request path "" does not match the path filter

11:29:42 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

11:29:42 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

11:29:42 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

11:29:42 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

11:29:42 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

11:29:42 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

11:29:42 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

11:29:42 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

11:29:42 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

11:29:42 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

11:29:42 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

11:29:42 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

11:29:42 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

11:29:42 [Debug] () GetConferencesForFollowingFiveDays was called

11:29:42 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

11:29:42 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:42 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:42 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

11:29:42 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

11:29:42 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

11:29:42 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

11:29:42 [Debug] () A data reader was disposed.

11:29:42 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

11:29:42 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

11:29:42 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

11:29:42 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

11:29:42 [Debug] () A data reader was disposed.

11:29:42 [Debug] () A data reader was disposed.

11:29:42 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

11:29:42 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

11:29:42 [Debug] () A data reader was disposed.

11:29:42 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

11:29:42 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

11:29:42 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

11:29:42 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

11:29:42 [Debug] () A data reader was disposed.

11:29:42 [Debug] () A data reader was disposed.

11:29:42 [Debug] () A data reader was disposed.

11:29:42 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:42 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:29:42 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 37.1626ms.

11:29:42 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

11:29:42 [Debug] () No information found on request to perform content negotiation.

11:29:42 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

11:29:42 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

11:29:42 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

11:29:42 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

11:29:42 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

11:29:42 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 39.8699ms

11:29:42 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

11:29:42 [Information] () The response has been cached.

11:29:42 [Debug] () '"ApplicationDbContext"' disposed.

11:29:42 [Information] () Request finished in 41.6071ms 200 application/json; charset=utf-8

11:30:09 [Information] () Request starting HTTP/1.1 POST https://localhost:44354/api/conferences application/json; charset=utf-8 

11:30:09 [Debug] () The request cannot be served from cache because it uses the HTTP method: "POST".

11:30:09 [Debug] () "POST" requests are not supported

11:30:09 [Debug] () 1 candidate(s) found for the request path '"/api/conferences"'

11:30:09 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.CreateConference (BackEnd)"' with route pattern '"api/Conferences"' is valid for the request path '"/api/conferences"'

11:30:09 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.CreateConference (BackEnd)"'

11:30:09 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.CreateConference (BackEnd)"'

11:30:09 [Information] () Route matched with "{action = \"CreateConference\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[ConferenceDTO.ConferenceResponse]] CreateConference(ConferenceDTO.Conference)" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

11:30:09 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

11:30:09 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

11:30:09 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

11:30:09 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

11:30:09 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

11:30:09 [Debug] () Attempting to bind parameter '"input"' of type '"ConferenceDTO.Conference"' ...

11:30:09 [Debug] () Attempting to bind parameter '"input"' of type '"ConferenceDTO.Conference"' using the name '""' in request data ...

11:30:09 [Debug] () Rejected input formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonPatchInputFormatter"' for content type '"application/json; charset=utf-8"'.

11:30:09 [Debug] () Selected input formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonInputFormatter"' for content type '"application/json; charset=utf-8"'.

11:30:09 [Debug] () Done attempting to bind parameter '"input"' of type '"ConferenceDTO.Conference"'.

11:30:09 [Debug] () Done attempting to bind parameter '"input"' of type '"ConferenceDTO.Conference"'.

11:30:09 [Debug] () Attempting to validate the bound parameter '"input"' of type '"ConferenceDTO.Conference"' ...

11:30:09 [Debug] () Done attempting to validate the bound parameter '"input"' of type '"ConferenceDTO.Conference"'.

11:30:09 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.CreateConference (BackEnd)" - Validation state: Valid

11:30:09 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

11:30:09 [Debug] () '"ApplicationDbContext"' generated a temporary value for the '"ID"' property of new '"Conference"' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.

11:30:09 [Debug] () Context '"ApplicationDbContext"' started tracking '"Conference"' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.

11:30:09 [Debug] () SaveChanges starting for '"ApplicationDbContext"'.

11:30:09 [Debug] () DetectChanges starting for '"ApplicationDbContext"'.

11:30:09 [Debug] () DetectChanges completed for '"ApplicationDbContext"'.

11:30:09 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:30:09 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:30:09 [Debug] () Beginning transaction with isolation level '"ReadCommitted"'.

11:30:09 [Debug] () Executing DbCommand [Parameters=["@p0='?' (DbType = DateTimeOffset), @p1='?' (Size = 200), @p2='?' (DbType = DateTimeOffset), @p3='?' (Size = 4000)"], CommandType='Text', CommandTimeout='30']"
""SET NOCOUNT ON;
INSERT INTO [Conferences] ([EndTime], [Name], [StartTime], [Url])
VALUES (@p0, @p1, @p2, @p3);
SELECT [ID]
FROM [Conferences]
WHERE @@ROWCOUNT = 1 AND [ID] = scope_identity();"

11:30:09 [Information] () Executed DbCommand ("3"ms) [Parameters=["@p0='?' (DbType = DateTimeOffset), @p1='?' (Size = 200), @p2='?' (DbType = DateTimeOffset), @p3='?' (Size = 4000)"], CommandType='Text', CommandTimeout='30']"
""SET NOCOUNT ON;
INSERT INTO [Conferences] ([EndTime], [Name], [StartTime], [Url])
VALUES (@p0, @p1, @p2, @p3);
SELECT [ID]
FROM [Conferences]
WHERE @@ROWCOUNT = 1 AND [ID] = scope_identity();"

11:30:09 [Debug] () Foreign key property '"Conference"."ID"' detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see property values.

11:30:09 [Debug] () A data reader was disposed.

11:30:09 [Debug] () Committing transaction.

11:30:09 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:30:09 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:30:09 [Debug] () Disposing transaction.

11:30:09 [Debug] () An '"Conference"' entity tracked by '"ApplicationDbContext"' changed from 'Added' to 'Unchanged'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.

11:30:09 [Debug] () SaveChanges completed for '"ApplicationDbContext"' with 1 entities written to the database.

11:30:09 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.CreateConference (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.CreatedAtActionResult" in 42.3343ms.

11:30:09 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

11:30:09 [Debug] () No information found on request to perform content negotiation.

11:30:09 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

11:30:09 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

11:30:09 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

11:30:09 [Information] () Executing ObjectResult, writing value of type '"ConferenceDTO.ConferenceResponse"'.

11:30:09 [Debug] () Found the endpoints ["BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"] for address "Microsoft.AspNetCore.Routing.RouteValuesAddress"

11:30:09 [Debug] () Successfully processed template "api/Conferences/{id:int}" for "BackEnd.Controllers.ConferencesController.GetConference (BackEnd)" resulting in "/api/Conferences/5" and ""

11:30:09 [Debug] () Link generation succeeded for endpoints ["BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"] with result "/api/Conferences/5"

11:30:09 [Information] () Executed action "BackEnd.Controllers.ConferencesController.CreateConference (BackEnd)" in 124.4836ms

11:30:09 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.CreateConference (BackEnd)"'

11:30:09 [Debug] () '"ApplicationDbContext"' disposed.

11:30:09 [Information] () Request finished in 140.0985ms 201 application/json; charset=utf-8

11:30:09 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

11:30:09 [Information] () No cached response available for this request.

11:30:09 [Debug] () The request path "" does not match the path filter

11:30:09 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

11:30:09 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

11:30:09 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

11:30:09 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

11:30:09 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

11:30:09 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

11:30:09 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

11:30:09 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

11:30:09 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

11:30:09 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

11:30:09 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

11:30:09 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

11:30:09 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

11:30:09 [Debug] () GetConferencesForFollowingFiveDays was called

11:30:09 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

11:30:09 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:30:09 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:30:09 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

11:30:09 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

11:30:09 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

11:30:09 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

11:30:09 [Debug] () A data reader was disposed.

11:30:09 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

11:30:09 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

11:30:09 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

11:30:09 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

11:30:09 [Debug] () A data reader was disposed.

11:30:09 [Debug] () A data reader was disposed.

11:30:09 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

11:30:09 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

11:30:09 [Debug] () A data reader was disposed.

11:30:09 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

11:30:09 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

11:30:09 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

11:30:09 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

11:30:09 [Debug] () A data reader was disposed.

11:30:09 [Debug] () A data reader was disposed.

11:30:09 [Debug] () A data reader was disposed.

11:30:09 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:30:09 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:30:09 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 48.1074ms.

11:30:09 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

11:30:09 [Debug] () No information found on request to perform content negotiation.

11:30:09 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

11:30:09 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

11:30:09 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

11:30:09 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

11:30:09 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

11:30:09 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 50.8385ms

11:30:09 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

11:30:09 [Information] () The response has been cached.

11:30:09 [Debug] () '"ApplicationDbContext"' disposed.

11:30:09 [Information] () Request finished in 52.1102ms 200 application/json; charset=utf-8

11:52:08 [Information] () Hello World!

11:52:10 [Debug] () Hosting starting

11:52:10 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

11:52:10 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

11:52:10 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

11:52:10 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

11:52:10 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

11:52:10 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

11:52:10 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

11:52:10 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

11:52:10 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

11:52:10 [Debug] () Decrypting secret element using Windows DPAPI.

11:52:10 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

11:52:10 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

11:52:10 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

11:52:10 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

11:52:10 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

11:52:10 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

11:52:10 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

11:52:10 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

11:52:10 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

11:52:10 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

11:52:10 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

11:52:10 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

11:52:10 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

11:52:11 [Debug] () Hosting started

11:52:11 [Debug] () Loaded hosting startup assembly "BackEnd"

11:52:11 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

11:52:11 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

11:52:11 [Debug] () Wildcard detected, all requests with hosts will be allowed.

11:52:11 [Information] () No cached response available for this request.

11:52:11 [Debug] () The request path "" does not match the path filter

11:52:11 [Debug] () No candidates found for the request path '"/api/values"'

11:52:11 [Debug] () Request did not match any endpoints

11:52:11 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

11:52:11 [Information] () The response could not be cached for this request.

11:52:11 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

11:52:11 [Information] () No cached response available for this request.

11:52:11 [Debug] () Connection ID ""18086456105130524695"" disconnecting.

11:52:11 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

11:52:11 [Information] () The response could not be cached for this request.

11:52:11 [Debug] () Connection ID ""17942340934234538041"" disconnecting.

11:52:11 [Information] () Request finished in 219.0417ms 302 

11:52:11 [Information] () Request finished in 4.2025ms 301 

11:52:11 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

11:52:11 [Information] () No cached response available for this request.

11:52:12 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

11:52:12 [Information] () The response has been cached.

11:52:12 [Information] () Request finished in 260.2868ms 200 text/html

11:52:12 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

11:52:12 [Information] () No cached response available for this request.

11:52:12 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

11:52:12 [Information] () No cached response available for this request.

11:52:12 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

11:52:12 [Information] () No cached response available for this request.

11:52:12 [Information] () The file "/swagger-ui-bundle.js" was not modified

11:52:12 [Information] () The file "/swagger-ui.css" was not modified

11:52:12 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

11:52:12 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

11:52:12 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

11:52:12 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

11:52:12 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

11:52:12 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

11:52:12 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

11:52:12 [Information] () The response could not be cached for this request.

11:52:12 [Information] () The response could not be cached for this request.

11:52:12 [Information] () The response could not be cached for this request.

11:52:12 [Information] () Request finished in 17.1289ms 304 application/javascript

11:52:12 [Information] () Request finished in 18.2671ms 304 text/css

11:52:12 [Information] () Request finished in 7.9472ms 304 application/javascript

11:52:12 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

11:52:12 [Information] () No cached response available for this request.

11:52:12 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

11:52:12 [Information] () The response has been cached.

11:52:12 [Information] () Request finished in 300.1233ms 200 application/json;charset=utf-8

11:52:15 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

11:52:15 [Information] () No cached response available for this request.

11:52:15 [Debug] () The request path "" does not match the path filter

11:52:15 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

11:52:15 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

11:52:15 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

11:52:15 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

11:52:15 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

11:52:15 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

11:52:15 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

11:52:15 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

11:52:15 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

11:52:15 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

11:52:15 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

11:52:15 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

11:52:15 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

11:52:15 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

11:52:15 [Debug] () GetConferencesForFollowingFiveDays was called

11:52:15 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

11:52:15 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

11:52:15 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

11:52:15 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

11:52:15 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

11:52:15 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

11:52:15 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

11:52:15 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

11:52:15 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

11:52:15 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

11:52:15 [Debug] () Including navigation: '"[c].Sessions"'

11:52:15 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

11:52:15 [Debug] () Including navigation: '"[c].Tracks"'

11:52:16 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

11:52:16 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

11:52:16 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

11:52:16 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

11:52:16 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:52:16 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:52:16 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

11:52:16 [Information] () Executed DbCommand ("16"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

11:52:16 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

11:52:16 [Information] () Executed DbCommand ("12"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

11:52:16 [Debug] () A data reader was disposed.

11:52:16 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

11:52:16 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

11:52:16 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

11:52:16 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

11:52:16 [Debug] () A data reader was disposed.

11:52:16 [Debug] () A data reader was disposed.

11:52:16 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

11:52:16 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

11:52:16 [Debug] () A data reader was disposed.

11:52:16 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

11:52:16 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

11:52:16 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

11:52:16 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

11:52:16 [Debug] () A data reader was disposed.

11:52:16 [Debug] () A data reader was disposed.

11:52:16 [Debug] () A data reader was disposed.

11:52:16 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:52:16 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

11:52:16 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 785.0599ms.

11:52:16 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

11:52:16 [Debug] () No information found on request to perform content negotiation.

11:52:16 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

11:52:16 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

11:52:16 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

11:52:16 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

11:52:16 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

11:52:16 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 958.7179ms

11:52:16 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

11:52:16 [Information] () The response has been cached.

11:52:16 [Debug] () '"ApplicationDbContext"' disposed.

11:52:16 [Information] () Request finished in 982.9514ms 200 application/json; charset=utf-8

12:21:04 [Information] () Hello World!

12:21:06 [Debug] () Hosting starting

12:21:07 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:21:07 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:21:07 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:21:07 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:21:07 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:21:07 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:21:07 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:21:07 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:21:07 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:21:07 [Debug] () Decrypting secret element using Windows DPAPI.

12:21:07 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:21:07 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:21:07 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:21:07 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:21:07 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:21:07 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:21:07 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:21:07 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:21:07 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:21:07 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:21:07 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:21:07 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:21:07 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:21:07 [Debug] () Hosting started

12:21:07 [Debug] () Loaded hosting startup assembly "BackEnd"

12:21:07 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:21:08 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:21:08 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:21:08 [Information] () No cached response available for this request.

12:21:08 [Debug] () The request path "" does not match the path filter

12:21:08 [Debug] () No candidates found for the request path '"/api/values"'

12:21:08 [Debug] () Request did not match any endpoints

12:21:08 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:21:08 [Information] () The response could not be cached for this request.

12:21:08 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:21:08 [Debug] () Connection ID ""18230571314681217089"" disconnecting.

12:21:08 [Information] () No cached response available for this request.

12:21:08 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:21:08 [Information] () The response could not be cached for this request.

12:21:08 [Information] () Request finished in 171.0109ms 302 

12:21:08 [Information] () Request finished in 5.3988ms 301 

12:21:08 [Debug] () Connection ID ""18302628908719144999"" disconnecting.

12:21:08 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:21:08 [Information] () No cached response available for this request.

12:21:08 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:21:08 [Information] () The response has been cached.

12:21:08 [Information] () Request finished in 234.6294ms 200 text/html

12:21:08 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:21:08 [Information] () No cached response available for this request.

12:21:08 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:21:08 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:21:08 [Information] () No cached response available for this request.

12:21:08 [Information] () No cached response available for this request.

12:21:08 [Information] () The file "/swagger-ui.css" was not modified

12:21:08 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:21:08 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:21:08 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:21:08 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:21:08 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:21:08 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:21:08 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:21:08 [Information] () The response could not be cached for this request.

12:21:08 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:21:08 [Information] () The response could not be cached for this request.

12:21:08 [Information] () The response could not be cached for this request.

12:21:08 [Information] () Request finished in 14.261ms 304 text/css

12:21:08 [Information] () Request finished in 12.6834ms 304 application/javascript

12:21:08 [Information] () Request finished in 12.6906ms 304 application/javascript

12:21:08 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:21:08 [Information] () No cached response available for this request.

12:21:08 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:21:08 [Information] () The response has been cached.

12:21:08 [Information] () Request finished in 245.4376ms 200 application/json;charset=utf-8

12:21:09 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/attendees/a@a  

12:21:09 [Information] () No cached response available for this request.

12:21:09 [Debug] () The request path "" does not match the path filter

12:21:09 [Debug] () 1 candidate(s) found for the request path '"/api/attendees/a@a"'

12:21:09 [Debug] () Endpoint '"BackEnd.AttendeesController.Get (BackEnd)"' with route pattern '"api/Attendees/{username}"' is valid for the request path '"/api/attendees/a@a"'

12:21:09 [Debug] () Request matched endpoint '"BackEnd.AttendeesController.Get (BackEnd)"'

12:21:09 [Information] () Executing endpoint '"BackEnd.AttendeesController.Get (BackEnd)"'

12:21:09 [Information] () Route matched with "{action = \"Get\", controller = \"Attendees\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[ConferenceDTO.AttendeeResponse]] Get(System.String)" on controller "BackEnd.AttendeesController" ("BackEnd").

12:21:09 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:21:09 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:21:09 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:21:09 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:21:09 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:21:09 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:21:09 [Debug] () Attempting to bind parameter '"username"' of type '"System.String"' ...

12:21:09 [Debug] () Attempting to bind parameter '"username"' of type '"System.String"' using the name '"username"' in request data ...

12:21:09 [Debug] () Done attempting to bind parameter '"username"' of type '"System.String"'.

12:21:09 [Debug] () Done attempting to bind parameter '"username"' of type '"System.String"'.

12:21:09 [Debug] () Attempting to validate the bound parameter '"username"' of type '"System.String"' ...

12:21:09 [Debug] () Done attempting to validate the bound parameter '"username"' of type '"System.String"'.

12:21:09 [Information] () Executing action method "BackEnd.AttendeesController.Get (BackEnd)" - Validation state: Valid

12:21:10 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:21:10 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:21:10 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:21:10 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:21:10 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:21:10 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:21:10 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:21:10 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:21:10 [Debug] () Compiling query model: "
"'"(from Attendee a in 
    (from Attendee <generated>_1 in DbSet<Attendee>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"SessionAttendees.Session\")
    .Include(\"ConferenceAttendees.Conference\")
    .Include(\"AttendeeImages.Image\")
where [a].UserName == __username_0
select [a]).SingleOrDefault()"'

12:21:10 [Debug] () Including navigation: '"[a].SessionAttendees.Session"'

12:21:10 [Debug] () Including navigation: '"[a].ConferenceAttendees.Conference"'

12:21:10 [Debug] () Including navigation: '"[a].AttendeeImages.Image"'

12:21:10 [Debug] () Optimized query model: "
"'"(from Attendee a in DbSet<Attendee>
where [a].UserName == __username_0
order by EF.Property(?[a]?, \"ID\") asc
select Attendee Result(Task<Attendee> _IncludeAsync(
    queryContext: queryContext, 
    entity: [a], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Attendee entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Attendee.SessionAttendees, 
                inverseNavigation: SessionAttendee.Attendee, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Attendee>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee a.SessionAttendees in DbSet<SessionAttendee>
                    join Session s.Session in DbSet<Session>
                    on Property([a.SessionAttendees], \"SessionId\") equals Property([s.Session], \"ID\")
                    join AnonymousObject _a in 
                        (from Attendee a in DbSet<Attendee>
                        where [a].UserName == __username_0
                        order by EF.Property(?[a]?, \"ID\") asc
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[a]?, \"ID\") })).Take(1)
                    on Property([a.SessionAttendees], \"AttendeeId\") equals (Nullable<int>)object [_a].GetValue(0)
                    order by object [_a].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [a.SessionAttendees], 
                        included: new object[]{ [s.Session] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Session = (Session)included[0]
                                return bool ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Attendee p | SessionAttendee d) => p.ID == d.AttendeeId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Attendee.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Attendee, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Attendee>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee a.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Conference c.Conference in DbSet<Conference>
                    on Property([a.ConferenceAttendees], \"ConferenceId\") equals Property([c.Conference], \"ID\")
                    join AnonymousObject _a in 
                        (from Attendee a in DbSet<Attendee>
                        where [a].UserName == __username_0
                        order by EF.Property(?[a]?, \"ID\") asc
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[a]?, \"ID\") })).Take(1)
                    on Property([a.ConferenceAttendees], \"AttendeeId\") equals (Nullable<int>)object [_a].GetValue(0)
                    order by object [_a].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [a.ConferenceAttendees], 
                        included: new object[]{ [c.Conference] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Conference = (Conference)included[0]
                                return bool ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Attendee p | ConferenceAttendee d) => p.ID == d.AttendeeId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Attendee.AttendeeImages, 
                inverseNavigation: AttendeeImage.Attendee, 
                targetEntityType: EntityType: AttendeeImage, 
                clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<AttendeeImage>, AttendeeImage>, 
                inverseClrPropertySetter: ClrPropertySetter<AttendeeImage, Attendee>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<AttendeeImage>>)() => 
                    from AttendeeImage a.AttendeeImages in DbSet<AttendeeImage>
                    join Image a.Image in DbSet<Image>
                    on Property([a.AttendeeImages], \"ImageId\") equals Property([a.Image], \"ID\")
                    join AnonymousObject _a in 
                        (from Attendee a in DbSet<Attendee>
                        where [a].UserName == __username_0
                        order by EF.Property(?[a]?, \"ID\") asc
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[a]?, \"ID\") })).Take(1)
                    on Property([a.AttendeeImages], \"AttendeeId\") equals (Nullable<int>)object [_a].GetValue(0)
                    order by object [_a].GetValue(0) asc
                    select AttendeeImage _Include(
                        queryContext: queryContext, 
                        entity: [a.AttendeeImages], 
                        included: new object[]{ [a.Image] }, 
                        fixup: (QueryContext queryContext | AttendeeImage entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Image = (Image)included[0]
                                return bool ClrICollectionAccessor<Image, ICollection<AttendeeImage>, AttendeeImage>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Attendee p | AttendeeImage d) => p.ID == d.AttendeeId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))).SingleOrDefault()"'

12:21:10 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Attendee> _InterceptExceptions(
|__ source: IAsyncEnumerable<Attendee> _ToSequence(() => Task<Attendee> SingleOrDefault(
|   |__ source: IAsyncEnumerable<Attendee> _SelectAsync(
|   |   |__ source: IAsyncEnumerable<Attendee> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT TOP(2) [a].[ID], [a].[EmailAddress], [a].[FirstName], [a].[LastName], [a].[Url], [a].[UserName]
|   |   |   |       FROM [Attendees] AS [a]
|   |   |   |       WHERE [a].[UserName] = @__username_0
|   |   |   |       ORDER BY [a].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Attendee>), 
|   |   |__ selector: (Attendee a | CancellationToken ct) => Task<Attendee> _ExecuteAsync(
|   |       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Attendee> _IncludeAsync(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ entity: a, 
|   |       |   |__ included: new object[]{ }, 
|   |       |   |__ fixup: (QueryContext queryContext | Attendee entity | object[] included | CancellationToken ct) => 
|   |       |   |   {
|   |       |   |       return Task _AwaitMany(new Func<Task>[]
|   |       |   |       { 
|   |       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|   |       |   |           |__ includeId: 0, 
|   |       |   |           |__ navigation: Attendee.SessionAttendees, 
|   |       |   |           |__ inverseNavigation: SessionAttendee.Attendee, 
|   |       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|   |       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>, 
|   |       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Attendee>, 
|   |       |   |           |__ tracking: False, 
|   |       |   |           |__ instance: entity, 
|   |       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|   |       |   |           |   |__ queryContext: queryContext, 
|   |       |   |           |   |__ shaperCommandContext: SelectExpression: 
|   |       |   |           |   |       SELECT [a.SessionAttendees].[SessionId], [a.SessionAttendees].[AttendeeId], [s.Session].[ID], [s.Session].[Abstract], [s.Session].[ConferenceId], [s.Session].[EndTime], [s.Session].[StartTime], [s.Session].[Title], [s.Session].[TrackId], [s.Session].[Url]
|   |       |   |           |   |       FROM [SessionAttendee] AS [a.SessionAttendees]
|   |       |   |           |   |       INNER JOIN [Sessions] AS [s.Session] ON [a.SessionAttendees].[SessionId] = [s.Session].[ID]
|   |       |   |           |   |       INNER JOIN (
|   |       |   |           |   |           SELECT TOP(1) [a0].[ID]
|   |       |   |           |   |           FROM [Attendees] AS [a0]
|   |       |   |           |   |           WHERE [a0].[UserName] = @__username_0
|   |       |   |           |   |           ORDER BY [a0].[ID]
|   |       |   |           |   |       ) AS [t] ON [a.SessionAttendees].[AttendeeId] = [t].[ID]
|   |       |   |           |   |       ORDER BY [t].[ID], 
|   |       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Session> t0) => SessionAttendee _Include(
|   |       |   |           |       |__ queryContext: queryContext, 
|   |       |   |           |       |__ entity: t0.Outer, 
|   |       |   |           |       |__ included: new object[]{ t0.Inner }, 
|   |       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|   |       |   |           |           {
|   |       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|   |       |   |           |               {
|   |       |   |           |                   entity.Session = (Session)included[0]
|   |       |   |           |                   return bool ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>.Add(
|   |       |   |           |                       instance: included[0], 
|   |       |   |           |                       value: entity)
|   |       |   |           |               } : 
|   |       |   |           |               {
|   |       |   |           |                   return default(bool)
|   |       |   |           |               }
|   |       |   |           |           })), 
|   |       |   |           |__ joinPredicate: (Attendee p | SessionAttendee d) => p.ID == d.AttendeeId, 
|   |       |   |           |__ cancellationToken: ct), 
|   |       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|   |       |   |           |__ includeId: 1, 
|   |       |   |           |__ navigation: Attendee.ConferenceAttendees, 
|   |       |   |           |__ inverseNavigation: ConferenceAttendee.Attendee, 
|   |       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|   |       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|   |       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Attendee>, 
|   |       |   |           |__ tracking: False, 
|   |       |   |           |__ instance: entity, 
|   |       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _ShapedQuery(
|   |       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|   |       |   |           |   |__ shaperCommandContext: SelectExpression: 
|   |       |   |           |   |       SELECT [a.ConferenceAttendees].[ConferenceId], [a.ConferenceAttendees].[AttendeeId], [c.Conference].[ID], [c.Conference].[EndTime], [c.Conference].[Name], [c.Conference].[StartTime], [c.Conference].[Url]
|   |       |   |           |   |       FROM [ConferenceAttendee] AS [a.ConferenceAttendees]
|   |       |   |           |   |       INNER JOIN [Conferences] AS [c.Conference] ON [a.ConferenceAttendees].[ConferenceId] = [c.Conference].[ID]
|   |       |   |           |   |       INNER JOIN (
|   |       |   |           |   |           SELECT TOP(1) [a1].[ID]
|   |       |   |           |   |           FROM [Attendees] AS [a1]
|   |       |   |           |   |           WHERE [a1].[UserName] = @__username_0
|   |       |   |           |   |           ORDER BY [a1].[ID]
|   |       |   |           |   |       ) AS [t0] ON [a.ConferenceAttendees].[AttendeeId] = [t0].[ID]
|   |       |   |           |   |       ORDER BY [t0].[ID], 
|   |       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<ConferenceAttendee, Conference> t0) => ConferenceAttendee _Include(
|   |       |   |           |       |__ queryContext: queryContext, 
|   |       |   |           |       |__ entity: t0.Outer, 
|   |       |   |           |       |__ included: new object[]{ t0.Inner }, 
|   |       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|   |       |   |           |           {
|   |       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|   |       |   |           |               {
|   |       |   |           |                   entity.Conference = (Conference)included[0]
|   |       |   |           |                   return bool ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|   |       |   |           |                       instance: included[0], 
|   |       |   |           |                       value: entity)
|   |       |   |           |               } : 
|   |       |   |           |               {
|   |       |   |           |                   return default(bool)
|   |       |   |           |               }
|   |       |   |           |           })), 
|   |       |   |           |__ joinPredicate: (Attendee p | ConferenceAttendee d) => p.ID == d.AttendeeId, 
|   |       |   |           |__ cancellationToken: ct), 
|   |       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|   |       |   |           |__ includeId: 2, 
|   |       |   |           |__ navigation: Attendee.AttendeeImages, 
|   |       |   |           |__ inverseNavigation: AttendeeImage.Attendee, 
|   |       |   |           |__ targetEntityType: EntityType: AttendeeImage, 
|   |       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<AttendeeImage>, AttendeeImage>, 
|   |       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<AttendeeImage, Attendee>, 
|   |       |   |           |__ tracking: False, 
|   |       |   |           |__ instance: entity, 
|   |       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<AttendeeImage>>)() => IAsyncEnumerable<AttendeeImage> _ShapedQuery(
|   |       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|   |       |   |           |   |__ shaperCommandContext: SelectExpression: 
|   |       |   |           |   |       SELECT [a.AttendeeImages].[AttendeeId], [a.AttendeeImages].[ImageId], [a.Image].[ID], [a.Image].[Content], [a.Image].[ImageType], [a.Image].[Name], [a.Image].[UploadDate], [a.Image].[Url]
|   |       |   |           |   |       FROM [AttendeeImage] AS [a.AttendeeImages]
|   |       |   |           |   |       INNER JOIN [Images] AS [a.Image] ON [a.AttendeeImages].[ImageId] = [a.Image].[ID]
|   |       |   |           |   |       INNER JOIN (
|   |       |   |           |   |           SELECT TOP(1) [a2].[ID]
|   |       |   |           |   |           FROM [Attendees] AS [a2]
|   |       |   |           |   |           WHERE [a2].[UserName] = @__username_0
|   |       |   |           |   |           ORDER BY [a2].[ID]
|   |       |   |           |   |       ) AS [t1] ON [a.AttendeeImages].[AttendeeId] = [t1].[ID]
|   |       |   |           |   |       ORDER BY [t1].[ID], 
|   |       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<AttendeeImage, Image> t0) => AttendeeImage _Include(
|   |       |   |           |       |__ queryContext: queryContext, 
|   |       |   |           |       |__ entity: t0.Outer, 
|   |       |   |           |       |__ included: new object[]{ t0.Inner }, 
|   |       |   |           |       |__ fixup: (QueryContext queryContext | AttendeeImage entity | object[] included) => 
|   |       |   |           |           {
|   |       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|   |       |   |           |               {
|   |       |   |           |                   entity.Image = (Image)included[0]
|   |       |   |           |                   return bool ClrICollectionAccessor<Image, ICollection<AttendeeImage>, AttendeeImage>.Add(
|   |       |   |           |                       instance: included[0], 
|   |       |   |           |                       value: entity)
|   |       |   |           |               } : 
|   |       |   |           |               {
|   |       |   |           |                   return default(bool)
|   |       |   |           |               }
|   |       |   |           |           })), 
|   |       |   |           |__ joinPredicate: (Attendee p | AttendeeImage d) => p.ID == d.AttendeeId, 
|   |       |   |           |__ cancellationToken: ct) 
|   |       |   |       })
|   |       |   |   }, 
|   |       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|   |       |__ selector: (object[] results) => (Attendee)results[0])), 
|   |__ cancellationToken: Unhandled parameter: queryContext.CancellationToken)), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:21:10 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:10 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:10 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT TOP(2) [a].[ID], [a].[EmailAddress], [a].[FirstName], [a].[LastName], [a].[Url], [a].[UserName]
FROM [Attendees] AS [a]
WHERE [a].[UserName] = @__username_0
ORDER BY [a].[ID]"

12:21:10 [Information] () Executed DbCommand ("19"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT TOP(2) [a].[ID], [a].[EmailAddress], [a].[FirstName], [a].[LastName], [a].[Url], [a].[UserName]
FROM [Attendees] AS [a]
WHERE [a].[UserName] = @__username_0
ORDER BY [a].[ID]"

12:21:10 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.SessionAttendees].[SessionId], [a.SessionAttendees].[AttendeeId], [s.Session].[ID], [s.Session].[Abstract], [s.Session].[ConferenceId], [s.Session].[EndTime], [s.Session].[StartTime], [s.Session].[Title], [s.Session].[TrackId], [s.Session].[Url]
FROM [SessionAttendee] AS [a.SessionAttendees]
INNER JOIN [Sessions] AS [s.Session] ON [a.SessionAttendees].[SessionId] = [s.Session].[ID]
INNER JOIN (
    SELECT TOP(1) [a0].[ID]
    FROM [Attendees] AS [a0]
    WHERE [a0].[UserName] = @__username_0
    ORDER BY [a0].[ID]
) AS [t] ON [a.SessionAttendees].[AttendeeId] = [t].[ID]
ORDER BY [t].[ID]"

12:21:10 [Information] () Executed DbCommand ("12"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.SessionAttendees].[SessionId], [a.SessionAttendees].[AttendeeId], [s.Session].[ID], [s.Session].[Abstract], [s.Session].[ConferenceId], [s.Session].[EndTime], [s.Session].[StartTime], [s.Session].[Title], [s.Session].[TrackId], [s.Session].[Url]
FROM [SessionAttendee] AS [a.SessionAttendees]
INNER JOIN [Sessions] AS [s.Session] ON [a.SessionAttendees].[SessionId] = [s.Session].[ID]
INNER JOIN (
    SELECT TOP(1) [a0].[ID]
    FROM [Attendees] AS [a0]
    WHERE [a0].[UserName] = @__username_0
    ORDER BY [a0].[ID]
) AS [t] ON [a.SessionAttendees].[AttendeeId] = [t].[ID]
ORDER BY [t].[ID]"

12:21:10 [Debug] () A data reader was disposed.

12:21:10 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.ConferenceAttendees].[ConferenceId], [a.ConferenceAttendees].[AttendeeId], [c.Conference].[ID], [c.Conference].[EndTime], [c.Conference].[Name], [c.Conference].[StartTime], [c.Conference].[Url]
FROM [ConferenceAttendee] AS [a.ConferenceAttendees]
INNER JOIN [Conferences] AS [c.Conference] ON [a.ConferenceAttendees].[ConferenceId] = [c.Conference].[ID]
INNER JOIN (
    SELECT TOP(1) [a1].[ID]
    FROM [Attendees] AS [a1]
    WHERE [a1].[UserName] = @__username_0
    ORDER BY [a1].[ID]
) AS [t0] ON [a.ConferenceAttendees].[AttendeeId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:21:10 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.ConferenceAttendees].[ConferenceId], [a.ConferenceAttendees].[AttendeeId], [c.Conference].[ID], [c.Conference].[EndTime], [c.Conference].[Name], [c.Conference].[StartTime], [c.Conference].[Url]
FROM [ConferenceAttendee] AS [a.ConferenceAttendees]
INNER JOIN [Conferences] AS [c.Conference] ON [a.ConferenceAttendees].[ConferenceId] = [c.Conference].[ID]
INNER JOIN (
    SELECT TOP(1) [a1].[ID]
    FROM [Attendees] AS [a1]
    WHERE [a1].[UserName] = @__username_0
    ORDER BY [a1].[ID]
) AS [t0] ON [a.ConferenceAttendees].[AttendeeId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:21:10 [Debug] () A data reader was disposed.

12:21:10 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.AttendeeImages].[AttendeeId], [a.AttendeeImages].[ImageId], [a.Image].[ID], [a.Image].[Content], [a.Image].[ImageType], [a.Image].[Name], [a.Image].[UploadDate], [a.Image].[Url]
FROM [AttendeeImage] AS [a.AttendeeImages]
INNER JOIN [Images] AS [a.Image] ON [a.AttendeeImages].[ImageId] = [a.Image].[ID]
INNER JOIN (
    SELECT TOP(1) [a2].[ID]
    FROM [Attendees] AS [a2]
    WHERE [a2].[UserName] = @__username_0
    ORDER BY [a2].[ID]
) AS [t1] ON [a.AttendeeImages].[AttendeeId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:21:10 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.AttendeeImages].[AttendeeId], [a.AttendeeImages].[ImageId], [a.Image].[ID], [a.Image].[Content], [a.Image].[ImageType], [a.Image].[Name], [a.Image].[UploadDate], [a.Image].[Url]
FROM [AttendeeImage] AS [a.AttendeeImages]
INNER JOIN [Images] AS [a.Image] ON [a.AttendeeImages].[ImageId] = [a.Image].[ID]
INNER JOIN (
    SELECT TOP(1) [a2].[ID]
    FROM [Attendees] AS [a2]
    WHERE [a2].[UserName] = @__username_0
    ORDER BY [a2].[ID]
) AS [t1] ON [a.AttendeeImages].[AttendeeId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:21:10 [Debug] () A data reader was disposed.

12:21:10 [Debug] () A data reader was disposed.

12:21:10 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:10 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:10 [Information] () Executed action method "BackEnd.AttendeesController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 653.2916ms.

12:21:10 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:21:10 [Debug] () No information found on request to perform content negotiation.

12:21:10 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:21:10 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:21:10 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:21:10 [Information] () Executing ObjectResult, writing value of type '"ConferenceDTO.AttendeeResponse"'.

12:21:10 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:21:10 [Information] () Executed action "BackEnd.AttendeesController.Get (BackEnd)" in 838.7748ms

12:21:10 [Information] () Executed endpoint '"BackEnd.AttendeesController.Get (BackEnd)"'

12:21:10 [Information] () The response has been cached.

12:21:10 [Debug] () '"ApplicationDbContext"' disposed.

12:21:10 [Information] () Request finished in 873.1807ms 200 application/json; charset=utf-8

12:21:11 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:21:11 [Information] () No cached response available for this request.

12:21:11 [Debug] () The request path "" does not match the path filter

12:21:11 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:21:11 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:21:11 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:21:11 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:21:11 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:21:11 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:21:11 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:21:11 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:21:11 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:21:11 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:21:11 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:21:11 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:21:11 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:21:11 [Debug] () GetConferencesForFollowingFiveDays was called

12:21:11 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:21:11 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:21:11 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:21:11 [Debug] () Including navigation: '"[c].Sessions"'

12:21:11 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:21:11 [Debug] () Including navigation: '"[c].Tracks"'

12:21:11 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:21:11 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:21:11 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:21:11 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:21:11 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:11 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:11 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:21:11 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:21:11 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:21:11 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:21:11 [Debug] () A data reader was disposed.

12:21:11 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:21:11 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:21:11 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:21:11 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:21:11 [Debug] () A data reader was disposed.

12:21:11 [Debug] () A data reader was disposed.

12:21:11 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:21:11 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:21:11 [Debug] () A data reader was disposed.

12:21:11 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:21:11 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:21:11 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:21:11 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:21:11 [Debug] () A data reader was disposed.

12:21:11 [Debug] () A data reader was disposed.

12:21:11 [Debug] () A data reader was disposed.

12:21:11 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:11 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:11 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 287.0736ms.

12:21:11 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:21:11 [Debug] () No information found on request to perform content negotiation.

12:21:11 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:21:11 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:21:11 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:21:11 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:21:11 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:21:11 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 306.7725ms

12:21:11 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:21:11 [Information] () The response has been cached.

12:21:11 [Debug] () '"ApplicationDbContext"' disposed.

12:21:11 [Information] () Request finished in 312.667ms 200 application/json; charset=utf-8

12:21:15 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:21:15 [Information] () Serving response from cache.

12:21:15 [Information] () Request finished in 23.8223ms 200 application/json; charset=utf-8

12:21:15 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:21:15 [Information] () No cached response available for this request.

12:21:15 [Debug] () The request path "" does not match the path filter

12:21:15 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:21:15 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:21:15 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:21:15 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:21:15 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:21:15 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:21:15 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:21:15 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:21:15 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:21:15 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:21:15 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:21:15 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:21:15 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:21:15 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:21:15 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:21:15 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:21:15 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:21:15 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:15 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:15 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:15 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:21:15 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:15 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:21:15 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:15 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:15 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:15 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:21:15 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:15 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:21:15 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:21:15 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:21:15 [Debug] () Including navigation: '"[s].Track"'

12:21:15 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:21:15 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:21:15 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:21:15 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:21:15 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:21:15 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:15 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:15 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:21:15 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:21:15 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:21:15 [Information] () Executed DbCommand ("22"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:21:16 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:21:16 [Information] () Executed DbCommand ("6"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:21:16 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:21:16 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:21:16 [Debug] () A data reader was disposed.

12:21:16 [Debug] () A data reader was disposed.

12:21:16 [Debug] () A data reader was disposed.

12:21:16 [Debug] () A data reader was disposed.

12:21:16 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:16 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:16 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 203.6252ms.

12:21:16 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:21:16 [Debug] () No information found on request to perform content negotiation.

12:21:16 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:21:16 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:21:16 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:21:16 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:21:16 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:21:16 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 220.2508ms

12:21:16 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:21:16 [Information] () The response has been cached.

12:21:16 [Debug] () '"ApplicationDbContext"' disposed.

12:21:16 [Information] () Request finished in 225.3212ms 200 application/json; charset=utf-8

12:21:41 [Information] () Hello World!

12:21:44 [Debug] () Hosting starting

12:21:44 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:21:44 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:21:44 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:21:44 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:21:44 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:21:44 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:21:44 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:21:44 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:21:44 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:21:44 [Debug] () Decrypting secret element using Windows DPAPI.

12:21:44 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:21:44 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:21:44 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:21:44 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:21:44 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:21:44 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:21:44 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:21:44 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:21:44 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:21:44 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:21:44 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:21:44 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:21:44 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:21:45 [Debug] () Hosting started

12:21:45 [Debug] () Loaded hosting startup assembly "BackEnd"

12:21:45 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:21:45 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:21:45 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:21:45 [Information] () No cached response available for this request.

12:21:45 [Debug] () The request path "" does not match the path filter

12:21:45 [Debug] () No candidates found for the request path '"/api/values"'

12:21:45 [Debug] () Request did not match any endpoints

12:21:45 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:21:45 [Information] () The response could not be cached for this request.

12:21:45 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:21:45 [Information] () No cached response available for this request.

12:21:45 [Debug] () Connection ID ""18158513703463419957"" disconnecting.

12:21:45 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:21:45 [Information] () The response could not be cached for this request.

12:21:45 [Debug] () Connection ID ""18374686498462105676"" disconnecting.

12:21:45 [Information] () Request finished in 232.4041ms 302 

12:21:45 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:21:45 [Information] () No cached response available for this request.

12:21:45 [Information] () Request finished in 34.835ms 301 

12:21:45 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:21:45 [Information] () The response has been cached.

12:21:45 [Information] () Request finished in 251.5701ms 200 text/html

12:21:46 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:21:46 [Information] () No cached response available for this request.

12:21:46 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:21:46 [Information] () No cached response available for this request.

12:21:46 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:21:46 [Information] () No cached response available for this request.

12:21:46 [Information] () The file "/swagger-ui.css" was not modified

12:21:46 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:21:46 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:21:46 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:21:46 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:21:46 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:21:46 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:21:46 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:21:46 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:21:46 [Information] () The response could not be cached for this request.

12:21:46 [Information] () The response could not be cached for this request.

12:21:46 [Information] () The response could not be cached for this request.

12:21:46 [Information] () Request finished in 21.1007ms 304 application/javascript

12:21:46 [Information] () Request finished in 10.431ms 304 text/css

12:21:46 [Information] () Request finished in 20.811ms 304 application/javascript

12:21:46 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:21:46 [Information] () No cached response available for this request.

12:21:46 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:21:46 [Information] () The response has been cached.

12:21:46 [Information] () Request finished in 211.3633ms 200 application/json;charset=utf-8

12:21:46 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:21:46 [Information] () No cached response available for this request.

12:21:46 [Debug] () The request path "" does not match the path filter

12:21:46 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:21:46 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:21:46 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:21:46 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:21:46 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:21:46 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:21:46 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:21:46 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:21:46 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:21:46 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:21:46 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:21:46 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:21:47 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:21:47 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:21:47 [Debug] () GetConferencesForFollowingFiveDays was called

12:21:47 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:21:47 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:21:47 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:21:47 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:21:47 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:21:47 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:21:47 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:21:47 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:21:47 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:21:47 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:21:47 [Debug] () Including navigation: '"[c].Sessions"'

12:21:47 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:21:47 [Debug] () Including navigation: '"[c].Tracks"'

12:21:47 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:21:47 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:21:47 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:21:47 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:21:47 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:47 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:47 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:21:47 [Information] () Executed DbCommand ("14"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:21:47 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:21:47 [Information] () Executed DbCommand ("11"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:21:47 [Debug] () A data reader was disposed.

12:21:47 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:21:47 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:21:47 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:21:47 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:21:47 [Debug] () A data reader was disposed.

12:21:47 [Debug] () A data reader was disposed.

12:21:47 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:21:47 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:21:47 [Debug] () A data reader was disposed.

12:21:47 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:21:47 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:21:47 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:21:47 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:21:47 [Debug] () A data reader was disposed.

12:21:47 [Debug] () A data reader was disposed.

12:21:47 [Debug] () A data reader was disposed.

12:21:47 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:47 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:47 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 750.189ms.

12:21:47 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:21:47 [Debug] () No information found on request to perform content negotiation.

12:21:47 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:21:47 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:21:47 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:21:47 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:21:47 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:21:47 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 926.9304ms

12:21:47 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:21:47 [Information] () The response has been cached.

12:21:47 [Debug] () '"ApplicationDbContext"' disposed.

12:21:47 [Information] () Request finished in 951.514ms 200 application/json; charset=utf-8

12:21:49 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:21:49 [Information] () Serving response from cache.

12:21:49 [Information] () Request finished in 17.5356ms 200 application/json; charset=utf-8

12:21:49 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:21:49 [Information] () No cached response available for this request.

12:21:49 [Debug] () The request path "" does not match the path filter

12:21:49 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:21:49 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:21:49 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:21:49 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:21:49 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:21:49 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:21:49 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:21:49 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:21:49 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:21:49 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:21:49 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:21:49 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:21:49 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:21:49 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:21:49 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:21:49 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:21:49 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:21:49 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:49 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:49 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:49 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:21:49 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:49 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:21:49 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:49 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:49 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:49 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:21:49 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:21:49 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:21:49 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:21:49 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:21:49 [Debug] () Including navigation: '"[s].Track"'

12:21:49 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:21:49 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:21:49 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:21:49 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:21:49 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:21:49 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:49 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:49 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:21:49 [Information] () Executed DbCommand ("5"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:21:49 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:21:49 [Information] () Executed DbCommand ("12"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:21:49 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:21:49 [Information] () Executed DbCommand ("5"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:21:49 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:21:49 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:21:49 [Debug] () A data reader was disposed.

12:21:49 [Debug] () A data reader was disposed.

12:21:49 [Debug] () A data reader was disposed.

12:21:49 [Debug] () A data reader was disposed.

12:21:49 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:49 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:21:49 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 202.2787ms.

12:21:49 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:21:49 [Debug] () No information found on request to perform content negotiation.

12:21:49 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:21:49 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:21:49 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:21:49 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:21:49 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:21:50 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 228.1981ms

12:21:50 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:21:50 [Information] () The response has been cached.

12:21:50 [Debug] () '"ApplicationDbContext"' disposed.

12:21:50 [Information] () Request finished in 240.3655ms 200 application/json; charset=utf-8

12:24:20 [Information] () Hello World!

12:24:22 [Debug] () Hosting starting

12:24:22 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:24:22 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:24:22 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:24:22 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:24:22 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:24:22 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:24:22 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:24:22 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:24:22 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:24:22 [Debug] () Decrypting secret element using Windows DPAPI.

12:24:22 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:24:22 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:24:22 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:24:22 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:24:22 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:24:22 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:24:22 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:24:23 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:24:23 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:24:23 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:24:23 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:24:23 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:24:23 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:24:23 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:24:23 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:24:23 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:24:23 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:24:23 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:24:23 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:24:23 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:24:23 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:24:23 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:24:23 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:24:23 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:24:23 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:24:23 [Debug] () Hosting started

12:24:23 [Debug] () Loaded hosting startup assembly "BackEnd"

12:24:23 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:24:23 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:24:23 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:24:23 [Information] () No cached response available for this request.

12:24:23 [Debug] () The request path "" does not match the path filter

12:24:23 [Debug] () No candidates found for the request path '"/api/values"'

12:24:23 [Debug] () Request did not match any endpoints

12:24:23 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:24:23 [Information] () The response could not be cached for this request.

12:24:23 [Debug] () Connection ID ""18374686498462105682"" disconnecting.

12:24:23 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:24:23 [Information] () No cached response available for this request.

12:24:23 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:24:23 [Information] () The response could not be cached for this request.

12:24:23 [Debug] () Connection ID ""17942340934234538045"" disconnecting.

12:24:23 [Information] () Request finished in 243.8775ms 302 

12:24:23 [Information] () Request finished in 4.9096ms 301 

12:24:24 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:24:24 [Information] () No cached response available for this request.

12:24:24 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:24:24 [Information] () The response has been cached.

12:24:24 [Information] () Request finished in 206.6497ms 200 text/html

12:24:24 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:24:24 [Information] () No cached response available for this request.

12:24:24 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:24:24 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:24:24 [Information] () No cached response available for this request.

12:24:24 [Information] () No cached response available for this request.

12:24:24 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:24:24 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:24:24 [Information] () The file "/swagger-ui.css" was not modified

12:24:24 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:24:24 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:24:24 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:24:24 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:24:24 [Information] () The response could not be cached for this request.

12:24:24 [Information] () The response could not be cached for this request.

12:24:24 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:24:24 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:24:24 [Information] () The response could not be cached for this request.

12:24:24 [Information] () Request finished in 11.0723ms 304 application/javascript

12:24:24 [Information] () Request finished in 12.6202ms 304 text/css

12:24:24 [Information] () Request finished in 11.2889ms 304 application/javascript

12:24:24 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:24:24 [Information] () No cached response available for this request.

12:24:24 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:24:24 [Information] () The response has been cached.

12:24:24 [Information] () Request finished in 304.0207ms 200 application/json;charset=utf-8

12:24:25 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:24:25 [Information] () No cached response available for this request.

12:24:25 [Debug] () The request path "" does not match the path filter

12:24:25 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:24:25 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:24:25 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:24:25 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:24:25 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:24:25 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:24:26 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:24:26 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:24:26 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:24:26 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:24:26 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:24:26 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:24:26 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:24:26 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:24:26 [Debug] () GetConferencesForFollowingFiveDays was called

12:24:26 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:24:26 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:24:26 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:24:26 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:24:26 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:24:26 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:24:26 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:24:26 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:24:26 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:24:26 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:24:26 [Debug] () Including navigation: '"[c].Sessions"'

12:24:26 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:24:26 [Debug] () Including navigation: '"[c].Tracks"'

12:24:26 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:24:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:24:26 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:24:26 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:24:26 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:24:26 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:24:26 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:24:26 [Information] () Executed DbCommand ("15"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:24:26 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:24:26 [Information] () Executed DbCommand ("13"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:24:26 [Debug] () A data reader was disposed.

12:24:26 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:24:26 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:24:26 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:24:26 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:24:26 [Debug] () A data reader was disposed.

12:24:26 [Debug] () A data reader was disposed.

12:24:26 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:24:26 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:24:26 [Debug] () A data reader was disposed.

12:24:26 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:24:26 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:24:26 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:24:26 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:24:26 [Debug] () A data reader was disposed.

12:24:26 [Debug] () A data reader was disposed.

12:24:26 [Debug] () A data reader was disposed.

12:24:26 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:24:26 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:24:26 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 817.2635ms.

12:24:26 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:24:26 [Debug] () No information found on request to perform content negotiation.

12:24:26 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:24:26 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:24:26 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:24:26 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:24:26 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:24:26 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 984.592ms

12:24:26 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:24:26 [Information] () The response has been cached.

12:24:27 [Debug] () '"ApplicationDbContext"' disposed.

12:24:27 [Information] () Request finished in 1011.9629ms 200 application/json; charset=utf-8

12:24:28 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:24:28 [Information] () Serving response from cache.

12:24:28 [Information] () Request finished in 24.4748ms 200 application/json; charset=utf-8

12:24:28 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:24:28 [Information] () No cached response available for this request.

12:24:28 [Debug] () The request path "" does not match the path filter

12:24:28 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:24:28 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:24:28 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:24:28 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:24:28 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:24:28 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:24:28 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:24:28 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:24:28 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:24:28 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:24:28 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:24:28 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:24:28 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:24:28 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:24:28 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:24:28 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:24:28 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:24:28 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:24:28 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:24:28 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:24:28 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:24:28 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:24:28 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:24:28 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:24:28 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:24:28 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:24:28 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:24:28 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:24:28 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:24:28 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:24:28 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:24:28 [Debug] () Including navigation: '"[s].Track"'

12:24:28 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:24:28 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:24:28 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:24:28 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:24:28 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:24:28 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:24:28 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:24:28 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:24:28 [Information] () Executed DbCommand ("5"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:24:28 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:24:28 [Information] () Executed DbCommand ("12"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:24:28 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:24:28 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:24:28 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:24:28 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:24:28 [Debug] () A data reader was disposed.

12:24:28 [Debug] () A data reader was disposed.

12:24:28 [Debug] () A data reader was disposed.

12:24:28 [Debug] () A data reader was disposed.

12:24:28 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:24:28 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:24:28 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 202.4742ms.

12:24:28 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:24:28 [Debug] () No information found on request to perform content negotiation.

12:24:28 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:24:28 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:24:28 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:24:28 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:24:28 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:24:28 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 228.367ms

12:24:28 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:24:28 [Information] () The response has been cached.

12:24:28 [Debug] () '"ApplicationDbContext"' disposed.

12:24:28 [Information] () Request finished in 241.6639ms 200 application/json; charset=utf-8

12:26:14 [Information] () Hello World!

12:26:16 [Debug] () Hosting starting

12:26:16 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:26:16 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:26:16 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:26:16 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:26:16 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:26:16 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:26:16 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:26:16 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:26:17 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:26:17 [Debug] () Decrypting secret element using Windows DPAPI.

12:26:17 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:26:17 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:26:17 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:26:17 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:26:17 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:26:17 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:26:17 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:26:17 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:26:17 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:26:17 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:26:17 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:26:17 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:26:17 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:26:17 [Debug] () Hosting started

12:26:17 [Debug] () Loaded hosting startup assembly "BackEnd"

12:26:17 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:26:17 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:26:17 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:26:17 [Information] () No cached response available for this request.

12:26:17 [Debug] () The request path "" does not match the path filter

12:26:18 [Debug] () No candidates found for the request path '"/api/values"'

12:26:18 [Debug] () Request did not match any endpoints

12:26:18 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:26:18 [Information] () The response could not be cached for this request.

12:26:18 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:26:18 [Information] () No cached response available for this request.

12:26:18 [Debug] () Connection ID ""18158513703463419959"" disconnecting.

12:26:18 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:26:18 [Information] () The response could not be cached for this request.

12:26:18 [Debug] () Connection ID ""18374686498462105686"" disconnecting.

12:26:18 [Information] () Request finished in 192.1991ms 302 

12:26:18 [Information] () Request finished in 3.7363ms 301 

12:26:18 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:26:18 [Information] () No cached response available for this request.

12:26:18 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:26:18 [Information] () The response has been cached.

12:26:18 [Information] () Request finished in 191.6051ms 200 text/html

12:26:18 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:26:18 [Information] () No cached response available for this request.

12:26:18 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:26:18 [Information] () No cached response available for this request.

12:26:18 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:26:18 [Information] () No cached response available for this request.

12:26:18 [Information] () The file "/swagger-ui.css" was not modified

12:26:18 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:26:18 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:26:18 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:26:18 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:26:18 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:26:18 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:26:18 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:26:18 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:26:18 [Information] () The response could not be cached for this request.

12:26:18 [Information] () The response could not be cached for this request.

12:26:18 [Information] () The response could not be cached for this request.

12:26:18 [Information] () Request finished in 11.1486ms 304 text/css

12:26:18 [Information] () Request finished in 9.6174ms 304 application/javascript

12:26:18 [Information] () Request finished in 11.297ms 304 application/javascript

12:26:18 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:26:18 [Information] () No cached response available for this request.

12:26:18 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:26:18 [Information] () The response has been cached.

12:26:18 [Information] () Request finished in 262.1959ms 200 application/json;charset=utf-8

12:26:19 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:26:19 [Information] () No cached response available for this request.

12:26:19 [Debug] () The request path "" does not match the path filter

12:26:19 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:26:19 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:26:19 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:26:19 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:26:19 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:26:19 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:26:19 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:26:19 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:26:19 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:26:19 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:26:19 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:26:19 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:26:19 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:26:19 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:26:19 [Debug] () GetConferencesForFollowingFiveDays was called

12:26:19 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:26:19 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:26:19 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:26:19 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:26:19 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:26:19 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:26:19 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:26:19 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:26:19 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:26:19 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:26:19 [Debug] () Including navigation: '"[c].Sessions"'

12:26:19 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:26:19 [Debug] () Including navigation: '"[c].Tracks"'

12:26:19 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:26:19 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:26:19 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:26:19 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:26:19 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:26:19 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:26:19 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:26:19 [Information] () Executed DbCommand ("14"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:26:19 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:26:19 [Information] () Executed DbCommand ("11"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:26:19 [Debug] () A data reader was disposed.

12:26:19 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:26:19 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:26:20 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:26:20 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:26:20 [Debug] () A data reader was disposed.

12:26:20 [Debug] () A data reader was disposed.

12:26:20 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:26:20 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:26:20 [Debug] () A data reader was disposed.

12:26:20 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:26:20 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:26:20 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:26:20 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:26:20 [Debug] () A data reader was disposed.

12:26:20 [Debug] () A data reader was disposed.

12:26:20 [Debug] () A data reader was disposed.

12:26:20 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:26:20 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:26:20 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 728.3011ms.

12:26:20 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:26:20 [Debug] () No information found on request to perform content negotiation.

12:26:20 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:26:20 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:26:20 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:26:20 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:26:20 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:26:20 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 902.4129ms

12:26:20 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:26:20 [Information] () The response has been cached.

12:26:20 [Debug] () '"ApplicationDbContext"' disposed.

12:26:20 [Information] () Request finished in 928.2174ms 200 application/json; charset=utf-8

12:26:22 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:26:22 [Information] () Serving response from cache.

12:26:22 [Information] () Request finished in 26.2495ms 200 application/json; charset=utf-8

12:26:22 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:26:22 [Information] () No cached response available for this request.

12:26:22 [Debug] () The request path "" does not match the path filter

12:26:22 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:26:22 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:26:22 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:26:22 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:26:22 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:26:22 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:26:22 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:26:22 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:26:22 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:26:22 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:26:22 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:26:22 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:26:22 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:26:22 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:26:22 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:26:22 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:26:22 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:26:22 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:26:22 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:26:22 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:26:22 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:26:22 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:26:22 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:26:22 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:26:22 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:26:22 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:26:22 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:26:22 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:26:22 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:26:22 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:26:22 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:26:22 [Debug] () Including navigation: '"[s].Track"'

12:26:22 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:26:22 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:26:22 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:26:22 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:26:22 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:26:22 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:26:22 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:26:22 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:26:22 [Information] () Executed DbCommand ("5"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:26:22 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:26:22 [Information] () Executed DbCommand ("12"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:26:22 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:26:22 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:26:22 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:26:22 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:26:22 [Debug] () A data reader was disposed.

12:26:22 [Debug] () A data reader was disposed.

12:26:22 [Debug] () A data reader was disposed.

12:26:22 [Debug] () A data reader was disposed.

12:26:22 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:26:22 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:26:22 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 210.7478ms.

12:26:22 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:26:22 [Debug] () No information found on request to perform content negotiation.

12:26:22 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:26:22 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:26:22 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:26:22 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:26:22 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:26:22 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 243.9372ms

12:26:22 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:26:22 [Information] () The response has been cached.

12:26:22 [Debug] () '"ApplicationDbContext"' disposed.

12:26:22 [Information] () Request finished in 256.1238ms 200 application/json; charset=utf-8

12:28:54 [Information] () Hello World!

12:28:56 [Debug] () Hosting starting

12:28:56 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:28:56 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:28:56 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:28:56 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:28:56 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:28:56 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:28:56 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:28:56 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:28:56 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:28:56 [Debug] () Decrypting secret element using Windows DPAPI.

12:28:56 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:28:56 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:28:56 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:28:56 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:28:56 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:28:57 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:28:57 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:28:57 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:28:57 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:28:57 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:28:57 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:28:57 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:28:57 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:28:57 [Debug] () Hosting started

12:28:57 [Debug] () Loaded hosting startup assembly "BackEnd"

12:28:57 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:28:57 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:28:57 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:28:57 [Information] () No cached response available for this request.

12:28:57 [Debug] () The request path "" does not match the path filter

12:28:57 [Debug] () No candidates found for the request path '"/api/values"'

12:28:57 [Debug] () Request did not match any endpoints

12:28:57 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:28:57 [Information] () The response could not be cached for this request.

12:28:58 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:28:58 [Debug] () Connection ID ""18014398523977498672"" disconnecting.

12:28:58 [Information] () No cached response available for this request.

12:28:58 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:28:58 [Information] () The response could not be cached for this request.

12:28:58 [Debug] () Connection ID ""18302628908719145004"" disconnecting.

12:28:58 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:28:58 [Information] () Request finished in 215.8124ms 302 

12:28:58 [Information] () No cached response available for this request.

12:28:58 [Information] () Request finished in 47.0047ms 301 

12:28:58 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:28:58 [Information] () The response has been cached.

12:28:58 [Information] () Request finished in 228.1481ms 200 text/html

12:28:58 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:28:58 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:28:58 [Information] () No cached response available for this request.

12:28:58 [Information] () No cached response available for this request.

12:28:58 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:28:58 [Information] () No cached response available for this request.

12:28:58 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:28:58 [Information] () The file "/swagger-ui.css" was not modified

12:28:58 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:28:58 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:28:58 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:28:58 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:28:58 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:28:58 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:28:58 [Information] () The response could not be cached for this request.

12:28:58 [Information] () The response could not be cached for this request.

12:28:58 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:28:58 [Information] () The response could not be cached for this request.

12:28:58 [Information] () Request finished in 8.8793ms 304 application/javascript

12:28:58 [Information] () Request finished in 18.1501ms 304 text/css

12:28:58 [Information] () Request finished in 18.2313ms 304 application/javascript

12:28:58 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:28:58 [Information] () No cached response available for this request.

12:28:58 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:28:58 [Information] () The response has been cached.

12:28:58 [Information] () Request finished in 214.9776ms 200 application/json;charset=utf-8

12:28:59 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:28:59 [Information] () No cached response available for this request.

12:28:59 [Debug] () The request path "" does not match the path filter

12:28:59 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:28:59 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:28:59 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:28:59 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:28:59 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:28:59 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:28:59 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:28:59 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:28:59 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:28:59 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:28:59 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:28:59 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:28:59 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:28:59 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:28:59 [Debug] () GetConferencesForFollowingFiveDays was called

12:28:59 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:28:59 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:28:59 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:28:59 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:28:59 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:28:59 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:28:59 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:28:59 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:28:59 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:28:59 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:28:59 [Debug] () Including navigation: '"[c].Sessions"'

12:28:59 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:28:59 [Debug] () Including navigation: '"[c].Tracks"'

12:28:59 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:28:59 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:28:59 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:28:59 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:28:59 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:28:59 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:28:59 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:28:59 [Information] () Executed DbCommand ("15"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:29:00 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:29:00 [Information] () Executed DbCommand ("11"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:29:00 [Debug] () A data reader was disposed.

12:29:00 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:29:00 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:29:00 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:29:00 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:29:00 [Debug] () A data reader was disposed.

12:29:00 [Debug] () A data reader was disposed.

12:29:00 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:29:00 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:29:00 [Debug] () A data reader was disposed.

12:29:00 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:29:00 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:29:00 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:29:00 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:29:00 [Debug] () A data reader was disposed.

12:29:00 [Debug] () A data reader was disposed.

12:29:00 [Debug] () A data reader was disposed.

12:29:00 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:00 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:00 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 764.4145ms.

12:29:00 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:29:00 [Debug] () No information found on request to perform content negotiation.

12:29:00 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:29:00 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:29:00 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:29:00 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:29:00 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:29:00 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 945.6597ms

12:29:00 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:29:00 [Information] () The response has been cached.

12:29:00 [Debug] () '"ApplicationDbContext"' disposed.

12:29:00 [Information] () Request finished in 970.458ms 200 application/json; charset=utf-8

12:29:01 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:29:01 [Information] () Serving response from cache.

12:29:01 [Information] () Request finished in 16.512ms 200 application/json; charset=utf-8

12:29:01 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:29:01 [Information] () No cached response available for this request.

12:29:01 [Debug] () The request path "" does not match the path filter

12:29:01 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:29:01 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:29:01 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:29:01 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:29:01 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:29:01 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:29:01 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:29:01 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:29:01 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:29:01 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:29:01 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:29:01 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:29:01 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:29:01 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:29:01 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:29:01 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:29:01 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:29:01 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:01 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:01 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:01 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:29:01 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:01 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:29:01 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:01 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:01 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:01 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:29:01 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:01 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:29:01 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:29:01 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:29:01 [Debug] () Including navigation: '"[s].Track"'

12:29:01 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:29:01 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:29:01 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:29:01 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:29:01 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:29:01 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:01 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:01 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:29:01 [Information] () Executed DbCommand ("5"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:29:01 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:29:01 [Information] () Executed DbCommand ("12"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:29:01 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:29:01 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:29:01 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:29:01 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:29:01 [Debug] () A data reader was disposed.

12:29:01 [Debug] () A data reader was disposed.

12:29:01 [Debug] () A data reader was disposed.

12:29:01 [Debug] () A data reader was disposed.

12:29:01 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:01 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:02 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 221.0394ms.

12:29:02 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:29:02 [Debug] () No information found on request to perform content negotiation.

12:29:02 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:29:02 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:29:02 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:29:02 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:29:02 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:29:02 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 248.5576ms

12:29:02 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:29:02 [Information] () The response has been cached.

12:29:02 [Debug] () '"ApplicationDbContext"' disposed.

12:29:02 [Information] () Request finished in 260.2941ms 200 application/json; charset=utf-8

12:29:44 [Information] () Hello World!

12:29:46 [Debug] () Hosting starting

12:29:46 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:29:46 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:29:46 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:29:46 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:29:46 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:29:46 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:29:46 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:29:46 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:29:46 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:29:46 [Debug] () Decrypting secret element using Windows DPAPI.

12:29:46 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:29:46 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:29:46 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:29:46 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:29:46 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:29:46 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:29:46 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:29:46 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:29:46 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:29:46 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:29:46 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:29:46 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:29:46 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:29:46 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:29:46 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:29:46 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:29:46 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:29:46 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:29:46 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:29:46 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:29:46 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:29:46 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:29:46 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:29:46 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:29:47 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:29:47 [Debug] () Hosting started

12:29:47 [Debug] () Loaded hosting startup assembly "BackEnd"

12:29:47 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:29:47 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:29:47 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:29:47 [Information] () No cached response available for this request.

12:29:47 [Debug] () The request path "" does not match the path filter

12:29:47 [Debug] () No candidates found for the request path '"/api/values"'

12:29:47 [Debug] () Request did not match any endpoints

12:29:47 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:29:47 [Information] () The response could not be cached for this request.

12:29:47 [Debug] () Connection ID ""18374686507052040256"" disconnecting.

12:29:47 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:29:47 [Information] () No cached response available for this request.

12:29:47 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:29:47 [Information] () The response could not be cached for this request.

12:29:47 [Debug] () Connection ID ""18230571293206380612"" disconnecting.

12:29:47 [Information] () Request finished in 188.6206ms 302 

12:29:47 [Information] () Request finished in 4.5804ms 301 

12:29:47 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:29:47 [Information] () No cached response available for this request.

12:29:47 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:29:47 [Information] () The response has been cached.

12:29:47 [Information] () Request finished in 221.4934ms 200 text/html

12:29:47 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:29:47 [Information] () No cached response available for this request.

12:29:47 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:29:47 [Information] () No cached response available for this request.

12:29:47 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:29:47 [Information] () No cached response available for this request.

12:29:47 [Information] () The file "/swagger-ui.css" was not modified

12:29:47 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:29:47 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:29:47 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:29:47 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:29:47 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:29:47 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:29:47 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:29:47 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:29:47 [Information] () The response could not be cached for this request.

12:29:47 [Information] () The response could not be cached for this request.

12:29:47 [Information] () The response could not be cached for this request.

12:29:47 [Information] () Request finished in 16.5101ms 304 application/javascript

12:29:47 [Information] () Request finished in 8.8752ms 304 text/css

12:29:47 [Information] () Request finished in 18.7111ms 304 application/javascript

12:29:48 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:29:48 [Information] () No cached response available for this request.

12:29:48 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:29:48 [Information] () The response has been cached.

12:29:48 [Information] () Request finished in 268.083ms 200 application/json;charset=utf-8

12:29:48 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:29:48 [Information] () No cached response available for this request.

12:29:48 [Debug] () The request path "" does not match the path filter

12:29:48 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:29:48 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:29:48 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:29:48 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:29:48 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:29:48 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:29:48 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:29:48 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:29:48 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:29:48 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:29:48 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:29:48 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:29:49 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:29:49 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:29:49 [Debug] () GetConferencesForFollowingFiveDays was called

12:29:49 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:29:49 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:29:49 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:29:49 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:29:49 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:29:49 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:29:49 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:29:49 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:29:49 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:29:49 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:29:49 [Debug] () Including navigation: '"[c].Sessions"'

12:29:49 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:29:49 [Debug] () Including navigation: '"[c].Tracks"'

12:29:49 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:29:49 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:29:49 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:29:49 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:29:49 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:49 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:49 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:29:49 [Information] () Executed DbCommand ("14"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:29:49 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:29:49 [Information] () Executed DbCommand ("11"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:29:49 [Debug] () A data reader was disposed.

12:29:49 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:29:49 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:29:49 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:29:49 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:29:49 [Debug] () A data reader was disposed.

12:29:49 [Debug] () A data reader was disposed.

12:29:49 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:29:49 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:29:49 [Debug] () A data reader was disposed.

12:29:49 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:29:49 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:29:49 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:29:49 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:29:49 [Debug] () A data reader was disposed.

12:29:49 [Debug] () A data reader was disposed.

12:29:49 [Debug] () A data reader was disposed.

12:29:49 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:49 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:49 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 766.8133ms.

12:29:49 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:29:49 [Debug] () No information found on request to perform content negotiation.

12:29:49 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:29:49 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:29:49 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:29:49 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:29:49 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:29:49 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 937.1935ms

12:29:49 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:29:49 [Information] () The response has been cached.

12:29:49 [Debug] () '"ApplicationDbContext"' disposed.

12:29:49 [Information] () Request finished in 963.9026ms 200 application/json; charset=utf-8

12:29:51 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:29:51 [Information] () Serving response from cache.

12:29:51 [Information] () Request finished in 16.5979ms 200 application/json; charset=utf-8

12:29:51 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:29:51 [Information] () No cached response available for this request.

12:29:51 [Debug] () The request path "" does not match the path filter

12:29:51 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:29:51 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:29:51 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:29:51 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:29:51 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:29:51 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:29:51 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:29:51 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:29:51 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:29:51 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:29:51 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:29:51 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:29:51 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:29:51 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:29:51 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:29:51 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:29:51 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:29:51 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:51 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:51 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:51 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:29:51 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:51 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:29:51 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:51 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:51 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:51 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:29:51 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:29:51 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:29:51 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:29:51 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:29:51 [Debug] () Including navigation: '"[s].Track"'

12:29:51 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:29:51 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:29:51 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:29:51 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:29:51 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:29:51 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:51 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:51 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:29:51 [Information] () Executed DbCommand ("5"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:29:51 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:29:51 [Information] () Executed DbCommand ("13"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:29:51 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:29:51 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:29:51 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:29:51 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:29:51 [Debug] () A data reader was disposed.

12:29:51 [Debug] () A data reader was disposed.

12:29:51 [Debug] () A data reader was disposed.

12:29:51 [Debug] () A data reader was disposed.

12:29:51 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:51 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:29:51 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 216.4763ms.

12:29:51 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:29:51 [Debug] () No information found on request to perform content negotiation.

12:29:51 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:29:51 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:29:51 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:29:51 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:29:51 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:29:51 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 244.1049ms

12:29:51 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:29:51 [Information] () The response has been cached.

12:29:51 [Debug] () '"ApplicationDbContext"' disposed.

12:29:51 [Information] () Request finished in 257.1967ms 200 application/json; charset=utf-8

12:30:39 [Information] () Hello World!

12:30:40 [Debug] () Hosting starting

12:30:41 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:30:41 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:30:41 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:30:41 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:30:41 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:30:41 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:30:41 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:30:41 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:30:41 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:30:41 [Debug] () Decrypting secret element using Windows DPAPI.

12:30:41 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:30:41 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:30:41 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:30:41 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:30:41 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:30:41 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:30:41 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:30:41 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:30:41 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:30:41 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:30:41 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:30:41 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:30:41 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:30:42 [Debug] () Hosting started

12:30:42 [Debug] () Loaded hosting startup assembly "BackEnd"

12:30:42 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:30:42 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:30:42 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:30:42 [Information] () No cached response available for this request.

12:30:42 [Debug] () The request path "" does not match the path filter

12:30:42 [Debug] () No candidates found for the request path '"/api/values"'

12:30:42 [Debug] () Request did not match any endpoints

12:30:42 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:30:42 [Information] () The response could not be cached for this request.

12:30:42 [Debug] () Connection ID ""18158513716348321796"" disconnecting.

12:30:42 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:30:42 [Information] () No cached response available for this request.

12:30:42 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:30:42 [Information] () The response could not be cached for this request.

12:30:42 [Debug] () Connection ID ""18158513703463419963"" disconnecting.

12:30:42 [Information] () Request finished in 214.0873ms 302 

12:30:42 [Information] () Request finished in 4.4495ms 301 

12:30:42 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:30:42 [Information] () No cached response available for this request.

12:30:42 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:30:42 [Information] () The response has been cached.

12:30:42 [Information] () Request finished in 255.4447ms 200 text/html

12:30:42 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:30:42 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:30:42 [Information] () No cached response available for this request.

12:30:42 [Information] () No cached response available for this request.

12:30:42 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:30:42 [Information] () No cached response available for this request.

12:30:42 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:30:42 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:30:42 [Information] () The file "/swagger-ui.css" was not modified

12:30:42 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:30:42 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:30:42 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:30:42 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:30:42 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:30:42 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:30:42 [Information] () The response could not be cached for this request.

12:30:42 [Information] () The response could not be cached for this request.

12:30:42 [Information] () The response could not be cached for this request.

12:30:42 [Information] () Request finished in 13.5642ms 304 text/css

12:30:42 [Information] () Request finished in 13.7142ms 304 application/javascript

12:30:42 [Information] () Request finished in 13.3372ms 304 application/javascript

12:30:42 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:30:42 [Information] () No cached response available for this request.

12:30:43 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:30:43 [Information] () The response has been cached.

12:30:43 [Information] () Request finished in 212.4167ms 200 application/json;charset=utf-8

12:30:44 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:30:44 [Information] () No cached response available for this request.

12:30:44 [Debug] () The request path "" does not match the path filter

12:30:44 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:30:44 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:30:44 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:30:44 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:30:44 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:30:44 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:30:44 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:30:44 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:30:44 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:30:44 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:30:44 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:30:44 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:30:44 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:30:44 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:30:44 [Debug] () GetConferencesForFollowingFiveDays was called

12:30:44 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:30:44 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:30:44 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:30:44 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:30:44 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:30:44 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:30:44 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:30:44 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:30:44 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:30:44 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:30:44 [Debug] () Including navigation: '"[c].Sessions"'

12:30:44 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:30:44 [Debug] () Including navigation: '"[c].Tracks"'

12:30:44 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:30:44 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:30:44 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:30:44 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:30:44 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:30:44 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:30:44 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:30:44 [Information] () Executed DbCommand ("16"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:30:44 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:30:44 [Information] () Executed DbCommand ("12"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:30:44 [Debug] () A data reader was disposed.

12:30:45 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:30:45 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:30:45 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:30:45 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:30:45 [Debug] () A data reader was disposed.

12:30:45 [Debug] () A data reader was disposed.

12:30:45 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:30:45 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:30:45 [Debug] () A data reader was disposed.

12:30:45 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:30:45 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:30:45 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:30:45 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:30:45 [Debug] () A data reader was disposed.

12:30:45 [Debug] () A data reader was disposed.

12:30:45 [Debug] () A data reader was disposed.

12:30:45 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:30:45 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:30:45 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 736.6765ms.

12:30:45 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:30:45 [Debug] () No information found on request to perform content negotiation.

12:30:45 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:30:45 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:30:45 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:30:45 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:30:45 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:30:45 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 898.9813ms

12:30:45 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:30:45 [Information] () The response has been cached.

12:30:45 [Debug] () '"ApplicationDbContext"' disposed.

12:30:45 [Information] () Request finished in 924.3401ms 200 application/json; charset=utf-8

12:30:47 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:30:47 [Information] () Serving response from cache.

12:30:47 [Information] () Request finished in 17.0963ms 200 application/json; charset=utf-8

12:30:47 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:30:47 [Information] () No cached response available for this request.

12:30:47 [Debug] () The request path "" does not match the path filter

12:30:47 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:30:47 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:30:47 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:30:47 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:30:47 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:30:47 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:30:47 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:30:47 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:30:47 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:30:47 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:30:47 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:30:47 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:30:47 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:30:47 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:30:47 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:30:47 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:30:47 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:30:47 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:30:47 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:30:47 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:30:47 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:30:47 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:30:47 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:30:47 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:30:47 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:30:47 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:30:47 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:30:47 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:30:47 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:30:47 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:30:47 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:30:47 [Debug] () Including navigation: '"[s].Track"'

12:30:47 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:30:47 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:30:47 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:30:47 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:30:47 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:30:47 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:30:47 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:30:47 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:30:47 [Information] () Executed DbCommand ("5"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:30:47 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:30:47 [Information] () Executed DbCommand ("14"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:30:47 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:30:47 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:30:47 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:30:47 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:30:47 [Debug] () A data reader was disposed.

12:30:47 [Debug] () A data reader was disposed.

12:30:47 [Debug] () A data reader was disposed.

12:30:47 [Debug] () A data reader was disposed.

12:30:47 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:30:47 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:30:47 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 221.3852ms.

12:30:47 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:30:47 [Debug] () No information found on request to perform content negotiation.

12:30:47 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:30:47 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:30:47 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:30:47 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:30:47 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:30:47 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 248.4316ms

12:30:47 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:30:47 [Information] () The response has been cached.

12:30:47 [Debug] () '"ApplicationDbContext"' disposed.

12:30:47 [Information] () Request finished in 261.9726ms 200 application/json; charset=utf-8

12:35:20 [Information] () Hello World!

12:35:21 [Debug] () Hosting starting

12:35:21 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:35:21 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:35:21 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:35:21 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:35:21 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:35:22 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:35:22 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:35:22 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:35:22 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:35:22 [Debug] () Decrypting secret element using Windows DPAPI.

12:35:22 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:35:22 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:35:22 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:35:22 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:35:22 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:35:22 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:35:22 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:35:22 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:35:22 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:35:22 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:35:22 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:35:22 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:35:22 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:35:22 [Debug] () Hosting started

12:35:22 [Debug] () Loaded hosting startup assembly "BackEnd"

12:35:22 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:35:22 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:35:22 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:35:22 [Information] () No cached response available for this request.

12:35:22 [Debug] () The request path "" does not match the path filter

12:35:22 [Debug] () No candidates found for the request path '"/api/values"'

12:35:22 [Debug] () Request did not match any endpoints

12:35:22 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:35:22 [Information] () The response could not be cached for this request.

12:35:23 [Debug] () Connection ID ""18014398536862400592"" disconnecting.

12:35:23 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:35:23 [Information] () No cached response available for this request.

12:35:23 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:35:23 [Information] () The response could not be cached for this request.

12:35:23 [Information] () Request finished in 180.2162ms 302 

12:35:23 [Information] () Request finished in 4.2226ms 301 

12:35:23 [Debug] () Connection ID ""18158513724938256434"" disconnecting.

12:35:23 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:35:23 [Information] () No cached response available for this request.

12:35:23 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:35:23 [Information] () The response has been cached.

12:35:23 [Information] () Request finished in 207.9747ms 200 text/html

12:35:23 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:35:23 [Information] () No cached response available for this request.

12:35:23 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:35:23 [Information] () No cached response available for this request.

12:35:23 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:35:23 [Information] () No cached response available for this request.

12:35:23 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:35:23 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:35:23 [Information] () The file "/swagger-ui.css" was not modified

12:35:23 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:35:23 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:35:23 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:35:23 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:35:23 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:35:23 [Information] () The response could not be cached for this request.

12:35:23 [Information] () The response could not be cached for this request.

12:35:23 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:35:23 [Information] () The response could not be cached for this request.

12:35:23 [Information] () Request finished in 12.1222ms 304 text/css

12:35:23 [Information] () Request finished in 9.364ms 304 application/javascript

12:35:23 [Information] () Request finished in 8.8165ms 304 application/javascript

12:35:23 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:35:23 [Information] () No cached response available for this request.

12:35:23 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:35:23 [Information] () The response has been cached.

12:35:23 [Information] () Request finished in 299.621ms 200 application/json;charset=utf-8

12:35:27 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:35:27 [Information] () No cached response available for this request.

12:35:27 [Debug] () The request path "" does not match the path filter

12:35:27 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:35:27 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:35:27 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:35:27 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:35:27 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:35:27 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:35:27 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:35:27 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:35:27 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:35:27 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:35:27 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:35:27 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:35:27 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:35:27 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:35:27 [Debug] () GetConferencesForFollowingFiveDays was called

12:35:27 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:35:27 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:35:27 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:35:27 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:35:27 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:35:27 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:35:27 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:35:27 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:35:27 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:35:27 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:35:27 [Debug] () Including navigation: '"[c].Sessions"'

12:35:27 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:35:27 [Debug] () Including navigation: '"[c].Tracks"'

12:35:27 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:35:27 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:35:27 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:35:27 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:35:27 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:35:27 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:35:27 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:35:27 [Information] () Executed DbCommand ("15"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:35:27 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:35:27 [Information] () Executed DbCommand ("12"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:35:27 [Debug] () A data reader was disposed.

12:35:27 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:35:27 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:35:27 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:35:27 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:35:27 [Debug] () A data reader was disposed.

12:35:27 [Debug] () A data reader was disposed.

12:35:27 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:35:27 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:35:27 [Debug] () A data reader was disposed.

12:35:27 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:35:27 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:35:27 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:35:27 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:35:27 [Debug] () A data reader was disposed.

12:35:27 [Debug] () A data reader was disposed.

12:35:27 [Debug] () A data reader was disposed.

12:35:27 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:35:27 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:35:27 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 753.4943ms.

12:35:27 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:35:27 [Debug] () No information found on request to perform content negotiation.

12:35:27 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:35:27 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:35:27 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:35:27 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:35:27 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:35:27 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 947.622ms

12:35:27 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:35:27 [Information] () The response has been cached.

12:35:27 [Debug] () '"ApplicationDbContext"' disposed.

12:35:27 [Information] () Request finished in 978.7336ms 200 application/json; charset=utf-8

12:35:34 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:35:34 [Information] () Serving response from cache.

12:35:34 [Information] () Request finished in 17.1022ms 200 application/json; charset=utf-8

12:35:34 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:35:34 [Information] () No cached response available for this request.

12:35:34 [Debug] () The request path "" does not match the path filter

12:35:34 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:35:34 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:35:34 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:35:34 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:35:34 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:35:34 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:35:34 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:35:34 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:35:34 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:35:34 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:35:34 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:35:34 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:35:34 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:35:34 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:35:34 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:35:34 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:35:34 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:35:34 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:35:34 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:35:34 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:35:34 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:35:34 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:35:34 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:35:34 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:35:34 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:35:34 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:35:34 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:35:34 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:35:34 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:35:34 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:35:34 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:35:34 [Debug] () Including navigation: '"[s].Track"'

12:35:34 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:35:34 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:35:34 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:35:34 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:35:34 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:35:34 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:35:34 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:35:34 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:35:34 [Information] () Executed DbCommand ("5"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:35:34 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:35:34 [Information] () Executed DbCommand ("13"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:35:34 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:35:34 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:35:34 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:35:34 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:35:34 [Debug] () A data reader was disposed.

12:35:34 [Debug] () A data reader was disposed.

12:35:34 [Debug] () A data reader was disposed.

12:35:34 [Debug] () A data reader was disposed.

12:35:34 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:35:34 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:35:34 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 229.099ms.

12:35:34 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:35:34 [Debug] () No information found on request to perform content negotiation.

12:35:34 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:35:34 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:35:34 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:35:34 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:35:34 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:35:34 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 256.5128ms

12:35:34 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:35:34 [Information] () The response has been cached.

12:35:34 [Debug] () '"ApplicationDbContext"' disposed.

12:35:34 [Information] () Request finished in 269.6478ms 200 application/json; charset=utf-8

12:37:47 [Information] () Hello World!

12:37:50 [Debug] () Hosting starting

12:37:50 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:37:50 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:37:50 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:37:50 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:37:50 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:37:50 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:37:50 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:37:50 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:37:50 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:37:50 [Debug] () Decrypting secret element using Windows DPAPI.

12:37:50 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:37:50 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:37:50 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:37:50 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:37:50 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:37:50 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:37:50 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:37:50 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:37:50 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:37:50 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:37:50 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:37:50 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:37:50 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:37:51 [Debug] () Hosting started

12:37:51 [Debug] () Loaded hosting startup assembly "BackEnd"

12:37:51 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:37:51 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:37:51 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:37:51 [Information] () No cached response available for this request.

12:37:51 [Debug] () The request path "" does not match the path filter

12:37:51 [Debug] () No candidates found for the request path '"/api/values"'

12:37:51 [Debug] () Request did not match any endpoints

12:37:51 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:37:51 [Information] () The response could not be cached for this request.

12:37:51 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:37:51 [Debug] () Connection ID ""18230571306091282455"" disconnecting.

12:37:51 [Information] () No cached response available for this request.

12:37:51 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:37:51 [Information] () The response could not be cached for this request.

12:37:51 [Information] () Request finished in 279.0366ms 302 

12:37:51 [Debug] () Connection ID ""18014398523977498677"" disconnecting.

12:37:51 [Information] () Request finished in 7.3749ms 301 

12:37:51 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:37:51 [Information] () No cached response available for this request.

12:37:51 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:37:51 [Information] () The response has been cached.

12:37:51 [Information] () Request finished in 215.6359ms 200 text/html

12:37:51 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:37:51 [Information] () No cached response available for this request.

12:37:51 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:37:51 [Information] () No cached response available for this request.

12:37:51 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:37:51 [Information] () No cached response available for this request.

12:37:51 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:37:51 [Information] () The file "/swagger-ui.css" was not modified

12:37:51 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:37:51 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:37:51 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:37:51 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:37:51 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:37:51 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:37:51 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:37:51 [Information] () The response could not be cached for this request.

12:37:51 [Information] () The response could not be cached for this request.

12:37:51 [Information] () The response could not be cached for this request.

12:37:51 [Information] () Request finished in 18.8872ms 304 text/css

12:37:51 [Information] () Request finished in 8.3984ms 304 application/javascript

12:37:51 [Information] () Request finished in 16.5192ms 304 application/javascript

12:37:52 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:37:52 [Information] () No cached response available for this request.

12:37:52 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:37:52 [Information] () The response has been cached.

12:37:52 [Information] () Request finished in 250.9792ms 200 application/json;charset=utf-8

12:37:52 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:37:52 [Information] () No cached response available for this request.

12:37:52 [Debug] () The request path "" does not match the path filter

12:37:52 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:37:52 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:37:52 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:37:52 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:37:52 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:37:52 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:37:52 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:37:52 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:37:52 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:37:52 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:37:52 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:37:52 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:37:52 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:37:52 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:37:52 [Debug] () GetConferencesForFollowingFiveDays was called

12:37:52 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:37:52 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:37:52 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:37:52 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:37:52 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:37:52 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:37:52 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:37:53 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:37:53 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:37:53 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:37:53 [Debug] () Including navigation: '"[c].Sessions"'

12:37:53 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:37:53 [Debug] () Including navigation: '"[c].Tracks"'

12:37:53 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:37:53 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:37:53 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:37:53 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:37:53 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:37:53 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:37:53 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:37:53 [Information] () Executed DbCommand ("15"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:37:53 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:37:53 [Information] () Executed DbCommand ("11"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:37:53 [Debug] () A data reader was disposed.

12:37:53 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:37:53 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:37:53 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:37:53 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:37:53 [Debug] () A data reader was disposed.

12:37:53 [Debug] () A data reader was disposed.

12:37:53 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:37:53 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:37:53 [Debug] () A data reader was disposed.

12:37:53 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:37:53 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:37:53 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:37:53 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:37:53 [Debug] () A data reader was disposed.

12:37:53 [Debug] () A data reader was disposed.

12:37:53 [Debug] () A data reader was disposed.

12:37:53 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:37:53 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:37:53 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 755.6321ms.

12:37:53 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:37:53 [Debug] () No information found on request to perform content negotiation.

12:37:53 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:37:53 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:37:53 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:37:53 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:37:53 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:37:53 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 931.0171ms

12:37:53 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:37:53 [Information] () The response has been cached.

12:37:53 [Debug] () '"ApplicationDbContext"' disposed.

12:37:53 [Information] () Request finished in 963.9037ms 200 application/json; charset=utf-8

12:38:03 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:38:03 [Information] () No cached response available for this request.

12:38:03 [Debug] () The request path "" does not match the path filter

12:38:03 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:38:03 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:38:03 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:38:03 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:38:03 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:38:03 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:38:03 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:38:03 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:38:03 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:38:03 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:38:03 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:38:03 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:38:03 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:38:03 [Debug] () GetConferencesForFollowingFiveDays was called

12:38:03 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:38:03 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:38:03 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:38:03 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:38:03 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:38:03 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:38:03 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:38:03 [Debug] () A data reader was disposed.

12:38:03 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:38:03 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:38:03 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:38:03 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:38:03 [Debug] () A data reader was disposed.

12:38:03 [Debug] () A data reader was disposed.

12:38:03 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:38:03 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:38:03 [Debug] () A data reader was disposed.

12:38:03 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:38:03 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:38:03 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:38:03 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:38:03 [Debug] () A data reader was disposed.

12:38:03 [Debug] () A data reader was disposed.

12:38:03 [Debug] () A data reader was disposed.

12:38:03 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:38:03 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:38:03 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 61.0129ms.

12:38:03 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:38:03 [Debug] () No information found on request to perform content negotiation.

12:38:03 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:38:03 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:38:03 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:38:03 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:38:03 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:38:03 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 65.5906ms

12:38:03 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:38:03 [Information] () The response has been cached.

12:38:03 [Debug] () '"ApplicationDbContext"' disposed.

12:38:03 [Information] () Request finished in 68.0414ms 200 application/json; charset=utf-8

12:38:04 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:38:04 [Information] () No cached response available for this request.

12:38:04 [Debug] () The request path "" does not match the path filter

12:38:04 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:38:04 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:38:04 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:38:04 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:38:04 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:38:04 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:38:04 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:38:04 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:38:04 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:38:04 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:38:04 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:38:04 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:38:04 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:38:04 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:38:04 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:38:04 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:38:04 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:38:04 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:38:04 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:38:04 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:38:04 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:38:04 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:38:04 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:38:04 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:38:04 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:38:04 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:38:04 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:38:04 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:38:04 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:38:04 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:38:04 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:38:04 [Debug] () Including navigation: '"[s].Track"'

12:38:04 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:38:04 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:38:04 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:38:04 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:38:04 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:38:04 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:38:04 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:38:04 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:38:04 [Information] () Executed DbCommand ("6"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:38:04 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:38:04 [Information] () Executed DbCommand ("14"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:38:04 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:38:04 [Information] () Executed DbCommand ("5"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:38:04 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:38:04 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:38:04 [Debug] () A data reader was disposed.

12:38:04 [Debug] () A data reader was disposed.

12:38:04 [Debug] () A data reader was disposed.

12:38:04 [Debug] () A data reader was disposed.

12:38:04 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:38:04 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:38:04 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 246.1386ms.

12:38:04 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:38:04 [Debug] () No information found on request to perform content negotiation.

12:38:04 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:38:04 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:38:04 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:38:04 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:38:04 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:38:04 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 272.8671ms

12:38:04 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:38:04 [Information] () The response has been cached.

12:38:04 [Debug] () '"ApplicationDbContext"' disposed.

12:38:04 [Information] () Request finished in 285.0937ms 200 application/json; charset=utf-8

12:40:53 [Information] () Hello World!

12:40:55 [Debug] () Hosting starting

12:40:55 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:40:55 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:40:55 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:40:55 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:40:55 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:40:55 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:40:55 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:40:55 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:40:55 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:40:55 [Debug] () Decrypting secret element using Windows DPAPI.

12:40:55 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:40:55 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:40:55 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:40:55 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:40:55 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:40:55 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:40:55 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:40:55 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:40:55 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:40:55 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:40:55 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:40:55 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:40:55 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:40:56 [Debug] () Hosting started

12:40:56 [Debug] () Loaded hosting startup assembly "BackEnd"

12:40:56 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:40:56 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:40:56 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:40:56 [Information] () No cached response available for this request.

12:40:56 [Debug] () The request path "" does not match the path filter

12:40:56 [Debug] () No candidates found for the request path '"/api/values"'

12:40:56 [Debug] () Request did not match any endpoints

12:40:56 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:40:56 [Information] () The response could not be cached for this request.

12:40:56 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:40:56 [Information] () No cached response available for this request.

12:40:56 [Debug] () Connection ID ""18158513699168452740"" disconnecting.

12:40:56 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:40:56 [Information] () The response could not be cached for this request.

12:40:56 [Debug] () Connection ID ""18374686511347007544"" disconnecting.

12:40:56 [Information] () Request finished in 139.5263ms 302 

12:40:56 [Information] () Request finished in 4.0313ms 301 

12:40:56 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:40:56 [Information] () No cached response available for this request.

12:40:56 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:40:56 [Information] () The response has been cached.

12:40:56 [Information] () Request finished in 178.1634ms 200 text/html

12:40:56 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:40:56 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:40:56 [Information] () No cached response available for this request.

12:40:56 [Information] () No cached response available for this request.

12:40:56 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:40:56 [Information] () No cached response available for this request.

12:40:56 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:40:56 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:40:56 [Information] () The file "/swagger-ui.css" was not modified

12:40:56 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:40:56 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:40:56 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:40:56 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:40:56 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:40:56 [Information] () The response could not be cached for this request.

12:40:56 [Information] () The response could not be cached for this request.

12:40:56 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:40:56 [Information] () The response could not be cached for this request.

12:40:56 [Information] () Request finished in 15.2882ms 304 application/javascript

12:40:56 [Information] () Request finished in 14.8457ms 304 application/javascript

12:40:56 [Information] () Request finished in 15.48ms 304 text/css

12:40:56 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:40:56 [Information] () No cached response available for this request.

12:40:57 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:40:57 [Information] () The response has been cached.

12:40:57 [Information] () Request finished in 325.2534ms 200 application/json;charset=utf-8

12:41:02 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:41:02 [Information] () No cached response available for this request.

12:41:02 [Debug] () The request path "" does not match the path filter

12:41:02 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:41:02 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:41:02 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:41:02 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:41:02 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:41:02 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:41:02 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:41:02 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:41:02 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:41:02 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:41:02 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:41:02 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:41:02 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:41:02 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:41:02 [Debug] () GetConferencesForFollowingFiveDays was called

12:41:02 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:41:02 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:41:02 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:41:02 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:41:02 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:41:02 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:41:02 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:41:02 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:41:02 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:41:02 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:41:02 [Debug] () Including navigation: '"[c].Sessions"'

12:41:02 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:41:02 [Debug] () Including navigation: '"[c].Tracks"'

12:41:02 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:41:02 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:41:02 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:41:02 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:41:02 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:41:02 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:41:02 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:41:02 [Information] () Executed DbCommand ("16"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:41:02 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:41:02 [Information] () Executed DbCommand ("12"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:41:02 [Debug] () A data reader was disposed.

12:41:02 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:41:02 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:41:02 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:41:02 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:41:02 [Debug] () A data reader was disposed.

12:41:03 [Debug] () A data reader was disposed.

12:41:03 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:41:03 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:41:03 [Debug] () A data reader was disposed.

12:41:03 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:41:03 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:41:03 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:41:03 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:41:03 [Debug] () A data reader was disposed.

12:41:03 [Debug] () A data reader was disposed.

12:41:03 [Debug] () A data reader was disposed.

12:41:03 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:41:03 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:41:03 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 862.7614ms.

12:41:03 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:41:03 [Debug] () No information found on request to perform content negotiation.

12:41:03 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:41:03 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:41:03 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:41:03 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:41:03 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:41:03 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 1113.2575ms

12:41:03 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:41:03 [Information] () The response has been cached.

12:41:03 [Debug] () '"ApplicationDbContext"' disposed.

12:41:03 [Information] () Request finished in 1151.8524ms 200 application/json; charset=utf-8

12:41:09 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:41:09 [Information] () Serving response from cache.

12:41:09 [Information] () Request finished in 29.9491ms 200 application/json; charset=utf-8

12:41:09 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:41:09 [Information] () No cached response available for this request.

12:41:09 [Debug] () The request path "" does not match the path filter

12:41:09 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:41:09 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:41:09 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:41:09 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:41:09 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:41:09 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:41:09 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:41:09 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:41:09 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:41:09 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:41:09 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:41:09 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:41:09 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:41:09 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:41:09 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:41:09 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:41:09 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:41:09 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:41:09 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:41:09 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:41:09 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:41:09 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:41:09 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:41:09 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:41:09 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:41:09 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:41:09 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:41:09 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:41:09 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:41:09 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:41:09 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:41:09 [Debug] () Including navigation: '"[s].Track"'

12:41:09 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:41:09 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:41:09 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:41:09 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:41:09 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:41:09 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:41:09 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:41:09 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:41:09 [Information] () Executed DbCommand ("6"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:41:09 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:41:09 [Information] () Executed DbCommand ("12"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:41:09 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:41:09 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:41:09 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:41:09 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:41:09 [Debug] () A data reader was disposed.

12:41:09 [Debug] () A data reader was disposed.

12:41:09 [Debug] () A data reader was disposed.

12:41:09 [Debug] () A data reader was disposed.

12:41:09 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:41:09 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:41:09 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 240.7616ms.

12:41:09 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:41:09 [Debug] () No information found on request to perform content negotiation.

12:41:09 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:41:09 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:41:09 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:41:09 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:41:09 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:41:09 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 277.5262ms

12:41:09 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:41:09 [Information] () The response has been cached.

12:41:09 [Debug] () '"ApplicationDbContext"' disposed.

12:41:09 [Information] () Request finished in 292.6959ms 200 application/json; charset=utf-8

12:43:16 [Information] () Hello World!

12:43:17 [Debug] () Hosting starting

12:43:18 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:43:18 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:43:18 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:43:18 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:43:18 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:43:18 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:43:18 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:43:18 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:43:18 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:43:18 [Debug] () Decrypting secret element using Windows DPAPI.

12:43:18 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:43:18 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:43:18 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:43:18 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:43:18 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:43:18 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:43:18 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:43:18 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:43:18 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:43:18 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:43:18 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:43:18 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:43:18 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:43:18 [Debug] () Hosting started

12:43:18 [Debug] () Loaded hosting startup assembly "BackEnd"

12:43:18 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:43:18 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:43:18 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:43:18 [Information] () No cached response available for this request.

12:43:18 [Debug] () The request path "" does not match the path filter

12:43:18 [Debug] () No candidates found for the request path '"/api/values"'

12:43:18 [Debug] () Request did not match any endpoints

12:43:18 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:43:18 [Information] () The response could not be cached for this request.

12:43:18 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:43:18 [Information] () No cached response available for this request.

12:43:18 [Debug] () Connection ID ""18014398541157367822"" disconnecting.

12:43:18 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:43:18 [Information] () The response could not be cached for this request.

12:43:18 [Debug] () Connection ID ""18158513699168452742"" disconnecting.

12:43:18 [Information] () Request finished in 151.1037ms 302 

12:43:18 [Information] () Request finished in 3.1729ms 301 

12:43:18 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:43:18 [Information] () No cached response available for this request.

12:43:19 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:43:19 [Information] () The response has been cached.

12:43:19 [Information] () Request finished in 165.2219ms 200 text/html

12:43:19 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:43:19 [Information] () No cached response available for this request.

12:43:19 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:43:19 [Information] () No cached response available for this request.

12:43:19 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:43:19 [Information] () No cached response available for this request.

12:43:19 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:43:19 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:43:19 [Information] () The file "/swagger-ui.css" was not modified

12:43:19 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:43:19 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:43:19 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:43:19 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:43:19 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:43:19 [Information] () The response could not be cached for this request.

12:43:19 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:43:19 [Information] () The response could not be cached for this request.

12:43:19 [Information] () The response could not be cached for this request.

12:43:19 [Information] () Request finished in 16.9683ms 304 application/javascript

12:43:19 [Information] () Request finished in 10.2345ms 304 application/javascript

12:43:19 [Information] () Request finished in 17.0063ms 304 text/css

12:43:19 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:43:19 [Information] () No cached response available for this request.

12:43:19 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:43:19 [Information] () The response has been cached.

12:43:19 [Information] () Request finished in 314.1841ms 200 application/json;charset=utf-8

12:43:23 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:43:23 [Information] () No cached response available for this request.

12:43:23 [Debug] () The request path "" does not match the path filter

12:43:23 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:43:23 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:43:23 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:43:23 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:43:23 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:43:23 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:43:23 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:43:23 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:43:23 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:43:23 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:43:23 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:43:23 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:43:24 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:43:24 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:43:24 [Debug] () GetConferencesForFollowingFiveDays was called

12:43:24 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:43:24 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:43:24 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:43:24 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:43:24 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:43:24 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:43:24 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:43:24 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:43:24 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:43:24 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:43:24 [Debug] () Including navigation: '"[c].Sessions"'

12:43:24 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:43:24 [Debug] () Including navigation: '"[c].Tracks"'

12:43:24 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:43:24 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:43:24 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:43:24 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:43:24 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:43:24 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:43:24 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:43:24 [Information] () Executed DbCommand ("14"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:43:24 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:43:24 [Information] () Executed DbCommand ("12"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:43:24 [Debug] () A data reader was disposed.

12:43:24 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:43:24 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:43:24 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:43:24 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:43:24 [Debug] () A data reader was disposed.

12:43:24 [Debug] () A data reader was disposed.

12:43:24 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:43:24 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:43:24 [Debug] () A data reader was disposed.

12:43:24 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:43:24 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:43:24 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:43:24 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:43:24 [Debug] () A data reader was disposed.

12:43:24 [Debug] () A data reader was disposed.

12:43:24 [Debug] () A data reader was disposed.

12:43:24 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:43:24 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:43:24 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 760.1904ms.

12:43:24 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:43:24 [Debug] () No information found on request to perform content negotiation.

12:43:24 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:43:24 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:43:24 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:43:24 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:43:24 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:43:24 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 928.499ms

12:43:24 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:43:24 [Information] () The response has been cached.

12:43:24 [Debug] () '"ApplicationDbContext"' disposed.

12:43:24 [Information] () Request finished in 952.9226ms 200 application/json; charset=utf-8

12:43:31 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:43:31 [Information] () Serving response from cache.

12:43:31 [Information] () Request finished in 15.9541ms 200 application/json; charset=utf-8

12:43:31 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:43:31 [Information] () No cached response available for this request.

12:43:31 [Debug] () The request path "" does not match the path filter

12:43:31 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:43:31 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:43:31 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:43:31 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:43:31 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:43:31 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:43:31 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:43:31 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:43:31 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:43:31 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:43:31 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:43:31 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:43:31 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:43:31 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:43:31 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:43:31 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:43:31 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:43:31 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:43:31 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:43:31 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:43:31 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:43:31 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:43:31 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:43:31 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:43:31 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:43:31 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:43:31 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:43:31 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:43:31 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:43:31 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:43:31 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:43:31 [Debug] () Including navigation: '"[s].Track"'

12:43:31 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:43:31 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:43:31 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:43:31 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:43:32 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:43:32 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:43:32 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:43:32 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:43:32 [Information] () Executed DbCommand ("5"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:43:32 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:43:32 [Information] () Executed DbCommand ("13"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:43:32 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:43:32 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:43:32 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:43:32 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:43:32 [Debug] () A data reader was disposed.

12:43:32 [Debug] () A data reader was disposed.

12:43:32 [Debug] () A data reader was disposed.

12:43:32 [Debug] () A data reader was disposed.

12:43:32 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:43:32 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:43:32 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 259.4329ms.

12:43:32 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:43:32 [Debug] () No information found on request to perform content negotiation.

12:43:32 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:43:32 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:43:32 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:43:32 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:43:32 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:43:32 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 287.6756ms

12:43:32 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:43:32 [Information] () The response has been cached.

12:43:32 [Debug] () '"ApplicationDbContext"' disposed.

12:43:32 [Information] () Request finished in 300.0536ms 200 application/json; charset=utf-8

12:44:12 [Information] () Hello World!

12:44:13 [Debug] () Hosting starting

12:44:13 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:44:13 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:44:13 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:44:13 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:44:13 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:44:13 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:44:13 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:44:13 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:44:13 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:44:13 [Debug] () Decrypting secret element using Windows DPAPI.

12:44:13 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:44:13 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:44:13 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:44:13 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:44:13 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:44:13 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:44:13 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:44:13 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:44:13 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:44:13 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:44:13 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:44:13 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:44:13 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:44:14 [Debug] () Hosting started

12:44:14 [Debug] () Loaded hosting startup assembly "BackEnd"

12:44:14 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:44:14 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:44:14 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:44:14 [Information] () No cached response available for this request.

12:44:14 [Debug] () The request path "" does not match the path filter

12:44:14 [Debug] () No candidates found for the request path '"/api/values"'

12:44:14 [Debug] () Request did not match any endpoints

12:44:14 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:44:14 [Information] () The response could not be cached for this request.

12:44:14 [Debug] () Connection ID ""18158513720643289113"" disconnecting.

12:44:14 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:44:14 [Information] () No cached response available for this request.

12:44:14 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:44:14 [Information] () The response could not be cached for this request.

12:44:14 [Debug] () Connection ID ""17870283331606675519"" disconnecting.

12:44:14 [Information] () Request finished in 189.3602ms 302 

12:44:14 [Information] () Request finished in 6.7665ms 301 

12:44:14 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:44:14 [Information] () No cached response available for this request.

12:44:14 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:44:14 [Information] () The response has been cached.

12:44:14 [Information] () Request finished in 204.3046ms 200 text/html

12:44:14 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:44:14 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:44:14 [Information] () No cached response available for this request.

12:44:14 [Information] () No cached response available for this request.

12:44:14 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:44:14 [Information] () No cached response available for this request.

12:44:15 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:44:15 [Information] () The file "/swagger-ui.css" was not modified

12:44:15 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:44:15 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:44:15 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:44:15 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:44:15 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:44:15 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:44:15 [Information] () The response could not be cached for this request.

12:44:15 [Information] () The response could not be cached for this request.

12:44:15 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:44:15 [Information] () The response could not be cached for this request.

12:44:15 [Information] () Request finished in 23.2651ms 304 text/css

12:44:15 [Information] () Request finished in 23.4088ms 304 application/javascript

12:44:15 [Information] () Request finished in 10.7151ms 304 application/javascript

12:44:15 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:44:15 [Information] () No cached response available for this request.

12:44:15 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:44:15 [Information] () The response has been cached.

12:44:15 [Information] () Request finished in 294.175ms 200 application/json;charset=utf-8

12:44:17 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:44:17 [Information] () No cached response available for this request.

12:44:17 [Debug] () The request path "" does not match the path filter

12:44:17 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:44:17 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:44:17 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:44:17 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:44:17 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:44:17 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:44:17 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:44:17 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:44:17 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:44:17 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:44:17 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:44:17 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:44:17 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:44:17 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:44:17 [Debug] () GetConferencesForFollowingFiveDays was called

12:44:17 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:44:17 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:44:17 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:44:17 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:44:17 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:44:17 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:44:17 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:44:17 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:44:17 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:44:17 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:44:17 [Debug] () Including navigation: '"[c].Sessions"'

12:44:17 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:44:17 [Debug] () Including navigation: '"[c].Tracks"'

12:44:17 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:44:17 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:44:18 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:44:18 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:44:18 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:44:18 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:44:18 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:44:18 [Information] () Executed DbCommand ("18"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:44:18 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:44:18 [Information] () Executed DbCommand ("12"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:44:18 [Debug] () A data reader was disposed.

12:44:18 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:44:18 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:44:18 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:44:18 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:44:18 [Debug] () A data reader was disposed.

12:44:18 [Debug] () A data reader was disposed.

12:44:18 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:44:18 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:44:18 [Debug] () A data reader was disposed.

12:44:18 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:44:18 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:44:18 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:44:18 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:44:18 [Debug] () A data reader was disposed.

12:44:18 [Debug] () A data reader was disposed.

12:44:18 [Debug] () A data reader was disposed.

12:44:18 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:44:18 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:44:18 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 755.1094ms.

12:44:18 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:44:18 [Debug] () No information found on request to perform content negotiation.

12:44:18 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:44:18 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:44:18 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:44:18 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:44:18 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:44:18 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 933.7748ms

12:44:18 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:44:18 [Information] () The response has been cached.

12:44:18 [Debug] () '"ApplicationDbContext"' disposed.

12:44:18 [Information] () Request finished in 960.3274ms 200 application/json; charset=utf-8

12:44:19 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:44:19 [Information] () Serving response from cache.

12:44:19 [Information] () Request finished in 14.1866ms 200 application/json; charset=utf-8

12:44:19 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:44:19 [Information] () No cached response available for this request.

12:44:19 [Debug] () The request path "" does not match the path filter

12:44:19 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:44:19 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:44:19 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:44:19 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:44:19 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:44:19 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:44:19 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:44:19 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:44:19 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:44:19 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:44:19 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:44:19 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:44:19 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:44:19 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:44:19 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:44:19 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:44:19 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:44:19 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:44:19 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:44:19 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:44:19 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:44:19 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:44:19 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:44:19 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:44:19 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:44:19 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:44:19 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:44:19 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:44:19 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:44:19 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:44:19 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:44:19 [Debug] () Including navigation: '"[s].Track"'

12:44:19 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:44:19 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:44:19 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:44:19 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:44:20 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:44:20 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:44:20 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:44:20 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:44:20 [Information] () Executed DbCommand ("6"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:44:20 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:44:20 [Information] () Executed DbCommand ("13"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:44:20 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:44:20 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:44:20 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:44:20 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:44:20 [Debug] () A data reader was disposed.

12:44:20 [Debug] () A data reader was disposed.

12:44:20 [Debug] () A data reader was disposed.

12:44:20 [Debug] () A data reader was disposed.

12:44:20 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:44:20 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:44:20 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 216.5361ms.

12:44:20 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:44:20 [Debug] () No information found on request to perform content negotiation.

12:44:20 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:44:20 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:44:20 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:44:20 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:44:20 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:44:20 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 242.3478ms

12:44:20 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:44:20 [Information] () The response has been cached.

12:44:20 [Debug] () '"ApplicationDbContext"' disposed.

12:44:20 [Information] () Request finished in 254.5836ms 200 application/json; charset=utf-8

12:46:28 [Information] () Hello World!

12:46:30 [Debug] () Hosting starting

12:46:30 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:46:30 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:46:30 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:46:30 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:46:30 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:46:30 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:46:30 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:46:30 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:46:30 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:46:30 [Debug] () Decrypting secret element using Windows DPAPI.

12:46:30 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:46:30 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:46:30 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:46:30 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:46:30 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:46:30 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:46:30 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:46:30 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:46:30 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:46:30 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:46:30 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:46:30 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:46:30 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:46:30 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:46:30 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:46:30 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:46:30 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:46:30 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:46:30 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:46:30 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:46:30 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:46:30 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:46:30 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:46:30 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:47:35 [Information] () Hello World!

12:47:37 [Debug] () Hosting starting

12:47:37 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

12:47:37 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

12:47:37 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

12:47:37 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

12:47:37 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

12:47:37 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

12:47:37 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

12:47:37 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

12:47:37 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:47:37 [Debug] () Decrypting secret element using Windows DPAPI.

12:47:37 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

12:47:37 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

12:47:37 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

12:47:37 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

12:47:37 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

12:47:37 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

12:47:37 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

12:47:37 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:47:37 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:47:37 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:47:37 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

12:47:37 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:47:37 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:47:37 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

12:47:37 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

12:47:37 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

12:47:37 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

12:47:37 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

12:47:37 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:47:37 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:47:37 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

12:47:37 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

12:47:37 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:47:37 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

12:47:38 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

12:47:38 [Debug] () Hosting started

12:47:38 [Debug] () Loaded hosting startup assembly "BackEnd"

12:47:38 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

12:47:38 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

12:47:38 [Debug] () Wildcard detected, all requests with hosts will be allowed.

12:47:38 [Information] () No cached response available for this request.

12:47:38 [Debug] () The request path "" does not match the path filter

12:47:38 [Debug] () No candidates found for the request path '"/api/values"'

12:47:38 [Debug] () Request did not match any endpoints

12:47:38 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:47:38 [Information] () The response could not be cached for this request.

12:47:38 [Debug] () Connection ID ""18230571301796315262"" disconnecting.

12:47:38 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

12:47:38 [Information] () No cached response available for this request.

12:47:38 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:47:38 [Information] () The response could not be cached for this request.

12:47:38 [Debug] () Connection ID ""18230571293206380615"" disconnecting.

12:47:38 [Information] () Request finished in 203.9108ms 302 

12:47:38 [Information] () Request finished in 5.4859ms 301 

12:47:38 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

12:47:38 [Information] () No cached response available for this request.

12:47:38 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:47:38 [Information] () The response has been cached.

12:47:38 [Information] () Request finished in 212.9597ms 200 text/html

12:47:38 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

12:47:38 [Information] () No cached response available for this request.

12:47:38 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

12:47:38 [Information] () No cached response available for this request.

12:47:38 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

12:47:38 [Information] () No cached response available for this request.

12:47:38 [Information] () The file "/swagger-ui-bundle.js" was not modified

12:47:38 [Information] () The file "/swagger-ui.css" was not modified

12:47:38 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

12:47:38 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

12:47:38 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

12:47:38 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

12:47:38 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:47:38 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:47:38 [Information] () The response could not be cached for this request.

12:47:38 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

12:47:38 [Information] () The response could not be cached for this request.

12:47:38 [Information] () The response could not be cached for this request.

12:47:38 [Information] () Request finished in 10.2204ms 304 application/javascript

12:47:38 [Information] () Request finished in 11.9712ms 304 text/css

12:47:38 [Information] () Request finished in 10.7886ms 304 application/javascript

12:47:39 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

12:47:39 [Information] () No cached response available for this request.

12:47:39 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:47:39 [Information] () The response has been cached.

12:47:39 [Information] () Request finished in 334.4138ms 200 application/json;charset=utf-8

12:47:42 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:47:42 [Information] () No cached response available for this request.

12:47:42 [Debug] () The request path "" does not match the path filter

12:47:42 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

12:47:42 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

12:47:42 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

12:47:42 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

12:47:42 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:47:42 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:47:42 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:47:42 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:47:42 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:47:42 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:47:42 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:47:42 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:47:42 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

12:47:42 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

12:47:42 [Debug] () GetConferencesForFollowingFiveDays was called

12:47:42 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

12:47:42 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

12:47:42 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

12:47:42 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

12:47:42 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

12:47:42 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

12:47:42 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

12:47:42 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:47:42 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

12:47:42 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

12:47:42 [Debug] () Including navigation: '"[c].Sessions"'

12:47:42 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

12:47:42 [Debug] () Including navigation: '"[c].Tracks"'

12:47:42 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

12:47:42 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

12:47:42 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

12:47:42 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:47:42 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:42 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:42 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:47:42 [Information] () Executed DbCommand ("15"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

12:47:43 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:47:43 [Information] () Executed DbCommand ("13"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

12:47:43 [Debug] () A data reader was disposed.

12:47:43 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:47:43 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

12:47:43 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:47:43 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

12:47:43 [Debug] () A data reader was disposed.

12:47:43 [Debug] () A data reader was disposed.

12:47:43 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:47:43 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

12:47:43 [Debug] () A data reader was disposed.

12:47:43 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:47:43 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

12:47:43 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:47:43 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

12:47:43 [Debug] () A data reader was disposed.

12:47:43 [Debug] () A data reader was disposed.

12:47:43 [Debug] () A data reader was disposed.

12:47:43 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:43 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:43 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 779.7527ms.

12:47:43 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:47:43 [Debug] () No information found on request to perform content negotiation.

12:47:43 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:47:43 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:47:43 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:47:43 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:47:43 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:47:43 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 961.0939ms

12:47:43 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

12:47:43 [Information] () The response has been cached.

12:47:43 [Debug] () '"ApplicationDbContext"' disposed.

12:47:43 [Information] () Request finished in 986.6168ms 200 application/json; charset=utf-8

12:47:45 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:47:45 [Information] () Serving response from cache.

12:47:45 [Information] () Request finished in 16.8681ms 200 application/json; charset=utf-8

12:47:45 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

12:47:45 [Information] () No cached response available for this request.

12:47:45 [Debug] () The request path "" does not match the path filter

12:47:45 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

12:47:45 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

12:47:45 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:47:45 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:47:45 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

12:47:45 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:47:45 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:47:45 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:47:45 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:47:45 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:47:45 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:47:45 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:47:45 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:47:45 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:47:45 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:47:45 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:47:45 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:47:45 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:47:45 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:47:45 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:47:45 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:47:45 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:47:45 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:47:45 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:47:45 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:47:45 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:47:45 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

12:47:45 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

12:47:45 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

12:47:45 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:47:45 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

12:47:45 [Debug] () Including navigation: '"[s].Track"'

12:47:45 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

12:47:45 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

12:47:45 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

12:47:45 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

12:47:45 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

12:47:45 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:45 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:45 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:47:45 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

12:47:45 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:47:45 [Information] () Executed DbCommand ("12"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

12:47:45 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:47:45 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

12:47:45 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:47:45 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

12:47:45 [Debug] () A data reader was disposed.

12:47:45 [Debug] () A data reader was disposed.

12:47:45 [Debug] () A data reader was disposed.

12:47:45 [Debug] () A data reader was disposed.

12:47:45 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:45 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:45 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 208.9191ms.

12:47:45 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:47:45 [Debug] () No information found on request to perform content negotiation.

12:47:45 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:47:45 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:47:45 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:47:45 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:47:45 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:47:45 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 241.422ms

12:47:45 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

12:47:45 [Information] () The response has been cached.

12:47:45 [Debug] () '"ApplicationDbContext"' disposed.

12:47:45 [Information] () Request finished in 254.7183ms 200 application/json; charset=utf-8

12:47:50 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

12:47:50 [Information] () Serving response from cache.

12:47:50 [Information] () Request finished in 1.8606ms 200 application/json; charset=utf-8

12:47:51 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/2  

12:47:51 [Information] () No cached response available for this request.

12:47:51 [Debug] () The request path "" does not match the path filter

12:47:51 [Debug] () 1 candidate(s) found for the request path '"/api/conferences/2"'

12:47:51 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is valid for the request path '"/api/conferences/2"'

12:47:51 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"'

12:47:51 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"'

12:47:51 [Information] () Route matched with "{action = \"GetConference\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[ConferenceDTO.ConferenceResponse]] GetConference(Int32)" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

12:47:51 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:47:51 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:47:51 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:47:51 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:47:51 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:47:51 [Debug] () Attempting to bind parameter '"id"' of type '"System.Int32"' ...

12:47:51 [Debug] () Attempting to bind parameter '"id"' of type '"System.Int32"' using the name '"id"' in request data ...

12:47:51 [Debug] () Done attempting to bind parameter '"id"' of type '"System.Int32"'.

12:47:51 [Debug] () Done attempting to bind parameter '"id"' of type '"System.Int32"'.

12:47:51 [Debug] () Attempting to validate the bound parameter '"id"' of type '"System.Int32"' ...

12:47:51 [Debug] () Done attempting to validate the bound parameter '"id"' of type '"System.Int32"'.

12:47:51 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConference (BackEnd)" - Validation state: Valid

12:47:51 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:47:51 [Debug] () Compiling query model: "
"'"(from Conference e in DbSet<Conference>
where Property([e], \"ID\") == __get_Item_0
select [e]).FirstOrDefault()"'

12:47:51 [Debug] () Optimized query model: "
"'"(from Conference e in DbSet<Conference>
where Property([e], \"ID\") == __get_Item_0
select [e]).FirstOrDefault()"'

12:47:51 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Conference> _InterceptExceptions(
|__ source: IAsyncEnumerable<Conference> _TrackEntities(
|   |__ results: IAsyncEnumerable<Conference> _ToSequence(() => Task<Conference> FirstOrDefault(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT TOP(1) [e].[ID], [e].[EndTime], [e].[Name], [e].[StartTime], [e].[Url]
|   |   |   |       FROM [Conferences] AS [e]
|   |   |   |       WHERE [e].[ID] = @__get_Item_0, 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ cancellationToken: queryContext.CancellationToken)), 
|   |__ queryContext: queryContext, 
|   |__ entityTrackingInfos: { itemType: Conference }, 
|   |__ entityAccessors: List<Func<Conference, object>> 
|       { 
|           Func<Conference, Conference>, 
|       }), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: queryContext)"

12:47:51 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:51 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:51 [Debug] () Executing DbCommand [Parameters=["@__get_Item_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT TOP(1) [e].[ID], [e].[EndTime], [e].[Name], [e].[StartTime], [e].[Url]
FROM [Conferences] AS [e]
WHERE [e].[ID] = @__get_Item_0"

12:47:51 [Information] () Executed DbCommand ("2"ms) [Parameters=["@__get_Item_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT TOP(1) [e].[ID], [e].[EndTime], [e].[Name], [e].[StartTime], [e].[Url]
FROM [Conferences] AS [e]
WHERE [e].[ID] = @__get_Item_0"

12:47:51 [Debug] () A data reader was disposed.

12:47:51 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:51 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:51 [Debug] () Context '"ApplicationDbContext"' started tracking '"Conference"' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.

12:47:51 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConference (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 49.0331ms.

12:47:51 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:47:51 [Debug] () No information found on request to perform content negotiation.

12:47:51 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:47:51 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:47:51 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:47:51 [Information] () Executing ObjectResult, writing value of type '"ConferenceDTO.ConferenceResponse"'.

12:47:51 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:47:51 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConference (BackEnd)" in 50.6766ms

12:47:51 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"'

12:47:51 [Information] () The response has been cached.

12:47:51 [Debug] () '"ApplicationDbContext"' disposed.

12:47:51 [Information] () Request finished in 56.844ms 200 application/json; charset=utf-8

12:47:51 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/tracks/2  

12:47:51 [Information] () No cached response available for this request.

12:47:51 [Debug] () The request path "" does not match the path filter

12:47:51 [Debug] () 1 candidate(s) found for the request path '"/api/tracks/2"'

12:47:51 [Debug] () Endpoint '"BackEnd.Controllers.TracksController.Get (BackEnd)"' with route pattern '"api/Tracks/{conferenceId:int}"' is valid for the request path '"/api/tracks/2"'

12:47:51 [Debug] () Request matched endpoint '"BackEnd.Controllers.TracksController.Get (BackEnd)"'

12:47:51 [Information] () Executing endpoint '"BackEnd.Controllers.TracksController.Get (BackEnd)"'

12:47:51 [Information] () Route matched with "{action = \"Get\", controller = \"Tracks\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.TrackResponse]]] Get(Int32)" on controller "BackEnd.Controllers.TracksController" ("BackEnd").

12:47:51 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

12:47:51 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

12:47:51 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

12:47:51 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

12:47:51 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

12:47:51 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

12:47:51 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

12:47:51 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:47:51 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

12:47:51 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

12:47:51 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

12:47:51 [Information] () Executing action method "BackEnd.Controllers.TracksController.Get (BackEnd)" - Validation state: Valid

12:47:51 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

12:47:51 [Debug] () Compiling query model: "
"'"from Track t in 
    (from Track <generated>_1 in DbSet<Track>
    select [<generated>_1]).AsNoTracking()
where [t].ConferenceId == __conferenceId_0
select [t]"'

12:47:51 [Debug] () Optimized query model: "
"'"from Track t in DbSet<Track>
where [t].ConferenceId == __conferenceId_0
select [t]"'

12:47:51 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Track> _FastQuery(
|__ relationalQueryContext: (RelationalQueryContext)queryContext, 
|__ shaperCommandContext: SelectExpression: 
|       SELECT [t].[ID], [t].[ConferenceId], [t].[Name]
|       FROM [Tracks] AS [t]
|       WHERE [t].[ConferenceId] = @__conferenceId_0, 
|__ materializer: (DbDataReader dataReader | DbContext context) => 
|   {
|       instance = new Track()
|       instance.<ID>k__BackingField = int dataReader.GetInt32(0)
|       instance.<ConferenceId>k__BackingField = int dataReader.GetInt32(1)
|       instance.<Name>k__BackingField = string dataReader.GetString(2)
|       return instance
|   }, 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>)"

12:47:51 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:51 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:51 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [t].[ID], [t].[ConferenceId], [t].[Name]
FROM [Tracks] AS [t]
WHERE [t].[ConferenceId] = @__conferenceId_0"

12:47:51 [Information] () Executed DbCommand ("2"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [t].[ID], [t].[ConferenceId], [t].[Name]
FROM [Tracks] AS [t]
WHERE [t].[ConferenceId] = @__conferenceId_0"

12:47:51 [Debug] () A data reader was disposed.

12:47:51 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:51 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

12:47:51 [Information] () Executed action method "BackEnd.Controllers.TracksController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 18.0283ms.

12:47:51 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

12:47:51 [Debug] () No information found on request to perform content negotiation.

12:47:51 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

12:47:51 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

12:47:51 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

12:47:51 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.TrackResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

12:47:51 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:47:51 [Information] () Executed action "BackEnd.Controllers.TracksController.Get (BackEnd)" in 21.8016ms

12:47:51 [Information] () Executed endpoint '"BackEnd.Controllers.TracksController.Get (BackEnd)"'

12:47:51 [Information] () The response has been cached.

12:47:51 [Debug] () '"ApplicationDbContext"' disposed.

12:47:51 [Information] () Request finished in 26.1304ms 200 application/json; charset=utf-8

12:47:51 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/track/0  

12:47:51 [Information] () No cached response available for this request.

12:47:51 [Debug] () The request path "" does not match the path filter

12:47:51 [Debug] () No candidates found for the request path '"/api/sessions/track/0"'

12:47:51 [Debug] () Request did not match any endpoints

12:47:51 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

12:47:51 [Information] () The response could not be cached for this request.

12:47:51 [Information] () Request finished in 0.6231ms 302 

12:47:51 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/swagger  

12:47:51 [Information] () No cached response available for this request.

12:47:51 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

12:47:51 [Information] () The response could not be cached for this request.

12:47:51 [Information] () Request finished in 0.4886ms 301 

12:47:51 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/swagger/index.html  

12:47:51 [Information] () No cached response available for this request.

12:47:51 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

12:47:51 [Information] () The response has been cached.

12:47:51 [Information] () Request finished in 1.3113ms 200 text/html

13:58:56 [Information] () Hello World!

13:58:58 [Debug] () Hosting starting

13:58:58 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

13:58:58 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

13:58:58 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

13:58:58 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

13:58:58 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

13:58:58 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

13:58:58 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

13:58:58 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

13:58:58 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

13:58:58 [Debug] () Decrypting secret element using Windows DPAPI.

13:58:58 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

13:58:58 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

13:58:58 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

13:58:58 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

13:58:58 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

13:58:58 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

13:58:58 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

13:58:59 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

13:58:59 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

13:58:59 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

13:58:59 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

13:58:59 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

13:58:59 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

13:58:59 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

13:58:59 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

13:58:59 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

13:58:59 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

13:58:59 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

13:58:59 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

13:58:59 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

13:58:59 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

13:58:59 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

13:58:59 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

13:58:59 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

13:58:59 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

13:58:59 [Debug] () Hosting started

13:58:59 [Debug] () Loaded hosting startup assembly "BackEnd"

13:58:59 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

13:58:59 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

13:58:59 [Debug] () Wildcard detected, all requests with hosts will be allowed.

13:58:59 [Information] () No cached response available for this request.

13:58:59 [Debug] () The request path "" does not match the path filter

13:58:59 [Debug] () No candidates found for the request path '"/api/values"'

13:58:59 [Debug] () Request did not match any endpoints

13:59:00 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

13:59:00 [Information] () The response could not be cached for this request.

13:59:00 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

13:59:00 [Debug] () Connection ID ""18158513703463419981"" disconnecting.

13:59:00 [Information] () No cached response available for this request.

13:59:00 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

13:59:00 [Information] () The response could not be cached for this request.

13:59:00 [Debug] () Connection ID ""18302628887244308527"" disconnecting.

13:59:00 [Information] () Request finished in 194.6897ms 302 

13:59:00 [Information] () Request finished in 4.4111ms 301 

13:59:00 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

13:59:00 [Information] () No cached response available for this request.

13:59:00 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

13:59:00 [Information] () The response has been cached.

13:59:00 [Information] () Request finished in 206.2763ms 200 text/html

13:59:00 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

13:59:00 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

13:59:00 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

13:59:00 [Information] () No cached response available for this request.

13:59:00 [Information] () No cached response available for this request.

13:59:00 [Information] () No cached response available for this request.

13:59:00 [Information] () The file "/swagger-ui-bundle.js" was not modified

13:59:00 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

13:59:00 [Information] () The file "/swagger-ui.css" was not modified

13:59:00 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

13:59:00 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

13:59:00 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

13:59:00 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

13:59:00 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

13:59:00 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

13:59:00 [Information] () The response could not be cached for this request.

13:59:00 [Information] () The response could not be cached for this request.

13:59:00 [Information] () The response could not be cached for this request.

13:59:00 [Information] () Request finished in 13.6819ms 304 application/javascript

13:59:00 [Information] () Request finished in 13.6643ms 304 text/css

13:59:00 [Information] () Request finished in 13.7786ms 304 application/javascript

13:59:00 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

13:59:00 [Information] () No cached response available for this request.

13:59:00 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

13:59:00 [Information] () The response has been cached.

13:59:00 [Information] () Request finished in 240.1965ms 200 application/json;charset=utf-8

13:59:01 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/attendees/a@a  

13:59:01 [Information] () No cached response available for this request.

13:59:01 [Debug] () The request path "" does not match the path filter

13:59:01 [Debug] () 1 candidate(s) found for the request path '"/api/attendees/a@a"'

13:59:01 [Debug] () Endpoint '"BackEnd.AttendeesController.Get (BackEnd)"' with route pattern '"api/Attendees/{username}"' is valid for the request path '"/api/attendees/a@a"'

13:59:01 [Debug] () Request matched endpoint '"BackEnd.AttendeesController.Get (BackEnd)"'

13:59:01 [Information] () Executing endpoint '"BackEnd.AttendeesController.Get (BackEnd)"'

13:59:01 [Information] () Route matched with "{action = \"Get\", controller = \"Attendees\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[ConferenceDTO.AttendeeResponse]] Get(System.String)" on controller "BackEnd.AttendeesController" ("BackEnd").

13:59:01 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

13:59:01 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

13:59:01 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

13:59:01 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

13:59:01 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

13:59:01 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

13:59:02 [Debug] () Attempting to bind parameter '"username"' of type '"System.String"' ...

13:59:02 [Debug] () Attempting to bind parameter '"username"' of type '"System.String"' using the name '"username"' in request data ...

13:59:02 [Debug] () Done attempting to bind parameter '"username"' of type '"System.String"'.

13:59:02 [Debug] () Done attempting to bind parameter '"username"' of type '"System.String"'.

13:59:02 [Debug] () Attempting to validate the bound parameter '"username"' of type '"System.String"' ...

13:59:02 [Debug] () Done attempting to validate the bound parameter '"username"' of type '"System.String"'.

13:59:02 [Information] () Executing action method "BackEnd.AttendeesController.Get (BackEnd)" - Validation state: Valid

13:59:02 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

13:59:02 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

13:59:02 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

13:59:02 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

13:59:02 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

13:59:02 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

13:59:02 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

13:59:02 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

13:59:02 [Debug] () Compiling query model: "
"'"(from Attendee a in 
    (from Attendee <generated>_1 in DbSet<Attendee>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"SessionAttendees.Session\")
    .Include(\"ConferenceAttendees.Conference\")
    .Include(\"AttendeeImages.Image\")
where [a].UserName == __username_0
select [a]).SingleOrDefault()"'

13:59:02 [Debug] () Including navigation: '"[a].SessionAttendees.Session"'

13:59:02 [Debug] () Including navigation: '"[a].ConferenceAttendees.Conference"'

13:59:02 [Debug] () Including navigation: '"[a].AttendeeImages.Image"'

13:59:02 [Debug] () Optimized query model: "
"'"(from Attendee a in DbSet<Attendee>
where [a].UserName == __username_0
order by EF.Property(?[a]?, \"ID\") asc
select Attendee Result(Task<Attendee> _IncludeAsync(
    queryContext: queryContext, 
    entity: [a], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Attendee entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Attendee.SessionAttendees, 
                inverseNavigation: SessionAttendee.Attendee, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Attendee>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee a.SessionAttendees in DbSet<SessionAttendee>
                    join Session s.Session in DbSet<Session>
                    on Property([a.SessionAttendees], \"SessionId\") equals Property([s.Session], \"ID\")
                    join AnonymousObject _a in 
                        (from Attendee a in DbSet<Attendee>
                        where [a].UserName == __username_0
                        order by EF.Property(?[a]?, \"ID\") asc
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[a]?, \"ID\") })).Take(1)
                    on Property([a.SessionAttendees], \"AttendeeId\") equals (Nullable<int>)object [_a].GetValue(0)
                    order by object [_a].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [a.SessionAttendees], 
                        included: new object[]{ [s.Session] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Session = (Session)included[0]
                                return bool ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Attendee p | SessionAttendee d) => p.ID == d.AttendeeId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Attendee.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Attendee, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Attendee>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee a.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Conference c.Conference in DbSet<Conference>
                    on Property([a.ConferenceAttendees], \"ConferenceId\") equals Property([c.Conference], \"ID\")
                    join AnonymousObject _a in 
                        (from Attendee a in DbSet<Attendee>
                        where [a].UserName == __username_0
                        order by EF.Property(?[a]?, \"ID\") asc
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[a]?, \"ID\") })).Take(1)
                    on Property([a.ConferenceAttendees], \"AttendeeId\") equals (Nullable<int>)object [_a].GetValue(0)
                    order by object [_a].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [a.ConferenceAttendees], 
                        included: new object[]{ [c.Conference] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Conference = (Conference)included[0]
                                return bool ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Attendee p | ConferenceAttendee d) => p.ID == d.AttendeeId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Attendee.AttendeeImages, 
                inverseNavigation: AttendeeImage.Attendee, 
                targetEntityType: EntityType: AttendeeImage, 
                clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<AttendeeImage>, AttendeeImage>, 
                inverseClrPropertySetter: ClrPropertySetter<AttendeeImage, Attendee>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<AttendeeImage>>)() => 
                    from AttendeeImage a.AttendeeImages in DbSet<AttendeeImage>
                    join Image a.Image in DbSet<Image>
                    on Property([a.AttendeeImages], \"ImageId\") equals Property([a.Image], \"ID\")
                    join AnonymousObject _a in 
                        (from Attendee a in DbSet<Attendee>
                        where [a].UserName == __username_0
                        order by EF.Property(?[a]?, \"ID\") asc
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[a]?, \"ID\") })).Take(1)
                    on Property([a.AttendeeImages], \"AttendeeId\") equals (Nullable<int>)object [_a].GetValue(0)
                    order by object [_a].GetValue(0) asc
                    select AttendeeImage _Include(
                        queryContext: queryContext, 
                        entity: [a.AttendeeImages], 
                        included: new object[]{ [a.Image] }, 
                        fixup: (QueryContext queryContext | AttendeeImage entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Image = (Image)included[0]
                                return bool ClrICollectionAccessor<Image, ICollection<AttendeeImage>, AttendeeImage>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Attendee p | AttendeeImage d) => p.ID == d.AttendeeId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))).SingleOrDefault()"'

13:59:02 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Attendee> _InterceptExceptions(
|__ source: IAsyncEnumerable<Attendee> _ToSequence(() => Task<Attendee> SingleOrDefault(
|   |__ source: IAsyncEnumerable<Attendee> _SelectAsync(
|   |   |__ source: IAsyncEnumerable<Attendee> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT TOP(2) [a].[ID], [a].[EmailAddress], [a].[FirstName], [a].[LastName], [a].[Url], [a].[UserName]
|   |   |   |       FROM [Attendees] AS [a]
|   |   |   |       WHERE [a].[UserName] = @__username_0
|   |   |   |       ORDER BY [a].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Attendee>), 
|   |   |__ selector: (Attendee a | CancellationToken ct) => Task<Attendee> _ExecuteAsync(
|   |       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Attendee> _IncludeAsync(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ entity: a, 
|   |       |   |__ included: new object[]{ }, 
|   |       |   |__ fixup: (QueryContext queryContext | Attendee entity | object[] included | CancellationToken ct) => 
|   |       |   |   {
|   |       |   |       return Task _AwaitMany(new Func<Task>[]
|   |       |   |       { 
|   |       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|   |       |   |           |__ includeId: 0, 
|   |       |   |           |__ navigation: Attendee.SessionAttendees, 
|   |       |   |           |__ inverseNavigation: SessionAttendee.Attendee, 
|   |       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|   |       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>, 
|   |       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Attendee>, 
|   |       |   |           |__ tracking: False, 
|   |       |   |           |__ instance: entity, 
|   |       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|   |       |   |           |   |__ queryContext: queryContext, 
|   |       |   |           |   |__ shaperCommandContext: SelectExpression: 
|   |       |   |           |   |       SELECT [a.SessionAttendees].[SessionId], [a.SessionAttendees].[AttendeeId], [s.Session].[ID], [s.Session].[Abstract], [s.Session].[ConferenceId], [s.Session].[EndTime], [s.Session].[StartTime], [s.Session].[Title], [s.Session].[TrackId], [s.Session].[Url]
|   |       |   |           |   |       FROM [SessionAttendee] AS [a.SessionAttendees]
|   |       |   |           |   |       INNER JOIN [Sessions] AS [s.Session] ON [a.SessionAttendees].[SessionId] = [s.Session].[ID]
|   |       |   |           |   |       INNER JOIN (
|   |       |   |           |   |           SELECT TOP(1) [a0].[ID]
|   |       |   |           |   |           FROM [Attendees] AS [a0]
|   |       |   |           |   |           WHERE [a0].[UserName] = @__username_0
|   |       |   |           |   |           ORDER BY [a0].[ID]
|   |       |   |           |   |       ) AS [t] ON [a.SessionAttendees].[AttendeeId] = [t].[ID]
|   |       |   |           |   |       ORDER BY [t].[ID], 
|   |       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Session> t0) => SessionAttendee _Include(
|   |       |   |           |       |__ queryContext: queryContext, 
|   |       |   |           |       |__ entity: t0.Outer, 
|   |       |   |           |       |__ included: new object[]{ t0.Inner }, 
|   |       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|   |       |   |           |           {
|   |       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|   |       |   |           |               {
|   |       |   |           |                   entity.Session = (Session)included[0]
|   |       |   |           |                   return bool ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>.Add(
|   |       |   |           |                       instance: included[0], 
|   |       |   |           |                       value: entity)
|   |       |   |           |               } : 
|   |       |   |           |               {
|   |       |   |           |                   return default(bool)
|   |       |   |           |               }
|   |       |   |           |           })), 
|   |       |   |           |__ joinPredicate: (Attendee p | SessionAttendee d) => p.ID == d.AttendeeId, 
|   |       |   |           |__ cancellationToken: ct), 
|   |       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|   |       |   |           |__ includeId: 1, 
|   |       |   |           |__ navigation: Attendee.ConferenceAttendees, 
|   |       |   |           |__ inverseNavigation: ConferenceAttendee.Attendee, 
|   |       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|   |       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|   |       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Attendee>, 
|   |       |   |           |__ tracking: False, 
|   |       |   |           |__ instance: entity, 
|   |       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _ShapedQuery(
|   |       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|   |       |   |           |   |__ shaperCommandContext: SelectExpression: 
|   |       |   |           |   |       SELECT [a.ConferenceAttendees].[ConferenceId], [a.ConferenceAttendees].[AttendeeId], [c.Conference].[ID], [c.Conference].[EndTime], [c.Conference].[Name], [c.Conference].[StartTime], [c.Conference].[Url]
|   |       |   |           |   |       FROM [ConferenceAttendee] AS [a.ConferenceAttendees]
|   |       |   |           |   |       INNER JOIN [Conferences] AS [c.Conference] ON [a.ConferenceAttendees].[ConferenceId] = [c.Conference].[ID]
|   |       |   |           |   |       INNER JOIN (
|   |       |   |           |   |           SELECT TOP(1) [a1].[ID]
|   |       |   |           |   |           FROM [Attendees] AS [a1]
|   |       |   |           |   |           WHERE [a1].[UserName] = @__username_0
|   |       |   |           |   |           ORDER BY [a1].[ID]
|   |       |   |           |   |       ) AS [t0] ON [a.ConferenceAttendees].[AttendeeId] = [t0].[ID]
|   |       |   |           |   |       ORDER BY [t0].[ID], 
|   |       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<ConferenceAttendee, Conference> t0) => ConferenceAttendee _Include(
|   |       |   |           |       |__ queryContext: queryContext, 
|   |       |   |           |       |__ entity: t0.Outer, 
|   |       |   |           |       |__ included: new object[]{ t0.Inner }, 
|   |       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|   |       |   |           |           {
|   |       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|   |       |   |           |               {
|   |       |   |           |                   entity.Conference = (Conference)included[0]
|   |       |   |           |                   return bool ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|   |       |   |           |                       instance: included[0], 
|   |       |   |           |                       value: entity)
|   |       |   |           |               } : 
|   |       |   |           |               {
|   |       |   |           |                   return default(bool)
|   |       |   |           |               }
|   |       |   |           |           })), 
|   |       |   |           |__ joinPredicate: (Attendee p | ConferenceAttendee d) => p.ID == d.AttendeeId, 
|   |       |   |           |__ cancellationToken: ct), 
|   |       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|   |       |   |           |__ includeId: 2, 
|   |       |   |           |__ navigation: Attendee.AttendeeImages, 
|   |       |   |           |__ inverseNavigation: AttendeeImage.Attendee, 
|   |       |   |           |__ targetEntityType: EntityType: AttendeeImage, 
|   |       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<AttendeeImage>, AttendeeImage>, 
|   |       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<AttendeeImage, Attendee>, 
|   |       |   |           |__ tracking: False, 
|   |       |   |           |__ instance: entity, 
|   |       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<AttendeeImage>>)() => IAsyncEnumerable<AttendeeImage> _ShapedQuery(
|   |       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|   |       |   |           |   |__ shaperCommandContext: SelectExpression: 
|   |       |   |           |   |       SELECT [a.AttendeeImages].[AttendeeId], [a.AttendeeImages].[ImageId], [a.Image].[ID], [a.Image].[Content], [a.Image].[ImageType], [a.Image].[Name], [a.Image].[UploadDate], [a.Image].[Url]
|   |       |   |           |   |       FROM [AttendeeImage] AS [a.AttendeeImages]
|   |       |   |           |   |       INNER JOIN [Images] AS [a.Image] ON [a.AttendeeImages].[ImageId] = [a.Image].[ID]
|   |       |   |           |   |       INNER JOIN (
|   |       |   |           |   |           SELECT TOP(1) [a2].[ID]
|   |       |   |           |   |           FROM [Attendees] AS [a2]
|   |       |   |           |   |           WHERE [a2].[UserName] = @__username_0
|   |       |   |           |   |           ORDER BY [a2].[ID]
|   |       |   |           |   |       ) AS [t1] ON [a.AttendeeImages].[AttendeeId] = [t1].[ID]
|   |       |   |           |   |       ORDER BY [t1].[ID], 
|   |       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<AttendeeImage, Image> t0) => AttendeeImage _Include(
|   |       |   |           |       |__ queryContext: queryContext, 
|   |       |   |           |       |__ entity: t0.Outer, 
|   |       |   |           |       |__ included: new object[]{ t0.Inner }, 
|   |       |   |           |       |__ fixup: (QueryContext queryContext | AttendeeImage entity | object[] included) => 
|   |       |   |           |           {
|   |       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|   |       |   |           |               {
|   |       |   |           |                   entity.Image = (Image)included[0]
|   |       |   |           |                   return bool ClrICollectionAccessor<Image, ICollection<AttendeeImage>, AttendeeImage>.Add(
|   |       |   |           |                       instance: included[0], 
|   |       |   |           |                       value: entity)
|   |       |   |           |               } : 
|   |       |   |           |               {
|   |       |   |           |                   return default(bool)
|   |       |   |           |               }
|   |       |   |           |           })), 
|   |       |   |           |__ joinPredicate: (Attendee p | AttendeeImage d) => p.ID == d.AttendeeId, 
|   |       |   |           |__ cancellationToken: ct) 
|   |       |   |       })
|   |       |   |   }, 
|   |       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|   |       |__ selector: (object[] results) => (Attendee)results[0])), 
|   |__ cancellationToken: Unhandled parameter: queryContext.CancellationToken)), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

13:59:02 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

13:59:02 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

13:59:02 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT TOP(2) [a].[ID], [a].[EmailAddress], [a].[FirstName], [a].[LastName], [a].[Url], [a].[UserName]
FROM [Attendees] AS [a]
WHERE [a].[UserName] = @__username_0
ORDER BY [a].[ID]"

13:59:02 [Information] () Executed DbCommand ("15"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT TOP(2) [a].[ID], [a].[EmailAddress], [a].[FirstName], [a].[LastName], [a].[Url], [a].[UserName]
FROM [Attendees] AS [a]
WHERE [a].[UserName] = @__username_0
ORDER BY [a].[ID]"

13:59:02 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.SessionAttendees].[SessionId], [a.SessionAttendees].[AttendeeId], [s.Session].[ID], [s.Session].[Abstract], [s.Session].[ConferenceId], [s.Session].[EndTime], [s.Session].[StartTime], [s.Session].[Title], [s.Session].[TrackId], [s.Session].[Url]
FROM [SessionAttendee] AS [a.SessionAttendees]
INNER JOIN [Sessions] AS [s.Session] ON [a.SessionAttendees].[SessionId] = [s.Session].[ID]
INNER JOIN (
    SELECT TOP(1) [a0].[ID]
    FROM [Attendees] AS [a0]
    WHERE [a0].[UserName] = @__username_0
    ORDER BY [a0].[ID]
) AS [t] ON [a.SessionAttendees].[AttendeeId] = [t].[ID]
ORDER BY [t].[ID]"

13:59:02 [Information] () Executed DbCommand ("12"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.SessionAttendees].[SessionId], [a.SessionAttendees].[AttendeeId], [s.Session].[ID], [s.Session].[Abstract], [s.Session].[ConferenceId], [s.Session].[EndTime], [s.Session].[StartTime], [s.Session].[Title], [s.Session].[TrackId], [s.Session].[Url]
FROM [SessionAttendee] AS [a.SessionAttendees]
INNER JOIN [Sessions] AS [s.Session] ON [a.SessionAttendees].[SessionId] = [s.Session].[ID]
INNER JOIN (
    SELECT TOP(1) [a0].[ID]
    FROM [Attendees] AS [a0]
    WHERE [a0].[UserName] = @__username_0
    ORDER BY [a0].[ID]
) AS [t] ON [a.SessionAttendees].[AttendeeId] = [t].[ID]
ORDER BY [t].[ID]"

13:59:02 [Debug] () A data reader was disposed.

13:59:02 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.ConferenceAttendees].[ConferenceId], [a.ConferenceAttendees].[AttendeeId], [c.Conference].[ID], [c.Conference].[EndTime], [c.Conference].[Name], [c.Conference].[StartTime], [c.Conference].[Url]
FROM [ConferenceAttendee] AS [a.ConferenceAttendees]
INNER JOIN [Conferences] AS [c.Conference] ON [a.ConferenceAttendees].[ConferenceId] = [c.Conference].[ID]
INNER JOIN (
    SELECT TOP(1) [a1].[ID]
    FROM [Attendees] AS [a1]
    WHERE [a1].[UserName] = @__username_0
    ORDER BY [a1].[ID]
) AS [t0] ON [a.ConferenceAttendees].[AttendeeId] = [t0].[ID]
ORDER BY [t0].[ID]"

13:59:02 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.ConferenceAttendees].[ConferenceId], [a.ConferenceAttendees].[AttendeeId], [c.Conference].[ID], [c.Conference].[EndTime], [c.Conference].[Name], [c.Conference].[StartTime], [c.Conference].[Url]
FROM [ConferenceAttendee] AS [a.ConferenceAttendees]
INNER JOIN [Conferences] AS [c.Conference] ON [a.ConferenceAttendees].[ConferenceId] = [c.Conference].[ID]
INNER JOIN (
    SELECT TOP(1) [a1].[ID]
    FROM [Attendees] AS [a1]
    WHERE [a1].[UserName] = @__username_0
    ORDER BY [a1].[ID]
) AS [t0] ON [a.ConferenceAttendees].[AttendeeId] = [t0].[ID]
ORDER BY [t0].[ID]"

13:59:02 [Debug] () A data reader was disposed.

13:59:02 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.AttendeeImages].[AttendeeId], [a.AttendeeImages].[ImageId], [a.Image].[ID], [a.Image].[Content], [a.Image].[ImageType], [a.Image].[Name], [a.Image].[UploadDate], [a.Image].[Url]
FROM [AttendeeImage] AS [a.AttendeeImages]
INNER JOIN [Images] AS [a.Image] ON [a.AttendeeImages].[ImageId] = [a.Image].[ID]
INNER JOIN (
    SELECT TOP(1) [a2].[ID]
    FROM [Attendees] AS [a2]
    WHERE [a2].[UserName] = @__username_0
    ORDER BY [a2].[ID]
) AS [t1] ON [a.AttendeeImages].[AttendeeId] = [t1].[ID]
ORDER BY [t1].[ID]"

13:59:02 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.AttendeeImages].[AttendeeId], [a.AttendeeImages].[ImageId], [a.Image].[ID], [a.Image].[Content], [a.Image].[ImageType], [a.Image].[Name], [a.Image].[UploadDate], [a.Image].[Url]
FROM [AttendeeImage] AS [a.AttendeeImages]
INNER JOIN [Images] AS [a.Image] ON [a.AttendeeImages].[ImageId] = [a.Image].[ID]
INNER JOIN (
    SELECT TOP(1) [a2].[ID]
    FROM [Attendees] AS [a2]
    WHERE [a2].[UserName] = @__username_0
    ORDER BY [a2].[ID]
) AS [t1] ON [a.AttendeeImages].[AttendeeId] = [t1].[ID]
ORDER BY [t1].[ID]"

13:59:02 [Debug] () A data reader was disposed.

13:59:02 [Debug] () A data reader was disposed.

13:59:02 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

13:59:02 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

13:59:02 [Information] () Executed action method "BackEnd.AttendeesController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 615.7383ms.

13:59:02 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

13:59:02 [Debug] () No information found on request to perform content negotiation.

13:59:02 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

13:59:02 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

13:59:02 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

13:59:02 [Information] () Executing ObjectResult, writing value of type '"ConferenceDTO.AttendeeResponse"'.

13:59:02 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

13:59:02 [Information] () Executed action "BackEnd.AttendeesController.Get (BackEnd)" in 810.4525ms

13:59:02 [Information] () Executed endpoint '"BackEnd.AttendeesController.Get (BackEnd)"'

13:59:02 [Information] () The response has been cached.

13:59:02 [Debug] () '"ApplicationDbContext"' disposed.

13:59:02 [Information] () Request finished in 853.7715ms 200 application/json; charset=utf-8

13:59:03 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

13:59:03 [Information] () No cached response available for this request.

13:59:03 [Debug] () The request path "" does not match the path filter

13:59:03 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

13:59:03 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

13:59:03 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

13:59:03 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

13:59:03 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

13:59:03 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

13:59:03 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

13:59:03 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

13:59:03 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

13:59:03 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

13:59:03 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

13:59:03 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

13:59:03 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

13:59:03 [Debug] () GetConferencesForFollowingFiveDays was called

13:59:03 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 66.2554ms

13:59:03 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

13:59:03 [Error] () An unhandled exception has occurred while executing the request.
System.Exception: TESGFSDJFKSDJFDKSJFLJD:LSFKJDSFL
   at BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays() in C:\Users\n.misic\source\repos\ConferencePlanner\BackEnd\Controllers\ConferencesController.cs:line 45
   at lambda_method(Closure , Object )
   at Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable.Awaiter.GetResult()
   at Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.Invoke(HttpContext context)

14:01:20 [Information] () Hello World!

14:01:22 [Debug] () Hosting starting

14:01:22 [Information] () User profile is available. Using '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys"' as key repository and Windows DPAPI to encrypt keys at rest.

14:01:22 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-81a574f9-37e7-4f3c-bd87-33f03a97c4a2.xml"'.

14:01:22 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-e4e08bee-0c28-4420-9d0c-2e11080fba2a.xml"'.

14:01:22 [Debug] () Reading data from file '"C:\Users\n.misic\AppData\Local\ASP.NET\DataProtection-Keys\key-fc29f7fe-573f-4491-b7f5-fb6502f035cf.xml"'.

14:01:22 [Debug] () Found key {81a574f9-37e7-4f3c-bd87-33f03a97c4a2}.

14:01:22 [Debug] () Found key {e4e08bee-0c28-4420-9d0c-2e11080fba2a}.

14:01:22 [Debug] () Found key {fc29f7fe-573f-4491-b7f5-fb6502f035cf}.

14:01:22 [Debug] () Considering key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} with expiration date 2019-12-01 13:34:35Z as default key.

14:01:23 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

14:01:23 [Debug] () Decrypting secret element using Windows DPAPI.

14:01:23 [Debug] () Forwarded activator type request from "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60" to "Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60"

14:01:23 [Debug] () Opening CNG algorithm '"AES"' from provider 'null' with chaining mode CBC.

14:01:23 [Debug] () Opening CNG algorithm '"SHA256"' from provider 'null' with HMAC.

14:01:23 [Debug] () Using key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} as the default key.

14:01:23 [Debug] () Key ring with default key {fc29f7fe-573f-4491-b7f5-fb6502f035cf} was loaded during application startup.

14:01:23 [Debug] () Compatibility switch "AllowInputFormatterExceptionMessages" in type "MvcJsonOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Compatibility switch "AllowRfc7807CompliantProblemDetailsFormat" in type "MvcXmlOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Compatibility switch "AllowCombiningAuthorizeFilters" in type "MvcOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Compatibility switch "AllowBindingHeaderValuesToNonStringModelTypes" in type "MvcOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Compatibility switch "AllowValidatingTopLevelNodes" in type "MvcOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Compatibility switch "InputFormatterExceptionPolicy" in type "MvcOptions" is using compatibility value MalformedInputExceptions for version Version_2_2

14:01:23 [Debug] () Compatibility switch "SuppressBindingUndefinedValueToEnumType" in type "MvcOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Compatibility switch "EnableEndpointRouting" in type "MvcOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Compatibility switch "MaxValidationDepth" in type "MvcOptions" is using compatibility value 32 for version Version_2_2

14:01:23 [Debug] () Compatibility switch "AllowShortCircuitingValidationWhenNoValidatorsArePresent" in type "MvcOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Compatibility switch "SuppressMapClientErrors" in type "ApiBehaviorOptions" is using default value False

14:01:23 [Debug] () Compatibility switch "SuppressUseValidationProblemDetailsForInvalidModelStateResponses" in type "ApiBehaviorOptions" is using default value False

14:01:23 [Debug] () Compatibility switch "AllowInferringBindingSourceForCollectionTypesAsFromQuery" in type "ApiBehaviorOptions" is using default value False

14:01:23 [Debug] () Compatibility switch "AllowAreas" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Compatibility switch "AllowMappingHeadRequestsToGetHandler" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Compatibility switch "AllowDefaultHandlingForOptionsRequests" in type "RazorPagesOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Compatibility switch "AllowRecompilingViewsOnFileChange" in type "RazorViewEngineOptions" is using explicitly configured value True

14:01:23 [Debug] () Compatibility switch "SuppressTempDataAttributePrefix" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Compatibility switch "AllowRenderingMaxLengthAttribute" in type "MvcViewOptions" is using compatibility value True for version Version_2_2

14:01:23 [Debug] () Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider", "Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"]

14:01:23 [Debug] () Hosting started

14:01:23 [Debug] () Loaded hosting startup assembly "BackEnd"

14:01:23 [Debug] () Loaded hosting startup assembly "Microsoft.AspNetCore.Server.IISIntegration"

14:01:24 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/api/values  

14:01:24 [Debug] () Wildcard detected, all requests with hosts will be allowed.

14:01:24 [Information] () No cached response available for this request.

14:01:24 [Debug] () The request path "" does not match the path filter

14:01:24 [Debug] () No candidates found for the request path '"/api/values"'

14:01:24 [Debug] () Request did not match any endpoints

14:01:24 [Debug] () Response is not cacheable because its status code 302 does not indicate success.

14:01:24 [Information] () The response could not be cached for this request.

14:01:24 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger  

14:01:24 [Information] () No cached response available for this request.

14:01:24 [Debug] () Connection ID ""18014398515387564053"" disconnecting.

14:01:24 [Debug] () Response is not cacheable because its status code 301 does not indicate success.

14:01:24 [Information] () The response could not be cached for this request.

14:01:24 [Debug] () Connection ID ""17942340917054668837"" disconnecting.

14:01:24 [Information] () Request finished in 191.8633ms 302 

14:01:24 [Information] () Request finished in 4.441ms 301 

14:01:24 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/index.html  

14:01:24 [Information] () No cached response available for this request.

14:01:24 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

14:01:24 [Information] () The response has been cached.

14:01:24 [Information] () Request finished in 204.0315ms 200 text/html

14:01:24 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-bundle.js  

14:01:24 [Information] () No cached response available for this request.

14:01:24 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui.css  

14:01:24 [Information] () No cached response available for this request.

14:01:24 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/swagger-ui-standalone-preset.js  

14:01:24 [Information] () No cached response available for this request.

14:01:24 [Information] () The file "/swagger-ui-standalone-preset.js" was not modified

14:01:24 [Information] () The file "/swagger-ui.css" was not modified

14:01:24 [Information] () The file "/swagger-ui-bundle.js" was not modified

14:01:24 [Debug] () Handled. Status code: 304 File: "/swagger-ui-bundle.js"

14:01:24 [Debug] () Handled. Status code: 304 File: "/swagger-ui-standalone-preset.js"

14:01:24 [Debug] () Handled. Status code: 304 File: "/swagger-ui.css"

14:01:24 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

14:01:24 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

14:01:24 [Information] () The response could not be cached for this request.

14:01:24 [Debug] () Response is not cacheable because its status code 304 does not indicate success.

14:01:24 [Information] () The response could not be cached for this request.

14:01:24 [Information] () The response could not be cached for this request.

14:01:24 [Information] () Request finished in 16.8108ms 304 application/javascript

14:01:24 [Information] () Request finished in 8.2174ms 304 application/javascript

14:01:24 [Information] () Request finished in 16.7683ms 304 text/css

14:01:24 [Information] () Request starting HTTP/2.0 GET https://localhost:44354/swagger/v1/swagger.json  

14:01:24 [Information] () No cached response available for this request.

14:01:24 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

14:01:24 [Information] () The response has been cached.

14:01:24 [Information] () Request finished in 225.0547ms 200 application/json;charset=utf-8

14:01:25 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/attendees/a@a  

14:01:25 [Information] () No cached response available for this request.

14:01:25 [Debug] () The request path "" does not match the path filter

14:01:25 [Debug] () 1 candidate(s) found for the request path '"/api/attendees/a@a"'

14:01:25 [Debug] () Endpoint '"BackEnd.AttendeesController.Get (BackEnd)"' with route pattern '"api/Attendees/{username}"' is valid for the request path '"/api/attendees/a@a"'

14:01:25 [Debug] () Request matched endpoint '"BackEnd.AttendeesController.Get (BackEnd)"'

14:01:25 [Information] () Executing endpoint '"BackEnd.AttendeesController.Get (BackEnd)"'

14:01:25 [Information] () Route matched with "{action = \"Get\", controller = \"Attendees\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[ConferenceDTO.AttendeeResponse]] Get(System.String)" on controller "BackEnd.AttendeesController" ("BackEnd").

14:01:25 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

14:01:25 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

14:01:25 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

14:01:25 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

14:01:25 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

14:01:25 [Debug] () An 'IServiceProvider' was created for internal use by Entity Framework.

14:01:25 [Debug] () Attempting to bind parameter '"username"' of type '"System.String"' ...

14:01:25 [Debug] () Attempting to bind parameter '"username"' of type '"System.String"' using the name '"username"' in request data ...

14:01:25 [Debug] () Done attempting to bind parameter '"username"' of type '"System.String"'.

14:01:25 [Debug] () Done attempting to bind parameter '"username"' of type '"System.String"'.

14:01:25 [Debug] () Attempting to validate the bound parameter '"username"' of type '"System.String"' ...

14:01:25 [Debug] () Done attempting to validate the bound parameter '"username"' of type '"System.String"'.

14:01:25 [Information] () Executing action method "BackEnd.AttendeesController.Get (BackEnd)" - Validation state: Valid

14:01:25 [Debug] () The index "{'AttendeeId'}" was not created on entity type '"AttendeeImage"' as the properties are already covered by the index "{'AttendeeId', 'ImageId'}".

14:01:25 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceAttendee"' as the properties are already covered by the index "{'ConferenceId', 'AttendeeId'}".

14:01:25 [Debug] () The index "{'ConferenceId'}" was not created on entity type '"ConferenceSpeaker"' as the properties are already covered by the index "{'ConferenceId', 'SpeakerId'}".

14:01:25 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionAttendee"' as the properties are already covered by the index "{'SessionId', 'AttendeeId'}".

14:01:25 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionSpeaker"' as the properties are already covered by the index "{'SessionId', 'SpeakerId'}".

14:01:25 [Debug] () The index "{'SessionId'}" was not created on entity type '"SessionTag"' as the properties are already covered by the index "{'SessionId', 'TagId'}".

14:01:25 [Debug] () The index "{'SpeakerId'}" was not created on entity type '"SpeakerImage"' as the properties are already covered by the index "{'SpeakerId', 'ImageId'}".

14:01:26 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

14:01:26 [Debug] () Compiling query model: "
"'"(from Attendee a in 
    (from Attendee <generated>_1 in DbSet<Attendee>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"SessionAttendees.Session\")
    .Include(\"ConferenceAttendees.Conference\")
    .Include(\"AttendeeImages.Image\")
where [a].UserName == __username_0
select [a]).SingleOrDefault()"'

14:01:26 [Debug] () Including navigation: '"[a].SessionAttendees.Session"'

14:01:26 [Debug] () Including navigation: '"[a].ConferenceAttendees.Conference"'

14:01:26 [Debug] () Including navigation: '"[a].AttendeeImages.Image"'

14:01:26 [Debug] () Optimized query model: "
"'"(from Attendee a in DbSet<Attendee>
where [a].UserName == __username_0
order by EF.Property(?[a]?, \"ID\") asc
select Attendee Result(Task<Attendee> _IncludeAsync(
    queryContext: queryContext, 
    entity: [a], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Attendee entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Attendee.SessionAttendees, 
                inverseNavigation: SessionAttendee.Attendee, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Attendee>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee a.SessionAttendees in DbSet<SessionAttendee>
                    join Session s.Session in DbSet<Session>
                    on Property([a.SessionAttendees], \"SessionId\") equals Property([s.Session], \"ID\")
                    join AnonymousObject _a in 
                        (from Attendee a in DbSet<Attendee>
                        where [a].UserName == __username_0
                        order by EF.Property(?[a]?, \"ID\") asc
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[a]?, \"ID\") })).Take(1)
                    on Property([a.SessionAttendees], \"AttendeeId\") equals (Nullable<int>)object [_a].GetValue(0)
                    order by object [_a].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [a.SessionAttendees], 
                        included: new object[]{ [s.Session] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Session = (Session)included[0]
                                return bool ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Attendee p | SessionAttendee d) => p.ID == d.AttendeeId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Attendee.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Attendee, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Attendee>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee a.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Conference c.Conference in DbSet<Conference>
                    on Property([a.ConferenceAttendees], \"ConferenceId\") equals Property([c.Conference], \"ID\")
                    join AnonymousObject _a in 
                        (from Attendee a in DbSet<Attendee>
                        where [a].UserName == __username_0
                        order by EF.Property(?[a]?, \"ID\") asc
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[a]?, \"ID\") })).Take(1)
                    on Property([a.ConferenceAttendees], \"AttendeeId\") equals (Nullable<int>)object [_a].GetValue(0)
                    order by object [_a].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [a.ConferenceAttendees], 
                        included: new object[]{ [c.Conference] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Conference = (Conference)included[0]
                                return bool ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Attendee p | ConferenceAttendee d) => p.ID == d.AttendeeId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Attendee.AttendeeImages, 
                inverseNavigation: AttendeeImage.Attendee, 
                targetEntityType: EntityType: AttendeeImage, 
                clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<AttendeeImage>, AttendeeImage>, 
                inverseClrPropertySetter: ClrPropertySetter<AttendeeImage, Attendee>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<AttendeeImage>>)() => 
                    from AttendeeImage a.AttendeeImages in DbSet<AttendeeImage>
                    join Image a.Image in DbSet<Image>
                    on Property([a.AttendeeImages], \"ImageId\") equals Property([a.Image], \"ID\")
                    join AnonymousObject _a in 
                        (from Attendee a in DbSet<Attendee>
                        where [a].UserName == __username_0
                        order by EF.Property(?[a]?, \"ID\") asc
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[a]?, \"ID\") })).Take(1)
                    on Property([a.AttendeeImages], \"AttendeeId\") equals (Nullable<int>)object [_a].GetValue(0)
                    order by object [_a].GetValue(0) asc
                    select AttendeeImage _Include(
                        queryContext: queryContext, 
                        entity: [a.AttendeeImages], 
                        included: new object[]{ [a.Image] }, 
                        fixup: (QueryContext queryContext | AttendeeImage entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Image = (Image)included[0]
                                return bool ClrICollectionAccessor<Image, ICollection<AttendeeImage>, AttendeeImage>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Attendee p | AttendeeImage d) => p.ID == d.AttendeeId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))).SingleOrDefault()"'

14:01:26 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Attendee> _InterceptExceptions(
|__ source: IAsyncEnumerable<Attendee> _ToSequence(() => Task<Attendee> SingleOrDefault(
|   |__ source: IAsyncEnumerable<Attendee> _SelectAsync(
|   |   |__ source: IAsyncEnumerable<Attendee> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT TOP(2) [a].[ID], [a].[EmailAddress], [a].[FirstName], [a].[LastName], [a].[Url], [a].[UserName]
|   |   |   |       FROM [Attendees] AS [a]
|   |   |   |       WHERE [a].[UserName] = @__username_0
|   |   |   |       ORDER BY [a].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Attendee>), 
|   |   |__ selector: (Attendee a | CancellationToken ct) => Task<Attendee> _ExecuteAsync(
|   |       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Attendee> _IncludeAsync(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ entity: a, 
|   |       |   |__ included: new object[]{ }, 
|   |       |   |__ fixup: (QueryContext queryContext | Attendee entity | object[] included | CancellationToken ct) => 
|   |       |   |   {
|   |       |   |       return Task _AwaitMany(new Func<Task>[]
|   |       |   |       { 
|   |       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|   |       |   |           |__ includeId: 0, 
|   |       |   |           |__ navigation: Attendee.SessionAttendees, 
|   |       |   |           |__ inverseNavigation: SessionAttendee.Attendee, 
|   |       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|   |       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>, 
|   |       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Attendee>, 
|   |       |   |           |__ tracking: False, 
|   |       |   |           |__ instance: entity, 
|   |       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|   |       |   |           |   |__ queryContext: queryContext, 
|   |       |   |           |   |__ shaperCommandContext: SelectExpression: 
|   |       |   |           |   |       SELECT [a.SessionAttendees].[SessionId], [a.SessionAttendees].[AttendeeId], [s.Session].[ID], [s.Session].[Abstract], [s.Session].[ConferenceId], [s.Session].[EndTime], [s.Session].[StartTime], [s.Session].[Title], [s.Session].[TrackId], [s.Session].[Url]
|   |       |   |           |   |       FROM [SessionAttendee] AS [a.SessionAttendees]
|   |       |   |           |   |       INNER JOIN [Sessions] AS [s.Session] ON [a.SessionAttendees].[SessionId] = [s.Session].[ID]
|   |       |   |           |   |       INNER JOIN (
|   |       |   |           |   |           SELECT TOP(1) [a0].[ID]
|   |       |   |           |   |           FROM [Attendees] AS [a0]
|   |       |   |           |   |           WHERE [a0].[UserName] = @__username_0
|   |       |   |           |   |           ORDER BY [a0].[ID]
|   |       |   |           |   |       ) AS [t] ON [a.SessionAttendees].[AttendeeId] = [t].[ID]
|   |       |   |           |   |       ORDER BY [t].[ID], 
|   |       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Session> t0) => SessionAttendee _Include(
|   |       |   |           |       |__ queryContext: queryContext, 
|   |       |   |           |       |__ entity: t0.Outer, 
|   |       |   |           |       |__ included: new object[]{ t0.Inner }, 
|   |       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|   |       |   |           |           {
|   |       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|   |       |   |           |               {
|   |       |   |           |                   entity.Session = (Session)included[0]
|   |       |   |           |                   return bool ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>.Add(
|   |       |   |           |                       instance: included[0], 
|   |       |   |           |                       value: entity)
|   |       |   |           |               } : 
|   |       |   |           |               {
|   |       |   |           |                   return default(bool)
|   |       |   |           |               }
|   |       |   |           |           })), 
|   |       |   |           |__ joinPredicate: (Attendee p | SessionAttendee d) => p.ID == d.AttendeeId, 
|   |       |   |           |__ cancellationToken: ct), 
|   |       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|   |       |   |           |__ includeId: 1, 
|   |       |   |           |__ navigation: Attendee.ConferenceAttendees, 
|   |       |   |           |__ inverseNavigation: ConferenceAttendee.Attendee, 
|   |       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|   |       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|   |       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Attendee>, 
|   |       |   |           |__ tracking: False, 
|   |       |   |           |__ instance: entity, 
|   |       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _ShapedQuery(
|   |       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|   |       |   |           |   |__ shaperCommandContext: SelectExpression: 
|   |       |   |           |   |       SELECT [a.ConferenceAttendees].[ConferenceId], [a.ConferenceAttendees].[AttendeeId], [c.Conference].[ID], [c.Conference].[EndTime], [c.Conference].[Name], [c.Conference].[StartTime], [c.Conference].[Url]
|   |       |   |           |   |       FROM [ConferenceAttendee] AS [a.ConferenceAttendees]
|   |       |   |           |   |       INNER JOIN [Conferences] AS [c.Conference] ON [a.ConferenceAttendees].[ConferenceId] = [c.Conference].[ID]
|   |       |   |           |   |       INNER JOIN (
|   |       |   |           |   |           SELECT TOP(1) [a1].[ID]
|   |       |   |           |   |           FROM [Attendees] AS [a1]
|   |       |   |           |   |           WHERE [a1].[UserName] = @__username_0
|   |       |   |           |   |           ORDER BY [a1].[ID]
|   |       |   |           |   |       ) AS [t0] ON [a.ConferenceAttendees].[AttendeeId] = [t0].[ID]
|   |       |   |           |   |       ORDER BY [t0].[ID], 
|   |       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<ConferenceAttendee, Conference> t0) => ConferenceAttendee _Include(
|   |       |   |           |       |__ queryContext: queryContext, 
|   |       |   |           |       |__ entity: t0.Outer, 
|   |       |   |           |       |__ included: new object[]{ t0.Inner }, 
|   |       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|   |       |   |           |           {
|   |       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|   |       |   |           |               {
|   |       |   |           |                   entity.Conference = (Conference)included[0]
|   |       |   |           |                   return bool ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|   |       |   |           |                       instance: included[0], 
|   |       |   |           |                       value: entity)
|   |       |   |           |               } : 
|   |       |   |           |               {
|   |       |   |           |                   return default(bool)
|   |       |   |           |               }
|   |       |   |           |           })), 
|   |       |   |           |__ joinPredicate: (Attendee p | ConferenceAttendee d) => p.ID == d.AttendeeId, 
|   |       |   |           |__ cancellationToken: ct), 
|   |       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|   |       |   |           |__ includeId: 2, 
|   |       |   |           |__ navigation: Attendee.AttendeeImages, 
|   |       |   |           |__ inverseNavigation: AttendeeImage.Attendee, 
|   |       |   |           |__ targetEntityType: EntityType: AttendeeImage, 
|   |       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Attendee, ICollection<AttendeeImage>, AttendeeImage>, 
|   |       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<AttendeeImage, Attendee>, 
|   |       |   |           |__ tracking: False, 
|   |       |   |           |__ instance: entity, 
|   |       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<AttendeeImage>>)() => IAsyncEnumerable<AttendeeImage> _ShapedQuery(
|   |       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|   |       |   |           |   |__ shaperCommandContext: SelectExpression: 
|   |       |   |           |   |       SELECT [a.AttendeeImages].[AttendeeId], [a.AttendeeImages].[ImageId], [a.Image].[ID], [a.Image].[Content], [a.Image].[ImageType], [a.Image].[Name], [a.Image].[UploadDate], [a.Image].[Url]
|   |       |   |           |   |       FROM [AttendeeImage] AS [a.AttendeeImages]
|   |       |   |           |   |       INNER JOIN [Images] AS [a.Image] ON [a.AttendeeImages].[ImageId] = [a.Image].[ID]
|   |       |   |           |   |       INNER JOIN (
|   |       |   |           |   |           SELECT TOP(1) [a2].[ID]
|   |       |   |           |   |           FROM [Attendees] AS [a2]
|   |       |   |           |   |           WHERE [a2].[UserName] = @__username_0
|   |       |   |           |   |           ORDER BY [a2].[ID]
|   |       |   |           |   |       ) AS [t1] ON [a.AttendeeImages].[AttendeeId] = [t1].[ID]
|   |       |   |           |   |       ORDER BY [t1].[ID], 
|   |       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<AttendeeImage, Image> t0) => AttendeeImage _Include(
|   |       |   |           |       |__ queryContext: queryContext, 
|   |       |   |           |       |__ entity: t0.Outer, 
|   |       |   |           |       |__ included: new object[]{ t0.Inner }, 
|   |       |   |           |       |__ fixup: (QueryContext queryContext | AttendeeImage entity | object[] included) => 
|   |       |   |           |           {
|   |       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|   |       |   |           |               {
|   |       |   |           |                   entity.Image = (Image)included[0]
|   |       |   |           |                   return bool ClrICollectionAccessor<Image, ICollection<AttendeeImage>, AttendeeImage>.Add(
|   |       |   |           |                       instance: included[0], 
|   |       |   |           |                       value: entity)
|   |       |   |           |               } : 
|   |       |   |           |               {
|   |       |   |           |                   return default(bool)
|   |       |   |           |               }
|   |       |   |           |           })), 
|   |       |   |           |__ joinPredicate: (Attendee p | AttendeeImage d) => p.ID == d.AttendeeId, 
|   |       |   |           |__ cancellationToken: ct) 
|   |       |   |       })
|   |       |   |   }, 
|   |       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|   |       |__ selector: (object[] results) => (Attendee)results[0])), 
|   |__ cancellationToken: Unhandled parameter: queryContext.CancellationToken)), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

14:01:26 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:01:26 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:01:26 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT TOP(2) [a].[ID], [a].[EmailAddress], [a].[FirstName], [a].[LastName], [a].[Url], [a].[UserName]
FROM [Attendees] AS [a]
WHERE [a].[UserName] = @__username_0
ORDER BY [a].[ID]"

14:01:26 [Information] () Executed DbCommand ("15"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT TOP(2) [a].[ID], [a].[EmailAddress], [a].[FirstName], [a].[LastName], [a].[Url], [a].[UserName]
FROM [Attendees] AS [a]
WHERE [a].[UserName] = @__username_0
ORDER BY [a].[ID]"

14:01:26 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.SessionAttendees].[SessionId], [a.SessionAttendees].[AttendeeId], [s.Session].[ID], [s.Session].[Abstract], [s.Session].[ConferenceId], [s.Session].[EndTime], [s.Session].[StartTime], [s.Session].[Title], [s.Session].[TrackId], [s.Session].[Url]
FROM [SessionAttendee] AS [a.SessionAttendees]
INNER JOIN [Sessions] AS [s.Session] ON [a.SessionAttendees].[SessionId] = [s.Session].[ID]
INNER JOIN (
    SELECT TOP(1) [a0].[ID]
    FROM [Attendees] AS [a0]
    WHERE [a0].[UserName] = @__username_0
    ORDER BY [a0].[ID]
) AS [t] ON [a.SessionAttendees].[AttendeeId] = [t].[ID]
ORDER BY [t].[ID]"

14:01:26 [Information] () Executed DbCommand ("13"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.SessionAttendees].[SessionId], [a.SessionAttendees].[AttendeeId], [s.Session].[ID], [s.Session].[Abstract], [s.Session].[ConferenceId], [s.Session].[EndTime], [s.Session].[StartTime], [s.Session].[Title], [s.Session].[TrackId], [s.Session].[Url]
FROM [SessionAttendee] AS [a.SessionAttendees]
INNER JOIN [Sessions] AS [s.Session] ON [a.SessionAttendees].[SessionId] = [s.Session].[ID]
INNER JOIN (
    SELECT TOP(1) [a0].[ID]
    FROM [Attendees] AS [a0]
    WHERE [a0].[UserName] = @__username_0
    ORDER BY [a0].[ID]
) AS [t] ON [a.SessionAttendees].[AttendeeId] = [t].[ID]
ORDER BY [t].[ID]"

14:01:26 [Debug] () A data reader was disposed.

14:01:26 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.ConferenceAttendees].[ConferenceId], [a.ConferenceAttendees].[AttendeeId], [c.Conference].[ID], [c.Conference].[EndTime], [c.Conference].[Name], [c.Conference].[StartTime], [c.Conference].[Url]
FROM [ConferenceAttendee] AS [a.ConferenceAttendees]
INNER JOIN [Conferences] AS [c.Conference] ON [a.ConferenceAttendees].[ConferenceId] = [c.Conference].[ID]
INNER JOIN (
    SELECT TOP(1) [a1].[ID]
    FROM [Attendees] AS [a1]
    WHERE [a1].[UserName] = @__username_0
    ORDER BY [a1].[ID]
) AS [t0] ON [a.ConferenceAttendees].[AttendeeId] = [t0].[ID]
ORDER BY [t0].[ID]"

14:01:26 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.ConferenceAttendees].[ConferenceId], [a.ConferenceAttendees].[AttendeeId], [c.Conference].[ID], [c.Conference].[EndTime], [c.Conference].[Name], [c.Conference].[StartTime], [c.Conference].[Url]
FROM [ConferenceAttendee] AS [a.ConferenceAttendees]
INNER JOIN [Conferences] AS [c.Conference] ON [a.ConferenceAttendees].[ConferenceId] = [c.Conference].[ID]
INNER JOIN (
    SELECT TOP(1) [a1].[ID]
    FROM [Attendees] AS [a1]
    WHERE [a1].[UserName] = @__username_0
    ORDER BY [a1].[ID]
) AS [t0] ON [a.ConferenceAttendees].[AttendeeId] = [t0].[ID]
ORDER BY [t0].[ID]"

14:01:26 [Debug] () A data reader was disposed.

14:01:26 [Debug] () Executing DbCommand [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.AttendeeImages].[AttendeeId], [a.AttendeeImages].[ImageId], [a.Image].[ID], [a.Image].[Content], [a.Image].[ImageType], [a.Image].[Name], [a.Image].[UploadDate], [a.Image].[Url]
FROM [AttendeeImage] AS [a.AttendeeImages]
INNER JOIN [Images] AS [a.Image] ON [a.AttendeeImages].[ImageId] = [a.Image].[ID]
INNER JOIN (
    SELECT TOP(1) [a2].[ID]
    FROM [Attendees] AS [a2]
    WHERE [a2].[UserName] = @__username_0
    ORDER BY [a2].[ID]
) AS [t1] ON [a.AttendeeImages].[AttendeeId] = [t1].[ID]
ORDER BY [t1].[ID]"

14:01:26 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__username_0='?' (Size = 200)"], CommandType='Text', CommandTimeout='30']"
""SELECT [a.AttendeeImages].[AttendeeId], [a.AttendeeImages].[ImageId], [a.Image].[ID], [a.Image].[Content], [a.Image].[ImageType], [a.Image].[Name], [a.Image].[UploadDate], [a.Image].[Url]
FROM [AttendeeImage] AS [a.AttendeeImages]
INNER JOIN [Images] AS [a.Image] ON [a.AttendeeImages].[ImageId] = [a.Image].[ID]
INNER JOIN (
    SELECT TOP(1) [a2].[ID]
    FROM [Attendees] AS [a2]
    WHERE [a2].[UserName] = @__username_0
    ORDER BY [a2].[ID]
) AS [t1] ON [a.AttendeeImages].[AttendeeId] = [t1].[ID]
ORDER BY [t1].[ID]"

14:01:26 [Debug] () A data reader was disposed.

14:01:26 [Debug] () A data reader was disposed.

14:01:26 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:01:26 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:01:26 [Information] () Executed action method "BackEnd.AttendeesController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 557.9863ms.

14:01:26 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

14:01:26 [Debug] () No information found on request to perform content negotiation.

14:01:26 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

14:01:26 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

14:01:26 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

14:01:26 [Information] () Executing ObjectResult, writing value of type '"ConferenceDTO.AttendeeResponse"'.

14:01:26 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

14:01:26 [Information] () Executed action "BackEnd.AttendeesController.Get (BackEnd)" in 730.632ms

14:01:26 [Information] () Executed endpoint '"BackEnd.AttendeesController.Get (BackEnd)"'

14:01:26 [Information] () The response has been cached.

14:01:26 [Debug] () '"ApplicationDbContext"' disposed.

14:01:26 [Information] () Request finished in 763.477ms 200 application/json; charset=utf-8

14:01:26 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

14:01:26 [Information] () No cached response available for this request.

14:01:26 [Debug] () The request path "" does not match the path filter

14:01:26 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

14:01:26 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

14:01:26 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

14:01:26 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

14:01:26 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

14:01:26 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

14:01:26 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

14:01:26 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

14:01:26 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

14:01:26 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

14:01:26 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

14:01:26 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

14:01:26 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

14:01:26 [Debug] () GetConferencesForFollowingFiveDays was called

14:01:26 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

14:01:26 [Debug] () Compiling query model: "
"'"from Conference c in 
    (from Conference <generated>_1 in DbSet<Conference>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"ConferenceAttendees.Attendee\")
    .Include(\"Sessions\")
    .Include(\"ConferenceSpeakers.Speaker\")
    .Include(\"Tracks\")
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
select ConferenceResponse MapConferenceResponse([c])"'

14:01:26 [Debug] () Including navigation: '"[c].ConferenceAttendees.Attendee"'

14:01:26 [Debug] () Including navigation: '"[c].Sessions"'

14:01:26 [Debug] () Including navigation: '"[c].ConferenceSpeakers.Speaker"'

14:01:26 [Debug] () Including navigation: '"[c].Tracks"'

14:01:26 [Debug] () Optimized query model: "
"'"from Conference c in DbSet<Conference>
where bool IsConferenceWithinDateRange(
    fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
    toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
    s: [c])
order by EF.Property(?[c]?, \"ID\") asc
select ConferenceResponse MapConferenceResponse(Conference Result(Task<Conference> _IncludeAsync(
    queryContext: queryContext, 
    entity: [c], 
    included: new object[]{ }, 
    fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
    {
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Conference.ConferenceAttendees, 
                inverseNavigation: ConferenceAttendee.Conference, 
                targetEntityType: EntityType: ConferenceAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => 
                    from ConferenceAttendee c.ConferenceAttendees in DbSet<ConferenceAttendee>
                    join Attendee c.Attendee in DbSet<Attendee>
                    on Property([c.ConferenceAttendees], \"AttendeeId\") equals Property([c.Attendee], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceAttendees], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceAttendee _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceAttendees], 
                        included: new object[]{ [c.Attendee] }, 
                        fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Conference.Sessions, 
                inverseNavigation: Session.Conference, 
                targetEntityType: EntityType: Session, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
                inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Session>>)() => 
                    from Session c.Sessions in DbSet<Session>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Sessions], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Sessions], 
                joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Conference.ConferenceSpeakers, 
                inverseNavigation: ConferenceSpeaker.Conference, 
                targetEntityType: EntityType: ConferenceSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => 
                    from ConferenceSpeaker c.ConferenceSpeakers in DbSet<ConferenceSpeaker>
                    join Speaker c.Speaker in DbSet<Speaker>
                    on Property([c.ConferenceSpeakers], \"SpeakerId\") equals Property([c.Speaker], \"ID\")
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.ConferenceSpeakers], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select ConferenceSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [c.ConferenceSpeakers], 
                        included: new object[]{ [c.Speaker] }, 
                        fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 3, 
                navigation: Conference.Tracks, 
                inverseNavigation: Track.Conference, 
                targetEntityType: EntityType: Track, 
                clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
                inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<Track>>)() => 
                    from Track c.Tracks in DbSet<Track>
                    join AnonymousObject _c in 
                        from Conference c in DbSet<Conference>
                        where bool IsConferenceWithinDateRange(
                            fromDate: (Nullable<DateTimeOffset>)__dateTimeNow_0, 
                            toDate: (Nullable<DateTimeOffset>)__AddDays_1, 
                            s: [c])
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[c]?, \"ID\") })
                    on Property([c.Tracks], \"ConferenceId\") equals (Nullable<int>)object [_c].GetValue(0)
                    order by object [_c].GetValue(0) asc
                    select [c.Tracks], 
                joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct)))"'

14:01:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceAttendees], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Sessions], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.ConferenceSpeakers], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c])"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"join AnonymousObject _c in {from Conference c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[BackEnd.Data.Conference]) where IsConferenceWithinDateRange(Convert(__dateTimeNow_0, Nullable`1), Convert(__AddDays_1, Nullable`1), [c]) select new AnonymousObject(new [] {Convert(EF.Property(?[c]?, \"ID\"), Object)})} on Property([c.Tracks], \"ConferenceId\") equals Convert([_c].GetValue(0), Nullable`1)"' could not be translated and will be evaluated locally.

14:01:26 [Warning] () The LINQ expression '"orderby [_c].GetValue(0) asc"' could not be translated and will be evaluated locally.

14:01:26 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<ConferenceResponse> _InterceptExceptions(
|__ source: IAsyncEnumerable<ConferenceResponse> _SelectAsync(
|   |__ source: IAsyncEnumerable<Conference> _Where(
|   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|   |   |   |__ queryContext: queryContext, 
|   |   |   |__ shaperCommandContext: SelectExpression: 
|   |   |   |       SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
|   |   |   |       FROM [Conferences] AS [c]
|   |   |   |       ORDER BY [c].[ID], 
|   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|   |       |   |__ queryContext: queryContext, 
|   |       |   |__ parameterName: \"__AddDays_1\"), 
|   |       |__ s: c)), 
|   |__ selector: (Conference c | CancellationToken ct) => Task<ConferenceResponse> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Conference> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: c, 
|       |   |__ included: new object[]{ }, 
|       |   |__ fixup: (QueryContext queryContext | Conference entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Conference.ConferenceAttendees, 
|       |   |           |__ inverseNavigation: ConferenceAttendee.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceAttendee>, ConferenceAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceAttendee, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceAttendee>>)() => IAsyncEnumerable<ConferenceAttendee> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceAttendee, Attendee>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
|       |   |           |   |   |   |   |       FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
|       |   |           |   |   |   |   |       INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceAttendee c.ConferenceAttendees | Attendee c.Attendee) => TransparentIdentifier<ConferenceAttendee, Attendee> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceAttendees, 
|       |   |           |   |   |   |       |__ inner: c.Attendee)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c1].[ID], [c1].[EndTime], [c1].[Name], [c1].[StartTime], [c1].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c1], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceAttendee, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceAttendee, Attendee> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceAttendee, Attendee>, AnonymousObject> t1) => ConferenceAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<ConferenceAttendee>, ConferenceAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceAttendee d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Conference.Sessions, 
|       |   |           |__ inverseNavigation: Session.Conference, 
|       |   |           |__ targetEntityType: EntityType: Session, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Session>, Session>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Session, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Session>>)() => IAsyncEnumerable<Session> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Session> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
|       |   |           |   |   |   |   |       FROM [Sessions] AS [c.Sessions], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Session>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c3], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Session c.Sessions) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Session, int>, 
|       |   |           |   |   |   |       entity: c.Sessions), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Session c.Sessions | AnonymousObject _c) => TransparentIdentifier<Session, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Sessions, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Session, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Session, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Session d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Conference.ConferenceSpeakers, 
|       |   |           |__ inverseNavigation: ConferenceSpeaker.Conference, 
|       |   |           |__ targetEntityType: EntityType: ConferenceSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<ConferenceSpeaker>, ConferenceSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<ConferenceSpeaker, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<ConferenceSpeaker>>)() => IAsyncEnumerable<ConferenceSpeaker> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<TransparentIdentifier<ConferenceSpeaker, Speaker>> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
|       |   |           |   |   |   |   |       FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
|       |   |           |   |   |   |   |       INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID], 
|       |   |           |   |   |   |   |__ shaper: (ConferenceSpeaker c.ConferenceSpeakers | Speaker c.Speaker) => TransparentIdentifier<ConferenceSpeaker, Speaker> CreateTransparentIdentifier(
|       |   |           |   |   |   |       |__ outer: c.ConferenceSpeakers, 
|       |   |           |   |   |   |       |__ inner: c.Speaker)), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c5].[ID], [c5].[EndTime], [c5].[Name], [c5].[StartTime], [c5].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c5], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<ConferenceSpeaker, int>, 
|       |   |           |   |   |   |       entity: t0.Outer), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (TransparentIdentifier<ConferenceSpeaker, Speaker> t0 | AnonymousObject _c) => TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: t0, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => object t1.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<TransparentIdentifier<ConferenceSpeaker, Speaker>, AnonymousObject> t1) => ConferenceSpeaker _Include(
|       |   |           |       |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |       |__ entity: t1.Outer.Outer, 
|       |   |           |       |__ included: new object[]{ t1.Outer.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | ConferenceSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<ConferenceSpeaker>, ConferenceSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Conference p | ConferenceSpeaker d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 3, 
|       |   |           |__ navigation: Conference.Tracks, 
|       |   |           |__ inverseNavigation: Track.Conference, 
|       |   |           |__ targetEntityType: EntityType: Track, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Conference, ICollection<Track>, Track>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<Track, Conference>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<Track>>)() => IAsyncEnumerable<Track> _Select(
|       |   |           |   |__ source: IOrderedAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _OrderBy(
|       |   |           |   |   |__ source: IAsyncEnumerable<TransparentIdentifier<Track, AnonymousObject>> _Join(
|       |   |           |   |   |   |__ outer: IAsyncEnumerable<Track> _ShapedQuery(
|       |   |           |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |       SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
|       |   |           |   |   |   |   |       FROM [Tracks] AS [c.Tracks], 
|       |   |           |   |   |   |   |__ shaper: BufferedEntityShaper<Track>), 
|       |   |           |   |   |   |__ inner: IAsyncEnumerable<AnonymousObject> _Select(
|       |   |           |   |   |   |   |__ source: IAsyncEnumerable<Conference> _Where(
|       |   |           |   |   |   |   |   |__ source: IAsyncEnumerable<Conference> _ShapedQuery(
|       |   |           |   |   |   |   |   |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |   |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |   |   |   |   |   |       SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
|       |   |           |   |   |   |   |   |   |       FROM [Conferences] AS [c7], 
|       |   |           |   |   |   |   |   |   |__ shaper: BufferedEntityShaper<Conference>), 
|       |   |           |   |   |   |   |   |__ predicate: (Conference c) => bool IsConferenceWithinDateRange(
|       |   |           |   |   |   |   |       |__ fromDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__dateTimeNow_0\"), 
|       |   |           |   |   |   |   |       |__ toDate: (Nullable<DateTimeOffset>)DateTimeOffset GetParameterValue(
|       |   |           |   |   |   |   |       |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |   |   |   |       |   |__ parameterName: \"__AddDays_1\"), 
|       |   |           |   |   |   |   |       |__ s: c)), 
|       |   |           |   |   |   |   |__ selector: (Conference c) => new AnonymousObject(new object[]{ (object)?c | Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |           clrPropertyGetter: ClrPropertyGetter<Conference, int>, 
|       |   |           |   |   |   |           entity: c)? })), 
|       |   |           |   |   |   |__ outerKeySelector: (Track c.Tracks) => Nullable<int> GetValueFromEntity(
|       |   |           |   |   |   |       clrPropertyGetter: ClrPropertyGetter<Track, int>, 
|       |   |           |   |   |   |       entity: c.Tracks), 
|       |   |           |   |   |   |__ innerKeySelector: (AnonymousObject _c) => (Nullable<int>)object _c.GetValue(0), 
|       |   |           |   |   |   |__ resultSelector: (Track c.Tracks | AnonymousObject _c) => TransparentIdentifier<Track, AnonymousObject> CreateTransparentIdentifier(
|       |   |           |   |   |       |__ outer: c.Tracks, 
|       |   |           |   |   |       |__ inner: _c)), 
|       |   |           |   |   |__ expression: (TransparentIdentifier<Track, AnonymousObject> t0) => object t0.Inner.GetValue(0), 
|       |   |           |   |   |__ orderingDirection: Asc), 
|       |   |           |   |__ selector: (TransparentIdentifier<Track, AnonymousObject> t0) => t0.Outer), 
|       |   |           |__ joinPredicate: (Conference p | Track d) => p.ID == d.ConferenceId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => ConferenceResponse MapConferenceResponse((Conference)results[0]))), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

14:01:26 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:01:26 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:01:26 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

14:01:26 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

14:01:26 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

14:01:26 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

14:01:26 [Debug] () A data reader was disposed.

14:01:26 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

14:01:26 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

14:01:26 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

14:01:26 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

14:01:26 [Debug] () A data reader was disposed.

14:01:27 [Debug] () A data reader was disposed.

14:01:27 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

14:01:27 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

14:01:27 [Debug] () A data reader was disposed.

14:01:27 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

14:01:27 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

14:01:27 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

14:01:27 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

14:01:27 [Debug] () A data reader was disposed.

14:01:27 [Debug] () A data reader was disposed.

14:01:27 [Debug] () A data reader was disposed.

14:01:27 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:01:27 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:01:27 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 284.8218ms.

14:01:27 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

14:01:27 [Debug] () No information found on request to perform content negotiation.

14:01:27 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

14:01:27 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

14:01:27 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

14:01:27 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

14:01:27 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

14:01:27 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 312.8925ms

14:01:27 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

14:01:27 [Information] () The response has been cached.

14:01:27 [Debug] () '"ApplicationDbContext"' disposed.

14:01:27 [Information] () Request finished in 318.8107ms 200 application/json; charset=utf-8

14:04:58 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/conferences/5-days  

14:04:58 [Information] () No cached response available for this request.

14:04:58 [Debug] () The request path "" does not match the path filter

14:04:58 [Debug] () 2 candidate(s) found for the request path '"/api/conferences/5-days"'

14:04:58 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"' with route pattern '"api/Conferences/5-days"' is valid for the request path '"/api/conferences/5-days"'

14:04:58 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' was rejected by constraint '"id"':'"Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint"' with value '"5-days"' for the request path '"/api/conferences/5-days"'

14:04:58 [Debug] () Endpoint '"BackEnd.Controllers.ConferencesController.GetConference (BackEnd)"' with route pattern '"api/Conferences/{id:int}"' is not valid for the request path '"/api/conferences/5-days"'

14:04:58 [Debug] () Request matched endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

14:04:58 [Information] () Executing endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

14:04:58 [Information] () Route matched with "{action = \"GetConferencesForFollowingFiveDays\", controller = \"Conferences\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.List`1[ConferenceDTO.ConferenceResponse]]] GetConferencesForFollowingFiveDays()" on controller "BackEnd.Controllers.ConferencesController" ("BackEnd").

14:04:58 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

14:04:58 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

14:04:58 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

14:04:58 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

14:04:58 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

14:04:58 [Information] () Executing action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" - Validation state: Valid

14:04:58 [Debug] () GetConferencesForFollowingFiveDays was called

14:04:58 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

14:04:58 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:04:58 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:04:58 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

14:04:58 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c].[ID], [c].[EndTime], [c].[Name], [c].[StartTime], [c].[Url]
FROM [Conferences] AS [c]
ORDER BY [c].[ID]"

14:04:58 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

14:04:58 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceAttendees].[ConferenceId], [c.ConferenceAttendees].[AttendeeId], [c.Attendee].[ID], [c.Attendee].[EmailAddress], [c.Attendee].[FirstName], [c.Attendee].[LastName], [c.Attendee].[Url], [c.Attendee].[UserName]
FROM [ConferenceAttendee] AS [c.ConferenceAttendees]
INNER JOIN [Attendees] AS [c.Attendee] ON [c.ConferenceAttendees].[AttendeeId] = [c.Attendee].[ID]"

14:04:58 [Debug] () A data reader was disposed.

14:04:58 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

14:04:58 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Sessions].[ID], [c.Sessions].[Abstract], [c.Sessions].[ConferenceId], [c.Sessions].[EndTime], [c.Sessions].[StartTime], [c.Sessions].[Title], [c.Sessions].[TrackId], [c.Sessions].[Url]
FROM [Sessions] AS [c.Sessions]"

14:04:58 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

14:04:58 [Information] () Executed DbCommand ("9"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c3].[ID], [c3].[EndTime], [c3].[Name], [c3].[StartTime], [c3].[Url]
FROM [Conferences] AS [c3]"

14:04:58 [Debug] () A data reader was disposed.

14:04:58 [Debug] () A data reader was disposed.

14:04:58 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

14:04:58 [Information] () Executed DbCommand ("2"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.ConferenceSpeakers].[ConferenceId], [c.ConferenceSpeakers].[SpeakerId], [c.Speaker].[ID], [c.Speaker].[Bio], [c.Speaker].[Name], [c.Speaker].[WebSite]
FROM [ConferenceSpeaker] AS [c.ConferenceSpeakers]
INNER JOIN [Speakers] AS [c.Speaker] ON [c.ConferenceSpeakers].[SpeakerId] = [c.Speaker].[ID]"

14:04:58 [Debug] () A data reader was disposed.

14:04:58 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

14:04:58 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c.Tracks].[ID], [c.Tracks].[ConferenceId], [c.Tracks].[Name]
FROM [Tracks] AS [c.Tracks]"

14:04:58 [Debug] () Executing DbCommand [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

14:04:58 [Information] () Executed DbCommand ("1"ms) [Parameters=[""], CommandType='Text', CommandTimeout='30']"
""SELECT [c7].[ID], [c7].[EndTime], [c7].[Name], [c7].[StartTime], [c7].[Url]
FROM [Conferences] AS [c7]"

14:04:58 [Debug] () A data reader was disposed.

14:04:58 [Debug] () A data reader was disposed.

14:04:58 [Debug] () A data reader was disposed.

14:04:58 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:04:58 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:04:58 [Information] () Executed action method "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 56.623ms.

14:04:58 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

14:04:58 [Debug] () No information found on request to perform content negotiation.

14:04:58 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

14:04:58 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

14:04:58 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

14:04:58 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.ConferenceResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

14:04:58 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

14:04:58 [Information] () Executed action "BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)" in 59.4991ms

14:04:58 [Information] () Executed endpoint '"BackEnd.Controllers.ConferencesController.GetConferencesForFollowingFiveDays (BackEnd)"'

14:04:58 [Information] () The response has been cached.

14:04:58 [Debug] () '"ApplicationDbContext"' disposed.

14:04:58 [Information] () Request finished in 69.4226ms 200 application/json; charset=utf-8

14:04:58 [Information] () Request starting HTTP/1.1 GET https://localhost:44354/api/sessions/conference/2  

14:04:58 [Information] () No cached response available for this request.

14:04:58 [Debug] () The request path "" does not match the path filter

14:04:58 [Debug] () 1 candidate(s) found for the request path '"/api/sessions/conference/2"'

14:04:58 [Debug] () Endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"' with route pattern '"api/Sessions/conference/{conferenceId:int}"' is valid for the request path '"/api/sessions/conference/2"'

14:04:58 [Debug] () Request matched endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

14:04:58 [Information] () Executing endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

14:04:58 [Information] () Route matched with "{action = \"Get\", controller = \"Sessions\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.ICollection`1[ConferenceDTO.SessionResponse]]] Get(Int32, System.Nullable`1[System.DateTimeOffset], System.Nullable`1[System.DateTimeOffset])" on controller "BackEnd.Controllers.SessionsController" ("BackEnd").

14:04:58 [Debug] () Execution plan of "authorization" filters (in the following order): ["None"]

14:04:58 [Debug] () Execution plan of "resource" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter"]

14:04:58 [Debug] () Execution plan of "action" filters (in the following order): ["Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)", "Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)", "Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]

14:04:58 [Debug] () Execution plan of "exception" filters (in the following order): ["None"]

14:04:58 [Debug] () Execution plan of "result" filters (in the following order): ["Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter", "Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]

14:04:58 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' ...

14:04:58 [Debug] () Attempting to bind parameter '"conferenceId"' of type '"System.Int32"' using the name '"conferenceId"' in request data ...

14:04:58 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

14:04:58 [Debug] () Done attempting to bind parameter '"conferenceId"' of type '"System.Int32"'.

14:04:58 [Debug] () Attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"' ...

14:04:58 [Debug] () Done attempting to validate the bound parameter '"conferenceId"' of type '"System.Int32"'.

14:04:58 [Debug] () Attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

14:04:58 [Debug] () Could not find a value in the request with name '""' for binding parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

14:04:58 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

14:04:58 [Debug] () Done attempting to bind parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

14:04:58 [Debug] () Attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

14:04:58 [Debug] () Done attempting to validate the bound parameter '"fromDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

14:04:58 [Debug] () Attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

14:04:58 [Debug] () Could not find a value in the request with name '""' for binding parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

14:04:58 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

14:04:58 [Debug] () Done attempting to bind parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

14:04:58 [Debug] () Attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"' ...

14:04:58 [Debug] () Done attempting to validate the bound parameter '"toDate"' of type '"System.Nullable`1[System.DateTimeOffset]"'.

14:04:58 [Information] () Executing action method "BackEnd.Controllers.SessionsController.Get (BackEnd)" - Validation state: Valid

14:04:58 [Information] () Entity Framework Core "2.2.6-servicing-10079" initialized '"ApplicationDbContext"' using provider '"Microsoft.EntityFrameworkCore.SqlServer"' with options: "None"

14:04:58 [Debug] () Compiling query model: "
"'"from Session s in 
    (from Session <generated>_1 in DbSet<Session>
    select [<generated>_1])
    .AsNoTracking()
    .Include(\"Track\")
    .Include(\"SessionSpeakers.Speaker\")
    .Include(\"SessionTags.Tag\")
    .Include(\"SessionAttendees.Attendee\")
where [s].ConferenceId == __conferenceId_0
select [s]"'

14:04:58 [Debug] () Including navigation: '"[s].Track"'

14:04:58 [Debug] () Including navigation: '"[s].SessionSpeakers.Speaker"'

14:04:58 [Debug] () Including navigation: '"[s].SessionTags.Tag"'

14:04:58 [Debug] () Including navigation: '"[s].SessionAttendees.Attendee"'

14:04:58 [Debug] () Optimized query model: "
"'"from Session s in DbSet<Session>
join Track s.Track in DbSet<Track>
on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
from Track s.Track in 
    (from Track s.Track_groupItem in [s.Track_group]
    select [s.Track_groupItem]).DefaultIfEmpty()
where [s].ConferenceId == __conferenceId_0
order by EF.Property(?[s]?, \"ID\") asc
select Session Result(Task<Session> _IncludeAsync(
    queryContext: queryContext, 
    entity: [s], 
    included: new object[]{ [s.Track] }, 
    fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
    {
        !(bool ReferenceEquals(included[0], null)) ? 
        {
            entity.Track = (Track)included[0]
            return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
                instance: included[0], 
                value: entity)
        } : 
        {
            return default(bool)
        }
        return Task _AwaitMany(new Func<Task>[]
        { 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 0, 
                navigation: Session.SessionSpeakers, 
                inverseNavigation: SessionSpeaker.Session, 
                targetEntityType: EntityType: SessionSpeaker, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => 
                    from SessionSpeaker s.SessionSpeakers in DbSet<SessionSpeaker>
                    join Speaker s.Speaker in DbSet<Speaker>
                    on Property([s.SessionSpeakers], \"SpeakerId\") equals Property([s.Speaker], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionSpeakers], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionSpeaker _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionSpeakers], 
                        included: new object[]{ [s.Speaker] }, 
                        fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Speaker = (Speaker)included[0]
                                return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 1, 
                navigation: Session.SessionTags, 
                inverseNavigation: SessionTag.Session, 
                targetEntityType: EntityType: SessionTag, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => 
                    from SessionTag s.SessionTags in DbSet<SessionTag>
                    join Tag s.Tag in DbSet<Tag>
                    on Property([s.SessionTags], \"TagId\") equals Property([s.Tag], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionTags], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionTag _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionTags], 
                        included: new object[]{ [s.Tag] }, 
                        fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Tag = (Tag)included[0]
                                return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
                cancellationToken: ct), 
            () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
                includeId: 2, 
                navigation: Session.SessionAttendees, 
                inverseNavigation: SessionAttendee.Session, 
                targetEntityType: EntityType: SessionAttendee, 
                clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
                inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
                tracking: False, 
                instance: entity, 
                valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => 
                    from SessionAttendee s.SessionAttendees in DbSet<SessionAttendee>
                    join Attendee s.Attendee in DbSet<Attendee>
                    on Property([s.SessionAttendees], \"AttendeeId\") equals Property([s.Attendee], \"ID\")
                    join AnonymousObject _s in 
                        (from Session s in DbSet<Session>
                        join Track s.Track in DbSet<Track>
                        on Property([s], \"TrackId\") equals (Nullable<int>)Property([s.Track], \"ID\") into s.Track_group
                        from Track s.Track in 
                            (from Track s.Track_groupItem in [s.Track_group]
                            select [s.Track_groupItem]).DefaultIfEmpty()
                        where [s].ConferenceId == __conferenceId_0
                        select new AnonymousObject(new object[]{ (object)EF.Property(?[s]?, \"ID\") })).Distinct()
                    on Property([s.SessionAttendees], \"SessionId\") equals (Nullable<int>)object [_s].GetValue(0)
                    order by object [_s].GetValue(0) asc
                    select SessionAttendee _Include(
                        queryContext: queryContext, 
                        entity: [s.SessionAttendees], 
                        included: new object[]{ [s.Attendee] }, 
                        fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
                        {
                            return !(bool ReferenceEquals(included[0], null)) ? 
                            {
                                entity.Attendee = (Attendee)included[0]
                                return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
                                    instance: included[0], 
                                    value: entity)
                            } : 
                            {
                                return default(bool)
                            }
                        }), 
                joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
                cancellationToken: ct) 
        })
    }, 
    cancellationToken: ct))"'

14:04:58 [Debug] () "(QueryContext queryContext) => IAsyncEnumerable<Session> _InterceptExceptions(
|__ source: IAsyncEnumerable<Session> _SelectAsync(
|   |__ source: IAsyncEnumerable<TransparentIdentifier<Session, Track>> _ShapedQuery(
|   |   |__ queryContext: queryContext, 
|   |   |__ shaperCommandContext: SelectExpression: 
|   |   |       SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
|   |   |       FROM [Sessions] AS [s]
|   |   |       LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
|   |   |       WHERE [s].[ConferenceId] = @__conferenceId_0
|   |   |       ORDER BY [s].[ID], 
|   |   |__ shaper: (Session s | Track s.Track) => TransparentIdentifier<Session, Track> CreateTransparentIdentifier(
|   |       |__ outer: s, 
|   |       |__ inner: s.Track)), 
|   |__ selector: (TransparentIdentifier<Session, Track> t1 | CancellationToken ct) => Task<Session> _ExecuteAsync(
|       |__ taskFactories: new Func<Task<object>>[]{ () => Task<object> _ToObjectTask(Task<Session> _IncludeAsync(
|       |   |__ queryContext: queryContext, 
|       |   |__ entity: t1.Outer, 
|       |   |__ included: new object[]{ t1.Inner }, 
|       |   |__ fixup: (QueryContext queryContext | Session entity | object[] included | CancellationToken ct) => 
|       |   |   {
|       |   |       !(bool ReferenceEquals(included[0], null)) ? 
|       |   |       {
|       |   |           entity.Track = (Track)included[0]
|       |   |           return bool ClrICollectionAccessor<Track, ICollection<Session>, Session>.Add(
|       |   |               instance: included[0], 
|       |   |               value: entity)
|       |   |       } : 
|       |   |       {
|       |   |           return default(bool)
|       |   |       }
|       |   |       return Task _AwaitMany(new Func<Task>[]
|       |   |       { 
|       |   |           () => Task queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 0, 
|       |   |           |__ navigation: Session.SessionSpeakers, 
|       |   |           |__ inverseNavigation: SessionSpeaker.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionSpeaker, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionSpeaker>, SessionSpeaker>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionSpeaker, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionSpeaker>>)() => IAsyncEnumerable<SessionSpeaker> _ShapedQuery(
|       |   |           |   |__ queryContext: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
|       |   |           |   |       FROM [SessionSpeaker] AS [s.SessionSpeakers]
|       |   |           |   |       INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s0].[ID]
|       |   |           |   |           FROM [Sessions] AS [s0]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
|       |   |           |   |           WHERE [s0].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
|       |   |           |   |       ORDER BY [t].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionSpeaker, Speaker> t0) => SessionSpeaker _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionSpeaker entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Speaker = (Speaker)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Speaker, ICollection<SessionSpeaker>, SessionSpeaker>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionSpeaker d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 1, 
|       |   |           |__ navigation: Session.SessionTags, 
|       |   |           |__ inverseNavigation: SessionTag.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionTag, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionTag>, SessionTag>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionTag, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionTag>>)() => IAsyncEnumerable<SessionTag> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
|       |   |           |   |       FROM [SessionTag] AS [s.SessionTags]
|       |   |           |   |       INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s1].[ID]
|       |   |           |   |           FROM [Sessions] AS [s1]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
|       |   |           |   |           WHERE [s1].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
|       |   |           |   |       ORDER BY [t0].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionTag, Tag> t0) => SessionTag _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionTag entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Tag = (Tag)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Tag, ICollection<SessionTag>, SessionTag>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionTag d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct), 
|       |   |           () => Task Unhandled parameter: queryContext.QueryBuffer.IncludeCollectionAsync(
|       |   |           |__ includeId: 2, 
|       |   |           |__ navigation: Session.SessionAttendees, 
|       |   |           |__ inverseNavigation: SessionAttendee.Session, 
|       |   |           |__ targetEntityType: EntityType: SessionAttendee, 
|       |   |           |__ clrCollectionAccessor: ClrICollectionAccessor<Session, ICollection<SessionAttendee>, SessionAttendee>, 
|       |   |           |__ inverseClrPropertySetter: ClrPropertySetter<SessionAttendee, Session>, 
|       |   |           |__ tracking: False, 
|       |   |           |__ instance: entity, 
|       |   |           |__ valuesFactory: (Func<IAsyncEnumerable<SessionAttendee>>)() => IAsyncEnumerable<SessionAttendee> _ShapedQuery(
|       |   |           |   |__ queryContext: Unhandled parameter: queryContext, 
|       |   |           |   |__ shaperCommandContext: SelectExpression: 
|       |   |           |   |       SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
|       |   |           |   |       FROM [SessionAttendee] AS [s.SessionAttendees]
|       |   |           |   |       INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
|       |   |           |   |       INNER JOIN (
|       |   |           |   |           SELECT DISTINCT [s2].[ID]
|       |   |           |   |           FROM [Sessions] AS [s2]
|       |   |           |   |           LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
|       |   |           |   |           WHERE [s2].[ConferenceId] = @__conferenceId_0
|       |   |           |   |       ) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
|       |   |           |   |       ORDER BY [t1].[ID], 
|       |   |           |   |__ shaper: (QueryContext queryContext | TransparentIdentifier<SessionAttendee, Attendee> t0) => SessionAttendee _Include(
|       |   |           |       |__ queryContext: queryContext, 
|       |   |           |       |__ entity: t0.Outer, 
|       |   |           |       |__ included: new object[]{ t0.Inner }, 
|       |   |           |       |__ fixup: (QueryContext queryContext | SessionAttendee entity | object[] included) => 
|       |   |           |           {
|       |   |           |               return !(bool ReferenceEquals(included[0], null)) ? 
|       |   |           |               {
|       |   |           |                   entity.Attendee = (Attendee)included[0]
|       |   |           |                   return bool ClrICollectionAccessor<Attendee, ICollection<SessionAttendee>, SessionAttendee>.Add(
|       |   |           |                       instance: included[0], 
|       |   |           |                       value: entity)
|       |   |           |               } : 
|       |   |           |               {
|       |   |           |                   return default(bool)
|       |   |           |               }
|       |   |           |           })), 
|       |   |           |__ joinPredicate: (Session p | SessionAttendee d) => p.ID == d.SessionId, 
|       |   |           |__ cancellationToken: ct) 
|       |   |       })
|       |   |   }, 
|       |   |__ cancellationToken: Unhandled parameter: ct)) }, 
|       |__ selector: (object[] results) => (Session)results[0])), 
|__ contextType: BackEnd.Data.ApplicationDbContext, 
|__ logger: DiagnosticsLogger<Query>, 
|__ queryContext: Unhandled parameter: queryContext)"

14:04:58 [Debug] () Opening connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:04:58 [Debug] () Opened connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:04:58 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

14:04:58 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s].[ID], [s].[Abstract], [s].[ConferenceId], [s].[EndTime], [s].[StartTime], [s].[Title], [s].[TrackId], [s].[Url], [s.Track].[ID], [s.Track].[ConferenceId], [s.Track].[Name]
FROM [Sessions] AS [s]
LEFT JOIN [Tracks] AS [s.Track] ON [s].[TrackId] = [s.Track].[ID]
WHERE [s].[ConferenceId] = @__conferenceId_0
ORDER BY [s].[ID]"

14:04:58 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

14:04:58 [Information] () Executed DbCommand ("12"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionSpeakers].[SessionId], [s.SessionSpeakers].[SpeakerId], [s.Speaker].[ID], [s.Speaker].[Bio], [s.Speaker].[Name], [s.Speaker].[WebSite]
FROM [SessionSpeaker] AS [s.SessionSpeakers]
INNER JOIN [Speakers] AS [s.Speaker] ON [s.SessionSpeakers].[SpeakerId] = [s.Speaker].[ID]
INNER JOIN (
    SELECT DISTINCT [s0].[ID]
    FROM [Sessions] AS [s0]
    LEFT JOIN [Tracks] AS [s.Track0] ON [s0].[TrackId] = [s.Track0].[ID]
    WHERE [s0].[ConferenceId] = @__conferenceId_0
) AS [t] ON [s.SessionSpeakers].[SessionId] = [t].[ID]
ORDER BY [t].[ID]"

14:04:58 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

14:04:58 [Information] () Executed DbCommand ("4"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionTags].[SessionId], [s.SessionTags].[TagId], [s.Tag].[ID], [s.Tag].[Name]
FROM [SessionTag] AS [s.SessionTags]
INNER JOIN [Tags] AS [s.Tag] ON [s.SessionTags].[TagId] = [s.Tag].[ID]
INNER JOIN (
    SELECT DISTINCT [s1].[ID]
    FROM [Sessions] AS [s1]
    LEFT JOIN [Tracks] AS [s.Track1] ON [s1].[TrackId] = [s.Track1].[ID]
    WHERE [s1].[ConferenceId] = @__conferenceId_0
) AS [t0] ON [s.SessionTags].[SessionId] = [t0].[ID]
ORDER BY [t0].[ID]"

14:04:58 [Debug] () Executing DbCommand [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

14:04:58 [Information] () Executed DbCommand ("3"ms) [Parameters=["@__conferenceId_0='?' (DbType = Int32)"], CommandType='Text', CommandTimeout='30']"
""SELECT [s.SessionAttendees].[SessionId], [s.SessionAttendees].[AttendeeId], [s.Attendee].[ID], [s.Attendee].[EmailAddress], [s.Attendee].[FirstName], [s.Attendee].[LastName], [s.Attendee].[Url], [s.Attendee].[UserName]
FROM [SessionAttendee] AS [s.SessionAttendees]
INNER JOIN [Attendees] AS [s.Attendee] ON [s.SessionAttendees].[AttendeeId] = [s.Attendee].[ID]
INNER JOIN (
    SELECT DISTINCT [s2].[ID]
    FROM [Sessions] AS [s2]
    LEFT JOIN [Tracks] AS [s.Track2] ON [s2].[TrackId] = [s.Track2].[ID]
    WHERE [s2].[ConferenceId] = @__conferenceId_0
) AS [t1] ON [s.SessionAttendees].[SessionId] = [t1].[ID]
ORDER BY [t1].[ID]"

14:04:58 [Debug] () A data reader was disposed.

14:04:58 [Debug] () A data reader was disposed.

14:04:58 [Debug] () A data reader was disposed.

14:04:58 [Debug] () A data reader was disposed.

14:04:58 [Debug] () Closing connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:04:58 [Debug] () Closed connection to database '"Conference-BackEnd"' on server '".\sqlexpress"'.

14:04:58 [Information] () Executed action method "BackEnd.Controllers.SessionsController.Get (BackEnd)", returned result "Microsoft.AspNetCore.Mvc.ObjectResult" in 253.2754ms.

14:04:58 [Debug] () List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter", "Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter"]

14:04:58 [Debug] () No information found on request to perform content negotiation.

14:04:58 [Debug] () Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.

14:04:58 [Debug] () Attempting to select the first formatter in the output formatters list which can write the result.

14:04:58 [Debug] () Selected output formatter '"Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter"' and content type '"application/json"' to write the response.

14:04:58 [Information] () Executing ObjectResult, writing value of type '"System.Collections.Generic.List`1[[ConferenceDTO.SessionResponse, ConferenceDTO, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"'.

14:04:58 [Debug] () Vary by rules were updated. Headers: "ACCEPT-ENCODING", Query keys: null

14:04:58 [Information] () Executed action "BackEnd.Controllers.SessionsController.Get (BackEnd)" in 279.1161ms

14:04:58 [Information] () Executed endpoint '"BackEnd.Controllers.SessionsController.Get (BackEnd)"'

14:04:58 [Information] () The response has been cached.

14:04:58 [Debug] () '"ApplicationDbContext"' disposed.

14:04:58 [Information] () Request finished in 283.6941ms 200 application/json; charset=utf-8
